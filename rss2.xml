<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>蕩漾</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>恍不觉梦,流离之人,追逐幻影,弃友弃人</description>
    <pubDate>Fri, 14 Jun 2024 12:09:26 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title></title>
      <link>http://example.com/2024/mian-shi/</link>
      <guid>http://example.com/2024/mian-shi/</guid>
      <pubDate>Fri, 14 Jun 2024 10:13:32 GMT</pubDate>
      
        
        
      <description>&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</description>
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="104、怎么设计接口测试用例？"><a href="#104、怎么设计接口测试用例？" class="headerlink" title="104、怎么设计接口测试用例？"></a>104、怎么设计接口测试用例？</h2><p>答：<br>通常，设计接口测试用例需要考虑以下几个方面：<br>①是否满足前提条件<br>有些接口需要满足前提，才可成功获取数据。常见的，需要登录 Token 逆向用例：针对是否满足前置条件（假设为 n 个条件），设计 0~n 条用例<br>②是否携带默认值参数<br>正向用例：带默认值的参数都不填写、不传参，必填参数都填写正确且存在的“常规”值， 其他不填写，设计 1 条用例<br>③业务规则、功能需求<br>这里根据时间情况，结合接口参数说明，可能需要设计 N 条正向用例和逆向用例<br>④参数是否必填<br>逆向用例：针对每个必填参数，都设计 1 条参数值为空的逆向用例<br>⑤参数之间是否存在关联<br>有些参数彼此之间存在相互制约的关系<br>⑥参数数据类型限制<br>逆向用例：针对每个参数都设计 1 条参数值类型不符的逆向用例<br>⑦参数数据类型自身的数据范围值限制<br>正向用例：针对所有参数，设计 1 条每个参数的参数值在数据范围内为最大值的正向用例</p><h2 id="105、你做接口测试，测什么？"><a href="#105、你做接口测试，测什么？" class="headerlink" title="105、你做接口测试，测什么？"></a>105、你做接口测试，测什么？</h2><p>答：<br>可用性测试<br>根据约定的协议、方法、格式内容，传输数据到接口经处理后返回期望的结果：</p><p>•接口功能是否正确实现；<br>•返回值测试 - 返回值除了内容要正确，类型也要正确，保证调用方能够正确地解析；<br>•参数值边界值、等价类测试； 错误和异常处理测试</p><p>•输入异常值（空值、特殊字符、超过约定长度等），接口能正确处理，且按预期响应；<br>•输入错误的参数，接口能正确处理，并按预期响应；<br>•多输入、少输入参数，接口能正确处理，且按预期响应；<br>•错误传输数据格式（如 json 格式写成 form 格式）测试； 安全性测试，主要指传输数据的安全性：</p><p>•敏感数据（如密码、秘钥）等是否加密传输；<br>•返回数据是否含有敏感数据，如用户密码、完整的用户银行账号信息等；<br>•接口是否对传入的数据做安全校验，如身份 ID 加 token 类似校验；<br>•接口是否防止恶意请求（如大量伪造请求接口致使服务器崩溃）；性能测试，如接口的响应时间、并发处理能力、压测处理情况：</p><p>•并发请求相同的接口（特别为 POST 请求），接口的处理情况（如插入了相同的记录导致数据出错，引发系统故障）；</p><p>•接口响应时长在用户可忍受的范围内；<br>•对于请求量大的接口做压测，确定最大的瓶颈点是否满足当前业务需要；</p><h2 id="110、接口测试中，依赖登录状态的接口如何测试？"><a href="#110、接口测试中，依赖登录状态的接口如何测试？" class="headerlink" title="110、接口测试中，依赖登录状态的接口如何测试？"></a>110、接口测试中，依赖登录状态的接口如何测试？</h2><p>答：依赖登录状态的接口的本质上是在每次发送请求时需要带上 session 或者 cookie 才能发送成功，在构建 POST 请求时添加必要的 session 或者 cookiebug生命周期<br>新建、已分配、已打开、提交测试、已关闭或者重新打开</p><h2 id="47-软件生命周期"><a href="#47-软件生命周期" class="headerlink" title="47.软件生命周期"></a>47.软件生命周期</h2><p>问题定义、可行性研究、需求分析、开发阶段、测试阶段、维护</p><h2 id="48-软件开发流程"><a href="#48-软件开发流程" class="headerlink" title="48.软件开发流程"></a>48.软件开发流程</h2><p>需求分析、概要设计、详细设计、编码、测试、维护</p><h2 id="49-压测时请求的参数从哪里来？"><a href="#49-压测时请求的参数从哪里来？" class="headerlink" title="49.压测时请求的参数从哪里来？"></a>49.压测时请求的参数从哪里来？</h2><p>get请求是在request.querystring，post请求是在request.form里口测试的功能？</p><ol><li>请求参数、返回值</li><li>不仅可以测试返回值还可以测试等价类、边界值、必填项，包括逻辑、功能、场景，还可以测试逆向思维的流程，还可以测试错误的流程，也可以测试正确的流程</li><li>接口测试可以提高效率，缩短测试周期，在页面未出来之前也可以测试</li><li>接口测试可以测大部分功能，但是测不了ui、兼容性</li><li>接口只能测后端，用java写的</li></ol><h1 id="一。功能测试"><a href="#一。功能测试" class="headerlink" title="一。功能测试"></a>一。功能测试</h1><p>1、输入正确的用户名和密码，点击提交按钮，验证是否能正常登录<br>2、登录成功后是否跳转到正确的页面，是否在当前窗口打开<br>3、输入错误得到用户名或者密码，验证登录失败，并给出相应的提示信息<br>4、不输入用户名或者密码，或者都不输入，验证登录失败，并给出相应的提示信息<br>5、用户名和密码，太短和太长的处理<br>6、用户名和密码，有特殊字符和其他非英文的情况<br>7、用户名和密码前后有空格的处理<br>8、记住用户名和密码的功能<br>9、登录失败，不能记住密码<br>10、密码是否不是明文<br>11、用户登录后修改密码，是否能继续操作，退出后可以用新密码成功登录<br>12、同一用户同时通过不同浏览器登录，是否会导致其中一个下线</p><h1 id="二、界面测试"><a href="#二、界面测试" class="headerlink" title="二、界面测试"></a>二、界面测试</h1><p>1、布局是否合理，2个testbox 和一个按钮是否对齐<br>2、testbox 和按钮的长度和高度是否符合要求<br>3、界面是否好看<br>4、图片、颜色、字体、超链接是否都显示正确</p><p>三、性能测试<br>1、打开登录页面，需要几秒<br>2、输入正确用户名和密码，登录成功到跳转到新页面，不超过5秒<br>3、能支持多少用户同时登录</p><p>四、安全测试<br>1、登录成功后生成的Cookie，是否是httponly (否则容易被脚本盗取)<br>2、用户名和密码是否通过加密的方式发送给web服务器<br>3、用户名和密码的验证，应该是用服务器验证，而不单单是在客户端用javascript验证<br>4、用户名和密码的输入框，是否屏蔽SQL注入攻击<br>5、用户名和密码的输入框，应该禁止输入脚本（防止XSS攻击）<br>6、是否有错误登录的次数限制（防止暴力破解）</p><p>五、可用性测试<br>1、是否可以全用键盘操作，是否有快捷键<br>2、输入用户名和密码后，按回车键，是否可以登录成功</p><p>六、兼容性测试<br>1、主流的浏览器下能否显示正常<br>2、不同的操作系统下能否正常工作，如Windows, Mac<br>3、移动设备上能否正常工作，比如Iphone, Andriod<br>4、不同的分辨率<br>5、不同的浏览器大小（浏览器最大化和非最大化）</p><p>七、软件辅助性测试（是否向残疾用户提供足够的辅助功能）<br>1、高对比度下能否正常显示</p>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2024/mian-shi/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title></title>
      <link>http://example.com/2024/sf6/</link>
      <guid>http://example.com/2024/sf6/</guid>
      <pubDate>Wed, 12 Jun 2024 02:45:30 GMT</pubDate>
      
        
        
      <description>&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</description>
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>##术语简介</p><p>J：Jump，跳跃</p><p>C：Cancel,取消硬直</p><p>Dash: 44 or 66</p><p>CH：CounterHit，打康</p><p>PC：PunishCounter，P康</p><p>TC：TargetCombo，通常技取消通常技</p><p>SA：SuperArt，超必杀技。</p><p>CA：CriticalArt，CA必杀技。</p><p>Cross-Up：逆向</p><p>Reversal:硬直结束立刻出必杀技</p><p>ForcedKnockdown:立即倒地</p><p>HardKnockdown:强制倒地</p><p>Throw Escape :拆投</p><p>Stun: 眩晕&#x2F;硬直</p><p>Armor Break :破霸体</p><p>Crush：墙崩</p><p>Lock：锁防</p><p>Reset: 打修正</p><p>Frame：F，帧数</p><p>Loop：循环压制、循环套路。</p><ul><li></li></ul><p>斗气槽：Drive Gauge，D槽，一共6格。</p><p>斗气迸放：Drive Impact，简写成DI，简称迸放，D撞，指令是HP+HK，消耗1格D槽。下文会用DI或迸放来描述。</p><p>斗气招架：Drive Parry，Parry，简称招架&#x2F;格挡。下文会用格挡来描述，延伸出普通格挡和完美格挡两种按法。不要用DP表述，DP是升龙的通用缩写。</p><p>普通格挡：Regular Parry，指令是按一下或按住MP+MK，消耗0.5格或以上；</p><p>完美格挡：Perfect Parry，指令是攻击到达前按一下或按住MP+MK，消耗0.5格。</p><p>OD必杀技：OverDrive，OD&#x2F;EX必杀，消耗两格。下文会用EX必杀来描述。</p><p>斗气冲锋：Drive Rush，DR，简称绿冲。分为裸绿冲和绿冲取消两种。</p><p>裸绿冲：PDR，按住MP+MK，即普格后66，消耗1格。</p><p>绿冲取消：CDR，可取消的通常技打中时输入66，消耗3格。</p><p>斗气反攻：Drive Reversal，D反，指令是防御或普格时6+HP+HK，消耗2格。下文会用D反来描述。</p><p>打康：包括普通康和确反康两种。</p><p>普通康：Counter Hit，CH，在对手攻击或行动的发生和持续的时候命中对面。</p><p>确反康：Punish Counter，P康，在对手攻击或行动的收招硬直内打中对方。</p><p>霸体：Armor，拥有霸体的技能，攻击进行中受到攻击不会中断。刚体，霸体，护甲是一个东西的不同叫法，此处用霸体来描述。</p><p>破霸体：Armor Break，有破霸体属性的招式命中或多段技命中超过其霸体数量时触发。</p><p>强制倒地：Hard Knockdown，只能原地起身，下文用硬倒地表示。</p><p>立即倒地：Forced Knockdown，空中必杀技，空中派生技，空中特殊技（金的J2MP），被打会限定浮空。</p><p>枯竭状态：BurnOut，D槽为空时进入。也可以叫虚弱&#x2F;虚损状态，本文用枯竭状态来描述。</p><p>连打取消：轻攻击互相取消，2LP&gt;2LP&#x2F;5LP,2LK&gt;2LP&#x2F;5LP这类。</p><p>腹崩：膝盖倒地慢慢下跪倒下，部分重攻击P康的效果。</p><p>贴墙：普通DI命中近版边对手，会让对手贴墙，可追击。</p><p>墙崩：Crush，近版边DI破防，效果类似腹崩。</p><p>滑地：部分技能能造成对手在地上滑行（滚动），可追击。</p><ul><li></li></ul><p>通常技：是指(方向+)按钮使出的招式。文中的通常技，一般情况下包括特殊技。</p><p>特殊技：是指方向+按钮的招式，一般相对于通常技有较多的属性，例如吹飞，倒地，中段等。</p><p>必杀技：须以复数指令输入才能使出的攻击技；必杀技的特点是属性会较通常技、特殊技为多。延伸EX必杀技。</p><p>超必杀技：通常情况比必杀技输入更复杂，属性更多，威力更大的技。通常需要消耗整条能量槽。不同格斗游戏有其独特的称呼，街霸6中称为SA&#x2F;CA 。</p><ul><li></li></ul><p>上段攻击：任意地面防御都能防住的攻击</p><p>中段攻击：蹲姿防御无效的攻击</p><p>下段攻击：站姿防御无效的攻击</p><p>注：这是从防御角度来描述攻击技，不要和攻击技的打点混淆。</p><ul><li></li></ul><p>招式的攻击类型：分为三种 打击技、飞道、投。</p><ul><li></li></ul><p>帧数&#x2F;F：Frame,格斗游戏中的时间单位，通常会在攻略或帧数表表示中出现的词语，意思是1F&#x3D;1&#x2F;60S。格斗游戏都锁60F。</p><p>发生、持续、收招的概念                 </p><p>从准备动作到攻击判定开始的时间称为攻击技能的发生时间。</p><p>攻击判定从开始到结束经过的时间称为攻击技能的持续时间。</p><p>从攻击判定结束到角色可自由操作的时间称为收招时间。</p><p>发生最后1F和持续第1F重叠。</p><ul><li></li></ul><p>沁：防御时狂按键。</p><p>凹：防御或进攻时不确认的EX必杀技&#x2F;SA必杀技行动。</p><p>牵制：用远距离招阻止对手近身或限制对方的行动范围。</p><p>压制：进攻时通过技能组合维持对方在防御硬直内，保持我方有利进攻状态。</p><p>起功：倒地或设置后，发起多择进攻。</p><p>套路：固定的压制破防方法或起功。</p><p>破防：击破对方防御或被不可防御技击中。</p><p>确认：压制或互动中的攻击命中，接后续连段的操作。被防更换其他压制或行动。引申确认差合，确认发波等说法。</p><p>目押：简单来说，不是取消上一招的硬直形成的连段，就叫目押。</p><p>取消：简单来说，取消上一招的硬直而形成的连段，就是取消。</p><p>构：一种特殊的攻击姿势，构下的招即使指令与普通状态下的招指令相同也是不同性能的招。街霸6春丽的214P。</p><p>偷帧：指利用靠后的攻击判定打中对手获得额外的有利硬直，引申出偷帧连，偷帧压制等。</p><p>当身：当身技能本身没有攻击判定，触发当身会自动延伸出相应攻击。</p><p>打击停顿：HitStop，打击技击中&#x2F;命中时，攻守双方产生对等硬直的时间。飞道Hitstop的只存在于防御方身上。</p><p>击退距离：KnockBack &#x2F;PushBack，攻击打中时防御方会后退的距离。版边时候KB会转移到攻击方身上。飞道的KB只作用于防御方。</p><p>派生技：通常情况下无法单独使用，再使出某一招式后追加输入才会发出的招式。</p><p>攻击判定：角色使出招式时，能够攻击对方的有效范围&#x2F;距离，而此范围便会称为攻击判定。</p><p>被攻击判定：也叫受创判定，意即被攻击的有效范围。</p><p>修正值：伤害平衡计算系统，主要是指连续技的攻击力和HIT数和起手等有关联。</p><p>补正切&#x2F;打修正：Reset，重置修正，在连段末尾刻意不使用击倒或击晕的连段，而选择重新起功以最大化伤害的目的。</p><p>无敌：技能没有被攻击判定的状态，通常有无敌时间，上半身无敌，下半身无敌，对飞行道具无敌，对打击无敌，对投技无敌，完全无敌等说法。</p><p>F式：站-蹲防御快速切换时，站姿的受创判定会在短时间内暂时保留，这时会出现有着与站姿一样受创判定的蹲姿。</p><p>升中段：区别于F式，升中段是起跳过程上升中的快速攻击，部分能直接命中蹲姿的大体型角色。</p><p>暗转时间：指超必杀技发动时 ，画面变暗(或特写动画)时，双方都陷入不接受指令输入的硬直的时间。</p><p>安全跳：指恰当的时机跳攻击（低点）压起身并按住1或4，对方防御，则击中，对方凹无敌技，则我方落地防御的一种进攻技巧。</p><p>复合输入：在输入某一技能指令时同时输入其他相关技能的（部分）指令，以达到简化指令输入以及对策特殊技能的目的。</p><p>FAJI：Faji分为很多种，Faji防御，Faji跳，Faji进攻等，主要目的是为了应对多种不同时间差的进攻或防御手段。例如防御中下时，先拉1再拉4；防御空跳下段时拉4复合按投；防御打&#x2F;指令投组合的先拉1再拉7等等操作。</p><p>立回：通过包括前后移动，(空中)dash，跳跃，空振等行动诱使对方露出破绽(包括直接的不利硬直（比如技挥空后的收招硬直等）和距离上的不利(比如被逼入版边或跳入对方的无敌对空技范围内)等攻击命中前或游戏胜利前的行动总称。</p><p>预读：先读，阅读对手的习惯，提前准备好相应的招式或行动的对应。</p><p>见切：看到再反应再对策。</p><p>先置：预读对手行动后，先出某一个招，利用这个招的持续或其他属性，使对方可能的行动失败（例如66）或出招被康。</p><p>对置：预读或见切对手的招式，利用判定优势或者发生时间优势提前命中对手或拼相杀，利用相杀优势等等。</p><p>差合：当对方的技挥空后，我方在其收招硬直内，确认命中对方。</p><p>#基础系统</p><p>#操作模式</p><p>#经典模式</p><ul><li></li></ul><p>↖ ↑ ↗ LP MP HP</p><p>← ○ →</p><p>↙ ↓ ↘ LK MK HK</p><ul><li></li></ul><p>通常习惯用数字表示方向，其对应如下：</p><p>7 8 9 &#x3D; ↖ ↑ ↗</p><p>4 5 6 &#x3D; ← ○ →</p><p>1 2 3 &#x3D; ↙ ↓ ↘</p><p>5即不按任何方向，摇杆回到无人持握&#x2F;轻握时的状态（回中）。</p><p>在书写连续技时，通常情况下可以把5省略，且方向均为1P的方向指令。</p><ul><li></li></ul><p>LP&#x3D;Light Punch&#x3D;轻拳</p><p>MP&#x3D; Medium Punch&#x3D; 中拳</p><p>HP&#x3D; Heavy Punch&#x3D; 重拳</p><p>LK&#x3D; Light Kick&#x3D; 轻脚</p><p>MK&#x3D; Medium Kick&#x3D; 中脚</p><p>HK&#x3D; Heavy Kick&#x3D; 重脚</p><ul><li></li></ul><p>LP+MP&#x3D;投</p><p>MP+MK&#x3D;格挡</p><p>HP+HK&#x3D;斗气迸放</p><p>6+HP+HK&#x3D;斗气反击</p><p>方向+6个键&#x3D;挑衅</p><p>推荐把格挡和迸放设快捷键。</p><p>下文内容均以经典模式的指令为例。</p><ul><li></li></ul><p>#现代模式</p><p>现代模式是一种简易出招和简易连段的模式。最少需要7个键。</p><p>分别是</p><p>L M H PA</p><p>SP AS DI</p><p>L&#x3D;轻攻击拳&#x2F;脚</p><p>M&#x3D;中攻击拳&#x2F;脚</p><p>H&#x3D;重攻击拳&#x2F;脚</p><p>SP&#x3D;必杀技键</p><p>AS&#x3D;协助键</p><p>DI和PA是迸放和格挡的快捷键。</p><ul><li></li></ul><p>以隆为例：</p><p>投是L+M。</p><p>2HK需要用3H的指令来按。</p><p>快捷波：SP</p><p>快捷(重)升龙：6+SP</p><p>快捷(中)旋风腿：4+SP</p><p>快捷(中)踹：2+SP</p><p>快捷SA1：SP+H</p><p>快捷SA2：SP+4H</p><p>快捷SA3：SP+2H</p><p>EX技：方向+SP+AS</p><p>2L默认是2LK，连打2L会变成连打2LP。</p><p>AS键按住，再按L&#x2F;M&#x2F;H会有自动的连段，具体可以参考出招表，AS自动连段被防御不会出SA或后面的必杀。</p><p>有的角色M+H有功能，比如肯M+H等于KK。</p><p>挑衅是SP+L+M+H。</p><ul><li></li></ul><p>用SP&#x2F;AS出的“快捷必杀”，伤害&#x3D;手搓伤害的80%。现代模式里也可以手搓必杀。</p><p>相比经典模式，现代模式里会少一些招式。如隆的5MK，5HK和一些不同等级的必杀等。</p><p>蓄力系不可以直接一键出蓄力必杀，需要稍微蓄力一小会，当然比手搓蓄力快的多。</p><ul><li></li></ul><p>#动感模式</p><p>线下模式专用，比赛模式禁用。</p><p>按一个键，AI根据不同距离自动出招和连段。</p><p>比较娱乐，似乎没啥可深究的。</p><p>#基础移动</p><p>街霸6的基础移动分为前走，后走，前冲，后退，原地跳，前跳，后跳。</p><ul><li></li></ul><p>前走&#x2F;后走</p><p>前走，拉6；后走，拉4。每个角色前走和后走速度皆不同。</p><ul><li></li></ul><p>前冲&#x2F;后退</p><p>前冲，66；后退，44。每个角色前冲和后退的距离皆不同。</p><p>街霸6中的44，从发生到恢复自由行动是全地面判定；</p><p>44发生后1-15F对投无敌；</p><ul><li></li></ul><p>跳跃</p><p>后跳&#x2F;原地跳&#x2F;前跳分别为拉7&#x2F;8&#x2F;9。</p><ul><li></li></ul><p>起跳准备</p><p>通常角色起跳准备时间为4F，莉莉和老桑5F起跳。</p><p>部分角色的特殊技只能前跳出。</p><ul><li></li></ul><p>落地收招</p><p>正常跳跃后有3F落地硬直。空跳不出招，落地硬直内可以防或拆投；空中出招后，则有3F落地收招（可被P康）。</p><p>空中特殊技、必杀技，可能有单独的落地收招。</p><ul><li></li></ul><p>44，66，空跳全过程，都没有被康判定。</p><p>#投</p><p>4+LP+LK ，后投。</p><p>5&#x2F;6+LP+LK，前投。</p><p>投发生5F，持续3F，收招23F，全程30F。</p><ul><li></li></ul><p>蹲投和街霸5一样，会站起来投。</p><p>街霸6的投可以投康。</p><p>版边大部分角色的连投循环还在，大部分角色44版边可以躲投，运气好是有利或确反。</p><p>部分角色拥有特别的普通投，如桑吉尔夫、达尔西姆，参考出招表。</p><ul><li></li></ul><p>拆投</p><p>拆投受付时间为9F。</p><p>拆投后双方互相推开，大概是隆两个身位的距离。</p><p>指令投和空投不可拆。</p><ul><li></li></ul><p>投无敌</p><p>起跳准备动作期间投无敌。</p><p>44有1-15F投无敌。</p><p>起身后有1F投无敌。</p><p>防御和受创硬直后有2F投无敌。</p><ul><li></li></ul><p>空投</p><p>普通空投是跳LP+LK。</p><p>有空投的角色：</p><p>布兰卡</p><p>嘉米</p><p>春丽</p><p>古烈</p><p>JP</p><p>朱莉</p><p>#康特</p><p>Counter Hit: 打康，普康，CH。在对手攻击发生或持续的时候命中对面，屏幕会提示CounterHit字样，硬直差＋2F。</p><p>Punish Counter: 确反康，P康，PC。在对手攻击或行动的收招硬直内打中对方，屏幕会提示Punish Counter字样，硬直差+4F。</p><p>P康命中声效和特效和普康不一样，有特殊属性，如浮空时间延长，腹崩等。</p><p>投P康有特写，2HK P康倒地时间延长等。</p><p>通常技&#x2F;必杀技(DI) 普通康或P康＋20%伤害。</p><p>普通投普通康不加伤害，P康是70%。</p><p>指令投普通康不加伤害，P康是15%。</p><p>SA，D反打康没有额外伤害。</p><ul><li></li></ul><p>绿冲全程，隆的22P，杰米的喝酒等，都是发生时间，只能被普康。</p><p>44，66，空跳全过程，都没有被康判定。</p><p>#倒地起身</p><p>倒地起身，就两种，一种原地起身，一种后起身，没法赖地板。</p><p>两种起身的时间是完全一样的，版边可以固定压制。</p><p>2HK打康会延长起身时间。</p><p>默认起身是原地起身，倒地瞬间按任意两个键是后起身。</p><p>硬倒地会显示HardKnockdown，只能原地起身。</p><ul><li></li></ul><p>硬倒地：</p><p>1, 2HK对地*</p><p>2，投P康</p><p>3，SA3&#x2F;CA和部分SA*</p><p>4，版边DI破防</p><p>5，指令投</p><p>6，角色*</p><p>--</p><p>*对空的2HK，可以后起身。</p><p>--</p><p>*肯SA1</p><p>玛丽莎SA1蓄、SA2</p><p>嘉米SA2</p><p>DJ SA1&#x2F;SA2&gt;HP&#x2F;HK</p><p>本田SA2</p><p>桑吉尔夫SA2</p><p>--</p><p>*角色</p><p>玛丽莎 236P蓄，214K&gt;K，JHP蓄&#x2F;JHK蓄&#x2F;原地跳2HP</p><p>曼侬3HK确反康</p><p>朱莉 JHP</p><p>DJ 214K &gt; MK</p><p>达尔西姆 1HK</p><p>JP 3HP</p><p>#霸体与破霸体</p><p>霸体：Armor，拥有霸体的技能，攻击进行中受到攻击不会中断。</p><p>破霸体：Armor Break，有破霸体属性的招式命中或多段技命中超过其霸体数量时触发。</p><ul><li></li></ul><p>霸体技</p><p>DI</p><p>桑吉尔夫的5HP蓄</p><p>本田46PP</p><p>玛丽莎的214K&#x2F;236P&#x2F;623P</p><p>卢克的236KK</p><p>等</p><ul><li></li></ul><p>破霸体技</p><p>D反</p><p>SA</p><p>玛丽莎 236P蓄&#x2F;236PP&#x2F;236KK &#x2F;214PP&#x2F;623PP</p><ul><li></li></ul><p>通用对策：</p><p>投</p><p>DI（反击）</p><p>霸体技反霸体</p><p>多段技（百烈掌等）</p><p>#蓄力系</p><p>春丽</p><p>[2]8K，需要30F。</p><p>[4]6P，需要50F。</p><p>构行云流水下无需蓄力即可出。</p><p>布兰卡</p><p>[4]6P，需要40F。</p><p>空中[4]6P，需要40F。</p><p>[2]8K，需要40F。</p><p>布兰卡SA2激活期间，无需蓄力就可以出。</p><p>DJ</p><p>[2]8K，需要40F。</p><p>[4]6P，需要45F。</p><p>本田</p><p>[4]6P，需要40F。</p><p>[2]8K，需要40F。</p><p>[4]646K，需要40F。</p><p>古烈</p><p>[4]6P，需要45F。</p><p>[2]8K，需要45F。</p><p>[4]646P，需要45F。</p><p>[4]646K，需要45F。</p><p>[4]6P，[2]8K，3F内同时输入方向+P&#x2F;K，称为完美波和完美升龙，性能变化。</p><p>卢克</p><p>214LP 蓄力18-20F为完美版本，性能变化。</p><p>214MP 蓄力18-20F为完美版本，性能变化。</p><p>#连段构成</p><p>目押连、取消连、浮空连。</p><ul><li></li></ul><p>目押连：</p><p>分为普通目押，绿冲目押，康目押，偷帧目押，相杀目押。</p><ul><li></li></ul><p>普通目押：</p><p>近身情况下，前一招的命中硬直差大于下一招的发生，就可以形成目押连段。</p><p>隆5MP命中+7F，2MP发生6F。</p><p>近身下，隆5MP&gt;2MP是一个目押连段。</p><ul><li></li></ul><p>绿冲目押：</p><p>隆2LP命中+4F，绿冲2LP命中+8F。</p><p>绿冲2LP &gt;2MP 形成目押连段。</p><ul><li></li></ul><p>康目押：</p><p>隆2LP命中+4F，普康变+6F可以目押2MP，P康变+8F，可以目押2MK（发生8F）。</p><p>2LP(CH) &gt;2MP</p><p>2LP(PC) &gt;2MK</p><p>绿冲康目押请自行摸索。</p><ul><li></li></ul><p>偷帧目押：</p><p>隆5MP持续第1F命中，硬直差+7F，持续第2F命中硬直差+8F。</p><p>隆5MP压起身（偷帧概率更高），偷帧命中目标：</p><p>5MP（偷帧）&gt;2MK 偷帧目押连段。</p><ul><li></li></ul><p>相杀目押：</p><p>相杀后恢复快的1方有可能可以连段。</p><ul><li></li></ul><p>取消连：</p><p>取消连分为连打取消、TC、取消连。</p><ul><li></li></ul><p>连打取消：</p><p>轻攻击互相取消，后面可以取消必杀技&#x2F;绿冲等。</p><p>如隆</p><p>2LK&gt;2LP&gt;214MK&#x2F;623HP 等。</p><ul><li></li></ul><p>TC：</p><p>TC为系统设定的固定取消连。</p><p>隆的两个TC，5HP&gt;5HK；5MP&gt;5LK&gt;5HK。</p><ul><li></li></ul><p>取消连：</p><p>通常技一般可以取消TC&#x2F;必杀&#x2F;超必杀&#x2F;绿冲&#x2F;DI等。具体看设定，一般可以查看帧数表的取消栏目。</p><p>例如卢克的5MP，可以TC，不能绿冲。</p><p>部分必杀技也可以取消SA2&#x2F;SA3。</p><ul><li></li></ul><p>浮空连：</p><p>浮空就是把对方打浮空然后再接后续连段。</p><p>具体打浮空的技能每个角色不一样，隆的JMP，214HP，236KK，236PP等都可以。</p><p>通用是绿冲通常技对空或追击滑地，霸体DI对空。</p><p>腹崩，墙崩和滑地也有一部分时间是限定浮空状态，可以打浮空连。</p><p>#核心系统</p><p>#SuperArt</p><p>SuperArt，超必杀技，每个角色有三个SA。</p><p>SA槽，会带入下一灯。</p><p>必杀技挥空不会增加SA槽。DI和D反，击中或命中对手，双方都不会增加SA槽。</p><p>其他攻击行动（包括格挡），命中，防御，被打，双方都会相应增加SA槽，攻击方更多一些。</p><ul><li></li></ul><p>SA1，SA2，SA3，数字代表消耗的SA槽数量。</p><p>例如隆的SA1是真空波动拳，SA2是真波掌击，SA3是豪升龙拳。</p><p><img src="/" alt="img"></p><p>SA1，只可以用通常技取消，例2MK &gt;SA1，但是不可以2MK &gt;波 &gt;SA1。所以以前隆的经典连段2MK&gt;波&gt;真空波动拳没了。</p><p>虽然不能直接取消，但是角色还是有很多方式可以接SA1，比如只要把对面打浮空就可以。隆的EX踹，EX波都可以。</p><p>SA1大部分发生没有对波无敌，有打击和投无敌。</p><p>除了DJ的SA1（无敌只有第1F），达尔西姆的SA1（无无敌），和桑吉尔夫的SA1（只能对空）</p><p>SA2，通常技，满足条件的EX必杀技可以取消至SA2。比如隆可以EX波动 &gt;SA2，但EX升龙不行</p><p>SA3，通常技，必杀技，满足条件的EX必杀技都可以取消至SA3。比如隆可以普通升龙&gt;SA3，但EX升龙不行。</p><p>SA3演出时间会暂停，但进攻方仍然会正常恢复D槽，大概能恢复2格到2.2格（CA），对方则暂停恢复。</p><p>CA，25%血以下，3格SA槽时会变成CA字样。CA的演出和伤害会改变，画面变灰，伤害增加500。</p><p>SA里的飞道和打击技均破霸体。（古烈和朱莉的buff型的SA不算）</p><p>#斗气系统</p><p>#D槽</p><p>D槽一共六格，每灯开始时全满，D槽会随时间慢慢恢复。</p><p>D槽可以超额使用，只要还没到枯竭，都可以超额使出任意D技能（EX、DI、D反、绿冲取消），用完就进入枯竭状态。但不可以在小于0.5格D时超额裸绿冲和普通格挡（完美格挡可以），当企图这么做时，会原地枯竭。</p><p>D槽多于3格是绿色，低于3格是黄色，便于确认。</p><ul><li></li></ul><p>获取D槽的方式：</p><p>1，随时间自动获取</p><p>2，往前走</p><p>3，投&#x2F;打中对手</p><p>4，眩晕后恢复到6格</p><p>5，格挡攻击</p><p>简单来说，多压制，多进攻，就能获取更多D槽。</p><p>通常技，必杀技打中对手获取的D槽与攻击等级成正比；EX，DI，D反打中不会获取D槽（锁定模式）。</p><p>隆的SA3演出过程中能恢复2格到2.2格（CA）。</p><ul><li></li></ul><p>失去D槽的方式：</p><p>1，使用D技能</p><p>2，防御攻击</p><p>3，被攻击打中P康</p><p>4, 被DI打中</p><p>5，被SA&#x2F;CA打中</p><ul><li></li></ul><p>隆的攻击打P康消耗对面D槽排行：</p><p>投P康&#x3D;5HK P康&#x3D;2HK P康 &#x3D;236HK P康&#x3D;1格 &gt;6HK&#x2F;2HP&#x2F;5HP P康等0.8格&gt;JHP P康0.5格….。</p><ul><li></li></ul><p>指令投P康同普通投P康，都是1格。</p><p>DI，被防御掉0.5格，普通命中1格，普康命中1.2格，霸体DI或P康命中1.5格。</p><p>SA1，命中0.5格，SA2，命中1格。SA3，命中1.5格D槽。CA，命中2格。SA打P康不会额外消耗对面D槽。</p><p>D反被防和命中也不会消耗对面D槽。</p><p>防御攻击失去的D槽与攻击等级成正比。</p><ul><li></li></ul><p>积极模式</p><p>原地不动是标准的D槽回复速率1。</p><p>那么，拉6往前走会获得额外D槽，一直拉住6的整体回复速率大概是标准速率的150%。</p><ul><li></li></ul><p>消极模式</p><p>消极模式D槽回复速率约为标准速率的60%。</p><p>1.在空中</p><p>2.被非P康攻击命中导致的硬直内</p><ul><li></li></ul><p>锁定模式</p><p>锁定模式下，D槽的自动恢复会停止一定时间。</p><p>1.非枯竭模式下防御攻击，停止1.5S</p><p>2.格挡挥空，停止4.5S；格挡成功，停止1S。</p><p>3.被普通DI或其他攻击P康打中后会停止一定时间。</p><p>4.使用通常技取消的绿冲后会停止2.5S左右，裸绿冲后会停止4.5S（同格挡挥空的意思一样）</p><p>5.使用D技能（DI、D反、OD）后大概会停止2.5-3S左右的时间。</p><ul><li></li></ul><p>锁定模式下仍然可以通过除时间外的方式获得D槽。</p><p>锁定模式下，又使用了会导致锁定模式的技能，哪个锁定时间长，就执行哪个；</p><p>如格挡挥空后DI，会停止7.5S嘛？不会，只会执行格挡锁定的4.5S。</p><ul><li></li></ul><p>绿冲取消的连段和连段中裸绿冲的连段，连段过程中，只能通过前走获得额外的D槽。</p><p>裸绿冲起手的连段，前走和攻击都可以获取D槽，如果后续再带入裸绿冲或绿冲取消，则遵循上一条的规则。</p><ul><li></li></ul><p>由于绿冲连段中前走获得D槽的系统，可以在连段中微移动从而能使用更多D槽进行连段。</p><p>*枯竭状态下的D槽加速减速恢复往下看。</p><p>#斗气迸放</p><p>斗气迸放，DriveImpact，简写成DI，指令是HP+HK，消耗1格D槽，命中造成800伤害。</p><p>DI发生26F，1F到25F有2次霸体，霸体吸收攻击时会造成白血，正常时候会慢慢恢复（被打白血消失），如果血槽不够，则会直接死亡。</p><p>可以通常技取消DI。</p><p>DI被防掉0.5格，普通命中1格，普康命中1.2格，霸体DI命中1.5格。</p><ul><li></li></ul><p>普通DI</p><p>版中被防，击退对面。</p><p>版中命中地面或空中，把对面击倒很远。</p><p>版边直接破防，显示崩防字样，可追击，破防本身并不会造成伤害。</p><p>版边或近版边命中，造成对面贴墙。</p><p>贴墙状态下，普通技击中会再造成一次浮空，不过只能追击TC或必杀技。</p><p>枯竭状态下，版边中或防DI后弹墙就会眩晕；版边裸出的普通DI正好把对方打进枯竭并弹墙，会直接眩晕，具体见#眩晕部分。</p><p>DI相杀会互相击退一定距离，并且双方都回复1格D槽（即使一方因为使用DI进了枯竭，也会恢复1格左右的D槽）。</p><ul><li></li></ul><p>霸体DI</p><p>霸体DI是指发动时触发霸体或命中对面P康。</p><p>霸体对面的攻击后命中对面，进入画面特写，任意位置可追击。</p><p>霸体DI命中空中会造成很长的浮空，对手会在空中持续旋转。</p><ul><li></li></ul><p>连段DI</p><p>DI可以带入连段，比如隆可以2HP&gt;DI，目的是在没有SA时候可以削减对面的D槽，带入连段后的DI没有弹墙性能。</p><ul><li></li></ul><p>锁防</p><p>在版边处于防御硬直内，再受到DI攻击时，不会破防。</p><p>例如:</p><p>金柏莉在版边用雷管固定对手后用DI进攻，会出现这个Lock字样，不会破防。</p><p>#斗气冲锋</p><p>斗气冲锋：DriveRush， 绿冲。</p><p>裸绿冲，PDR，格挡按住一会后66，消耗1格，可以挥空出。</p><p>绿冲取消，CDR，通常技取消66，消耗3格，不能挥空出，这个通常技必须可以取消必杀技，只取消TC不行（卢克的5MP）。</p><p>绿冲中通常技&#x2F;特殊技打中对面，硬直差均+4F。</p><p>对空或追击滑地后都可以让对方再次浮空（详见#浮空）。</p><p>裸绿冲发动瞬间有暗转，可以吞对面的指令。</p><p>*最速裸绿冲</p><p>#1.在前一个动作的硬直内按住MP+MK，在硬直接近结束时，输入66，精确消耗1格D槽，则成功。</p><p>#2.普通状态下快速输入66+MP+MK，精确消耗1格D槽，则成功。</p><ul><li></li></ul><p>绿冲全程</p><p>裸绿冲，按住格挡的最短时间是3F。</p><p>滑行后最速取消的情况下，准备动作8F。</p><p>滑行不出招，执行任意方向，第24F起可操作，比如防御或跳，44，66也可以。</p><p>滑行后什么都不做，滑行共45F时间的距离。</p><p>绿冲滑行中可以取消任何通常技、特殊技、必杀技（DI)、SA等，但是整个动作结束前不可以取消格挡。</p><p>绿冲取消滑行准备动作相比裸绿冲加1F。</p><p>不同角色的绿冲速度不同，即机动性有差异。</p><ul><li></li></ul><p>最速裸绿冲轻攻击：</p><p>隆5LP发生4F，上图为最速裸绿冲5LP。可以看到前面3F是格挡的准备时间，滑行8F后5LP生效，第12F产生判定。即最速裸绿冲+取消通常技是15F发生。</p><p>绿冲取消5LP则是13F发生。</p><ul><li></li></ul><p>最速裸绿冲防御：</p><p>裸绿冲，格挡后滑行拉住1或4，26F准备动作，第27F起可防御。</p><p>绿冲取消是24F准备动作，第25F起可防御。</p><ul><li></li></ul><p>最速裸绿冲全过程：</p><p>最速裸绿冲全程48F，第49F起可防御。</p><p>绿冲取消是全程46F，第47F起可防御。</p><p>训练模式的图，隆可以滑行0.9个版，不同角色滑行距离有差异。</p><ul><li></li></ul><p>绿冲压制</p><p>轻攻击被防&gt;绿冲取消 &gt;最速轻攻击 会被确反；</p><p>中攻击被防&gt;绿冲取消&gt;最速中攻击看硬直，隆5mp &gt;绿冲 &gt;最速5mp 有缝，2mp &gt;绿冲 &gt;最速中攻击都无缝 。</p><p>重攻击被防绿冲最速攻击大部分都无缝。</p><p>有缝不一定是坏事，无缝不一定是好事。</p><ul><li></li></ul><p>绿冲点投</p><p>普通点投可以后走躲开，绿冲轻攻击可以点投，也可以Shimmy晃拆。</p><ul><li></li></ul><p>绿冲压起身</p><p>绿冲压起身中段和下段强力2择，被防也是有利的，打中可以连段。</p><p>例如</p><p>隆的6MP中段被防-3F，命中+2F，绿冲中段被防+1F，命中+6F，可目押2MP</p><p>隆的2LP下段被防-3F，命中+3F，绿冲下段被防+1F，命中+7F，视距离可目押2MP&#x2F;4HP。</p><p>#斗气反击</p><p>斗气反击：DriveReversal，D反，指令是防御或普格时6+HP+HK，消耗2格。</p><p>有破霸体属性，可以破DI等霸体技，命中击倒。</p><p>无敌到持续结束（发生20F，持续3F，全无敌时间共22F），收招可以被打，被防负8F。</p><p>D反打中对面会造成500的白血，不会致死。</p><p>D反不会消耗对面D槽，打康也不会造成额外的白血。</p><p>#枯竭状态</p><p>枯竭状态：Burnout，6格D槽都用光，身体会变灰白色。</p><p>D槽会变成一条灰白色的槽，无法使用任何D技能，从0开始恢复，恢复满之后回到6格，默认大概需要21秒。</p><p>因按了格挡而进入枯竭的瞬间，可以防御，但无法拆投。</p><ul><li></li></ul><p>枯竭中前走也会额外加D槽，增加的速率大概为默认的1.5倍不到一点。</p><p>枯竭中防御攻击或打中对手，会增加自己的D槽。增加的D槽量和攻击等级成正比。</p><p>枯竭中在空中和处于受创硬直内，会极大地减速D槽恢复。</p><ul><li></li></ul><p>枯竭中，攻击方所有攻击被防御时硬直差+4F，命中不变。</p><p>枯竭中，仅会被必杀技（DI）磨血，可以被磨血致死，必杀技磨血伤害&#x3D;默认伤害的1&#x2F;4。</p><p>枯竭中，版边重攻击&gt;DI，基本必中，除非对面凹SA，没有就是绝杀。</p><ul><li></li></ul><p>布兰卡的小布兰卡玩偶磨血伤害为</p><p>普通带电激活，200。</p><p>Ex带电激活，100x2</p><p>SA1带电激活，250。</p><ul><li></li><li></li></ul><p># 眩晕</p><ul><li></li></ul><p>枯竭状态下，版边中或防普通DI后弹墙就会眩晕；</p><p>版边裸出的普通DI正好把对方打进枯竭并弹墙，会直接眩晕。</p><p>注意：重点是中DI并“弹墙”，没弹墙是不会眩晕的。</p><ul><li></li></ul><p>眩晕持续时间为2秒左右，会自然倒地起身，可以原地，也可以后起身，起身后回到6格。</p><p>眩晕中受到攻击，从受创硬直内恢复就会回到6格。</p><ul><li></li></ul><p>眩晕后最优解：</p><p>1，拉6往前走一定时间后跳确反。之前提过，锁定模式下前走可以加D槽。</p><p>2，部分角色可以在对方眩晕时补充自身资源，比如隆可以22P蓄电，朱莉可以蓄风破球，金柏莉可以蓄雷管，之后再跳确反，也来得及。</p><ul><li></li></ul><p>如果你想问眩晕的时候能不能通过狂按方向和按键缩短眩晕时间，答案是不行。</p><p>#斗气招架</p><p><img src="/" alt="img"></p><p>斗气招架：DriveParry，招架&#x2F;格挡 。</p><p>格挡 ,包含(普通)格挡和完美格挡两种，按一下MP+MK，1-2F是完美判定，3-8F是普通判定。持续按住，持续维持普通格挡状态。在前一招的硬直内就按住MP+MK，则第1F开始就是普通格挡判定。</p><p>格挡按一下消耗0.5格，按住继续消耗。</p><p>格挡的攻击没有上中下段区分，可以格挡全段，也不分正逆。</p><p>格挡非SA的飞道，回半格D槽，一般都会亏一点。</p><p>格挡打击技回1格，如果是TC，每个分开算，每个都回1格。</p><p>格挡到SA或DI回复2格。</p><p>格挡挥空可以直接防御，没有收招，但无法拆投。如果没有防御，被打一样是确反康。</p><p>格挡被普通投是P康，4.5秒内不会自动回槽，伤害2040。指令投更加。</p><p>普通格挡：</p><p><img src="/" alt="img"></p><p>普格成功后的硬直差和防御对面攻击时一样。</p><p>普格打击技后双方弹开的距离和防御时一样，但是攻击方也会往后退一定距离。</p><p>普格波的击退距离是防御时候的一半。</p><p>普格DI的时候，之后直接是贴身，大概缩短了隆一个身位的击退距离。</p><p>普格成功后松开按键，会自动格挡联防的攻击。</p><p>普格后可以派生绿冲和D反。</p><p>完美格挡：</p><p><img src="/" alt="img"></p><p>完美格挡，按一下或按住都可以，时机都是都是攻击到前才按，发生1F，持续2F。</p><p>起身完美格挡必须起身瞬间按或按住。</p><p>完美格挡打击技成功进入暗转特写，暗转会吞掉对面的后续指令使其无法取消当前动作，收招1F。</p><p>完美格挡打击技后的暗转时间内，输入任何指令后按住，暗转结束后会自动出这个指令。不管是只按住了通常技还是输入了一个SA指令。</p><p>完美格挡波没有特写，收招10F，之后可以绿冲，也可以其他行动。</p><p>完美格挡最低点安全跳后硬直差是+2F，因为最低点安全跳空中判定1F，落地3F收招硬直。</p><p>完美格挡因为有1F收招，所以只领先2F,如下图所示。</p><p><img src="/" alt="img"></p><p>完美格挡后强制修正50%起手，完美格挡波后也一样，无法消除，除非打修正。</p><p>完美格挡肯5HP的过程：</p><p><img src="/" alt="img"></p><p>完美格挡波后绿冲：</p><p><img src="/" alt="img"></p><p>#其他系统</p><p>#特色系统</p><p>街霸6里最快的普通技发生是4F，普通中段不会被普通技确反（-3F）。</p><p>对手贴版时候，无法跳逆，版边逆向彻底没了。</p><p>隔开一段距离拉着4，对面出攻击键会惯性防御的系统没有了。</p><p>隆的所有普通升龙对空都无敌，普通升龙没有街霸5发生对波对投无敌的属性。</p><p>街霸6的所有连打取消（2LK&gt;2LP,2LP&gt;2LP）都是有缝隙的，不是联防。</p><p>蹲姿防御的受创判定比站姿防御大。</p><p>线下VS模式的时候Rematch速度史上最快。</p><p>线上模式能看到对手联网模式是WIFI还是有线。</p><p>观战时候可以看到实时帧数显示。</p><p>房间内原房主退出不会再解散房间。</p><p>指令预输入时间是4F，意思是1F目押的受付时间为5F。</p><p>#特殊挑衅</p><p>仅介绍对实战可能有“影响”的挑衅。</p><p>布兰卡的4挑衅，可以增加小布兰卡的数量，最多到5。</p><p>春丽的5挑衅，有300伤害，上段攻击。</p><p>莉莉的5挑衅，有1伤害，上段攻击，可以消波。</p><p>玛丽莎的6挑衅有一层霸体。</p><p>本田的5挑衅有一层霸体。</p><p>#攻击优先</p><p>街霸6里通常技有攻击等级但没有优先级之分，轻中重攻击同时命中是相杀并双康，如2LP和2MP相撞是双康，不同于街霸5的攻击等级压制（2MP赢）。</p><p>街霸6里打击和投判定相杀时打击赢（即打击优先级更高），不同于街霸5的投赢。</p><p>街霸6里飞道有攻击等级差别（这点也不同于街霸5），通常情况下 SA波 &gt;OD波 &gt;普通波。</p><p>高攻击等级的波对低攻击等级的波有贯穿属性，即高等级的波会直接吃掉低等级的波，不会损失1Hit，不管低等级的波有多少Hits。同等级就拼Hit数。</p><p>布兰卡的小布兰卡玩偶</p><p>未激活时是完全无敌状态。</p><p>当用普通带电攻击激活时， 攻击等级是1HIT的普通波属性，可以被JP的普通地刺抵消。</p><p>当用EX带电攻击激活时，攻击等级是3HIT的EX波属性，可以被隆电刃EX波抵消。</p><p>当用SA1 激活时，攻击等级是5HIT的EX波属性。</p><p><img src="/" alt="img"></p><p>#F式</p><p>F式是处于防御硬直时，站防切蹲防时，蹲姿时站姿受创判定的特殊状态。</p><p>大部分角色只能残血收割，少部分角色可以带入连段（JP）。</p><p>起身时蹲防的话，起身F式就不存在。</p><ul><li></li></ul><p>隆在街霸6里也有F式，隆的升JLP就是。</p><p>隆JHP打低点 &gt;升JP。</p><p>对面枯竭状态，隆JMK&gt;升JP（由于枯竭下的硬直差+4，因而可以成立）。</p><ul><li></li></ul><p>古烈 JHK&gt;升JLP</p><p>朱莉 JHK&gt;升JLK</p><p>朱莉（风水中）JHP高点下落时&gt;JHK</p><p>杰米 JHP&gt;升JLP</p><p>曼侬JHP &gt;升JLK</p><p>玛丽莎JHK &gt;升JLK</p><p>JP JHK&gt;升JLK</p><p>DJ JHP 升JLP</p><p>嘉米 JHK &gt;升JLK</p><p>本田 JHP &gt;升JLP</p><p>桑吉尔夫J2HP &gt;升JLK</p><p>金柏利 JHP&gt;升JLK</p><p>春丽 J2MK最低点&gt;JMK&#x2F;JHK</p><ul><li></li></ul><p>达尔西姆 升JLK自带打蹲姿。</p><ul><li></li></ul><p>肯，卢克，莉莉，布兰卡无。</p><p># 浮空</p><p>浮空表示对手进入一种可追击的状态，分为自由浮空和限定浮空。</p><p>自由浮空，可以用任何技追击，如果用2HK外的通常技追击，则目标会自动在空中受身落地。</p><p>限定浮空只能由与造成浮空的同等级或更高等级的技追击。</p><p>-</p><p>已知能造成自由浮空的技能：</p><p>绿冲通常技命中空中对手</p><p>绿冲通常技命中自由浮空</p><p>霸体DI对空造成的浮空</p><p>DI版边造成的贴墙*</p><p>DI破防造成的墙崩*</p><p>P康导致的腹崩倒地前的状态*</p><p>*表示一种特殊的自由浮空状态，普通技追击后能再造成一次可以追击TC和必杀技的浮空。</p><p>-</p><p>部分限定浮空技能：</p><p>滑地（如隆的236HK P康和隆的SA2蓄到最大）</p><p>-</p><p>立即倒地：空中必杀技、派生技、特殊技（金柏莉的J2MP、春丽的三角跳、达尔西姆的瞬移等），已经处于空中时被打康，会显示如下英文并进入限定浮空状态。</p><p>-</p><p>能命中限定浮空的常见技能：</p><p>2HK</p><p>街霸6的普通波也可以追击限定浮空，比如隆可以普通波对空，再普通波命中，版边隆可以EX波对空，再接普通波也能命中。</p><p>其他必杀技等。</p><p>-</p><p>注：这里仅简单介绍自由浮空和限定浮空。</p><p># 修正系统</p><p><img src="/" alt="img"></p><p>通常来说，修正对招式的定义是玩家输入的次数，而不是技能本身的Hit数。</p><p>例如隆的MP&gt;LK&gt;HK的TC算3招，214KK算1招。也有一些特例：隆的EX波，卢克的214P蓄等，算两招。</p><p>几种不同修正可以同时影响。</p><ul><li></li></ul><p>格挡</p><p>完美格挡后连段修正50% &gt;40% &gt;30%，以此类推。</p><ul><li></li></ul><p>SA</p><p>SA有保底伤害，SA1是30%，SA2是40%，SA3&#x2F;CA是50%。</p><p>必杀取消SA3&#x2F;CA，有额外10%修正。</p><p>特例：</p><p>隆升龙&gt;SA3&#x2F;CA:100%&gt;60%</p><p>肯升龙&gt;SA3&#x2F;CA:100%&gt;70%</p><ul><li></li></ul><p>绿冲</p><p>裸绿冲起手的连段是正常修正。</p><p>绿冲取消连段在原有基础上每一下额外修正15%（多次绿冲也是15%），即每一下伤害都再乘以85%。</p><ul><li></li></ul><p>DI</p><p>DI版边破防后每一下额外修正20%，即每一下伤害再乘以80%。</p><p>霸体DI、DI版边命中贴墙、DI致晕，DI本身会被计算为2HITS。</p><p>现代模式快捷必杀伤害是手搓的80%。</p><ul><li></li></ul><p>杰米</p><p>0酒:90%攻击力</p><p>1酒:95%攻击力</p><p>2酒:100%攻击力</p><p>3酒:105%攻击力</p><p>4酒:110%攻击力</p><p>杰米开了SA2，是4酒状态，但是攻击力是105%。</p><ul><li></li></ul><p>金柏莉</p><p>SA3&#x2F;CA后移动速度和攻击力均提升11%。</p><p>实际上金的伤害比一般人低，其他人2HP一般是800，她只有720。</p><ul><li></li></ul><p>其他每个角色单独的修正可以参考羊羊的帖子。</p><ul><li></li></ul><p>无根性系统：</p><p>在街霸5里，血量越低，伤害修正越大，连段造成的伤害越低，这就是根性系统(Guts)。</p><p>而街霸6，并没有根性系统，血量低时受的伤害和满血时一样。</p><p>这也是很多人会觉得伤害爆炸的重要原因。</p><p># 体力槽</p><p>桑吉尔夫体力是11000，玛丽莎、本田体力是10500，其他角色体力都是10000。</p><p>体力槽小于等于25%，体力槽会变成黄色。</p><p>此时SA3会自动变成CA，前面提过。</p><ul><li></li></ul><p># 白血</p><p>白血是霸体吸收攻击和被D反打中时产生的可以慢慢恢复的血条。</p><p>有白血的时候被攻击命中，白血会消失。</p><p>如果剩余体力不够，霸体吸收攻击时会直接死亡。</p><p>枯竭中，如果有白血，被磨血时，白血会暂停恢复一会，目测2S。</p><p>磨血不仅会磨掉剩余血量，也会磨掉白血。</p><ul><li></li></ul><p>#血量判断</p><p>血量判断是为了残血斩杀和枯竭下磨血斩杀。</p><p><img src="/" alt="img"></p><p>桑吉尔夫此时血量是5200，1格D槽对应的剩余血量约等于866。</p><p>本田、玛丽莎此时血量是4950，1格D槽对应的剩余血量约等于825。</p><p>其他角色此时血量是4700，1格D槽对应的剩余血量约等于784。 </p><p>桑吉尔夫的25%是2750。</p><p>本田、玛丽莎的25%是2625。</p><p>其他角色的25%是2500。</p><p>约等于3.2格左右。</p><ul><li></li></ul><p>中间有些空格没算，不用太在意，知道大约数就行。然后自己试试SA3能磨多少，其他必杀技能磨多少，磨血是固定的，之前说过，主要是一个视觉的记忆。</p><p>结合绿冲取消的联防压制，研究下把对方打进枯竭同时斩杀的套路。</p><p>这个就自行发挥了。</p><ul><li></li></ul><p>至于枯竭下：</p><p><img src="/" alt="img"></p><p>上面的右侧第二个回合标志的右侧斜边对应的血量大概是角色的10%血量，即1000-1100左右。</p><p>#帧数表</p><p>谷*歌商店搜</p><p>FAT Frame Data</p><p>苹果商店搜</p><p>Frame Assistant Tool</p><p><img src="/" alt="img"></p><p>图标是这个。 或者访问网页版FAT或Supercombo的WIki</p><p>fullmeter.com</p><p>FAT内有很多内置的分类功能， 查看每个角色的各个行动和技能的汇总比较等功能。</p><p>微信有个【街霸6助手】，提供了一些帧数数据，抄的FAT，不全，更新不快。</p><p>#综合设置</p><p>#线下1v1键盘</p><p>使用如果是键盘+摇杆&#x2F;手柄两个设备，默认两个设备都是1P。需要在设置-操作下面把【单独使用】键盘启用。</p><p>不过，如果你主用的是摇杆，那么打完要改回去，不然键盘一直是1P，摇杆是2P。</p><ul><li></li></ul><p># 声音特效</p><p>可以设定D系统的动作音效设置为最大音量，来更好地确认DI等行动。设置演示：</p><p>图示的不一定是最好的设定。</p><ul><li></li></ul><p>#输入延迟</p><p>减轻【图像】-【输入延迟减轻】-开启。建议有条件的开启，线下之前没开会慢动作，开了就好了。</p><ul><li></li></ul><p>#录像回放</p><p>【CFN】-精彩回放-筛选自己</p><p><strong>练习场！</strong></p><p>#重置键</p><p>重置位置，假设是R键，默认操控1P在中央左侧位置。</p><p>单独按R，回到上一次设置的位置。</p><p>R+2，回版中默认初始游戏位置，同时会把【对战环境】中的位置重置。</p><p>R+4&#x2F;7，左版边，1P贴版。</p><p>R+1，左版边，2P贴版。</p><p>R+6&#x2F;9，右版边，2P贴版。</p><p>R+3，右版边，1P贴板。</p><p>R+8，中央，换位，1P在右侧。</p><p>【对战环境】中也可以更改位置。</p><p>#Function键</p><p>如果你是经典模式+2个快捷键（即8个键，一般正常摇杆的配置），最右侧两个键设置了格挡和迸放，就没多余的快捷键设置录制和回放了。</p><p>解决办法：</p><p>1.设置Function按键+按键&#x2F;方向形成N个不冲突的快捷键；</p><p>2.PC可以用键盘的某些键作为快捷键。</p><p>#设置Function键</p><p>进入【基本设置】-【快捷方式设置】</p><p>先设置Function键，可以设置摇杆上面的功能键，以下用”F”来表述。</p><p>#录制瞬间状态</p><p>设置F+8为状态保存，F+2为播放保存。</p><p>瞬间有很多用途，测试某些招式的性能或某些特殊情况的连段，比如霸体DI对空后的连段就需要专门练习。</p><p>设置电脑跳跃和确反康。</p><p>用DI命中空中确反康，然后有人说这个快捷键手忙脚乱不好按啊，怎么办？</p><p>没事，有解决办法，这时候按一下菜单键(这总没难度吧)，导航到【对战环境】-【游戏速度设置】，改到【暂停】。</p><p>回游戏，这时候画面是暂停的。安安心心点根烟，按一下F+8（先按住F，再按8，下同）。</p><p>看到右下角提示状态已保存，则搞定。</p><p>把游戏速度改成正常。</p><p>然后用F+2回放测试即可。</p><p>包括枯竭下的一些东西，也是用状态保存测试更方便。</p><p>其他快捷键按需设置即可，比如录制回放也可以用F+其他键代替。</p><p>#录制回放动作</p><p>#录制</p><p>默认录制到栏位1。</p><p>按一下录制键，进入录制准备状态，即可操控电脑，走到合适的位置，再按一下，即进入录制状态。</p><p>录制完毕按下录制&#x2F;回放&#x2F;重置都可以保存到栏位1。</p><p>#回放</p><p>按下回放键即可。</p><p>如需自动循环回放可以在【动态记录】-【播放】下面设置。</p><p>#录制技巧</p><p>#1.如果需要固定位置出招，可以先录制电脑连续66贴身后，再回退到适当的距离出招或者做一个标识动作再出招，比如先跳一下或挥空一下再出招。</p><p>#2.循环回放时可能需要把技能演出时间算进去，不然演出结束它可能直接是中途的指令开始了，这时候可以用一些动作去填满时间，类似上面的做一些连续66或者之类的标识动作即可，或者就用快捷键回放。</p><p>#3.录制一些技能的对应时候，最好录制完的时候拉住1，这样来最速防御，用自带的全防御，有时不太好用。视情况用反击+全防御也可以。</p><p>#4.有时候最好反向测试一些东西，比如测F式的时候，反过来测才发现蹲防不吃F式。</p><p>在【动态记录】中，可以选择其他栏位再录制多个，再利用回放功能同时回放多个。按46切换菜单的录制回放界面。</p><p>开启多个后可以设置随机概率（数字越大回放几率越高），不设置就几率相等，随机回放。</p><p>#反击设置</p><p>这次的【反击设置】终于正常了，其他格斗游戏早这么做了。</p><p>除了可以直接设置防御、受创、起身后直接各种招式或行动外，还可以将录制的内容直接插入前面三种方式后面。</p><p>下面是设置反击的延迟时间和打击次数（翻译错误），比如设置2下，5LP点一下不会反击，5LP-5LP后对面才会反击，以此类推。</p><p>#用录制内容反击</p><p>点进栏位1，找到【动态记录】，即可看到录制过的内容（栏位），选择即可。</p><p>下面显示帧数的就是反击录制内容了。</p><p>#帧数模式解析</p><p>【界面显示】中开启，帧数表内置，没有比这更好更创新的模式了，但没有标注投无敌，略有遗憾。</p><p>帧数&#x2F;F：Frame,格斗游戏中的时间单位，通常会在攻略或帧数表表示中出现的词语，意思是1F&#x3D;1&#x2F;60S。格斗游戏都锁60F。</p><p>发生、持续、收招的概念</p><p>从准备动作到攻击判定开始的时间称为攻击技能的发生时间。</p><p>攻击判定从开始到结束经过的时间称为攻击技能的持续时间。</p><p>从攻击判定结束到角色可自由操作的时间称为收招时间。</p><p>发生最后1F和持续第1F重叠。</p><p>打击停顿：HitStop，打击技击中&#x2F;命中时，攻守双方产生对等硬直的时间。飞道Hitstop只存在于防御方身上。</p><p>隆的5MP挥空：</p>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2024/sf6/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>游戏创作之路</title>
      <link>http://example.com/2023/you-xi-chuang-zuo-de-kai-duan/</link>
      <guid>http://example.com/2023/you-xi-chuang-zuo-de-kai-duan/</guid>
      <pubDate>Sat, 30 Sep 2023 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</description>
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Game/">Game</category>
      
      
      <category domain="http://example.com/tags/Game/">Game</category>
      
      <category domain="http://example.com/tags/%E5%9B%A0%E7%8B%84%E6%96%AF%E7%9A%84%E8%B0%8E%E8%A8%80/">因狄斯的谎言</category>
      
      
      <comments>http://example.com/2023/you-xi-chuang-zuo-de-kai-duan/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>可乐鸡翅</title>
      <link>http://example.com/2023/ke-le-ji-chi/</link>
      <guid>http://example.com/2023/ke-le-ji-chi/</guid>
      <pubDate>Sat, 20 May 2023 16:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;strong&gt;材料：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;鸡翅10只&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可乐330毫升（一罐）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;生姜3片&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;大葱1根&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;生抽、老抽各适量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;白糖两勺&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;料酒适量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;食盐适量&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>材料：</strong></p><ol><li><p>鸡翅10只</p></li><li><p>可乐330毫升（一罐）</p></li><li><p>生姜3片</p></li><li><p>大葱1根</p></li><li><p>生抽、老抽各适量</p></li><li><p>白糖两勺</p></li><li><p>料酒适量</p></li><li><p>食盐适量</p><span id="more"></span></li></ol><p><strong>步骤：</strong></p><ol><li><p>首先，清洗鸡翅并用刀在表面划几刀，以便入味。</p></li><li><p>生姜切片，大葱切段备用。</p></li><li><p>在锅中加入适量的油，热锅冷油可以防止鸡翅皮粘锅。(ps记得把鸡翅水吸干），加入生姜片炒香。</p><img src="https://fmphoto.oss-cn-chengdu.aliyuncs.com/Photo/%E5%8F%AF%E4%B9%90%E9%B8%A1%E7%BF%8501.jpg" style="zoom:50%;" /></li><li><p>接着，把鸡翅放入锅中两面煎炒（ps把生姜片夹出），煎至两面微黄色。</p></li><li><p>加入两勺糖继续炒，炒至糖溶化并裹在鸡翅上，鸡翅色泽变深。</p></li><li><p>倒入适量的料酒，用中小火慢慢翻煎，让鸡翅充分吸收料酒的香味。</p></li><li><p>加入适量的生抽和老抽翻煎均匀，使鸡翅充分上色。</p></li><li><p>倒入一罐可乐（大约330ml），加入葱段，用中小火烧煮15-20分钟。</p><p><img src="https://fmphoto.oss-cn-chengdu.aliyuncs.com/Photo/%E5%8F%AF%E4%B9%90%E9%B8%A1%E7%BF%8502.jpg"></p></li><li><p>最后，撇去浮沫，调入适量的盐炖煮至汤汁变粘稠即可。</p></li></ol>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%8E%A8%E6%88%BF/">厨房</category>
      
      
      <category domain="http://example.com/tags/%E4%B8%8B%E5%8E%A8%E6%88%BF/">下厨房</category>
      
      
      <comments>http://example.com/2023/ke-le-ji-chi/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>selenium4.0更新</title>
      <link>http://example.com/2023/selenium/</link>
      <guid>http://example.com/2023/selenium/</guid>
      <pubDate>Wed, 22 Mar 2023 16:00:00 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;selenium4-0&quot;&gt;&lt;a href=&quot;#selenium4-0&quot; class=&quot;headerlink&quot; title=&quot;selenium4.0&quot;&gt;&lt;/a&gt;selenium4.0&lt;/h1&gt;&lt;p&gt;Selenium 4 已经到来，将至少需要 &lt;strong&gt;Python 3.7 或更高版本。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面介绍一下基础的语法格式&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="selenium4-0"><a href="#selenium4-0" class="headerlink" title="selenium4.0"></a>selenium4.0</h1><p>Selenium 4 已经到来，将至少需要 <strong>Python 3.7 或更高版本。</strong></p><p>下面介绍一下基础的语法格式</p><span id="more"></span><h2 id="1、初始化浏览器、刷新、最大化、后退、前进、截图"><a href="#1、初始化浏览器、刷新、最大化、后退、前进、截图" class="headerlink" title="1、初始化浏览器、刷新、最大化、后退、前进、截图"></a>1、初始化浏览器、刷新、最大化、后退、前进、截图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"><span class="comment">#初始化浏览器为谷歌浏览器</span></span><br><span class="line"><span class="built_in">chr</span>=webdriver.Chrome()</span><br><span class="line"><span class="comment"># 无界面的浏览器</span></span><br><span class="line"><span class="comment"># option = webdriver.ChromeOptions()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># option.add_argument(&quot;headless&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># chr = webdriver.Chrome(options=option)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#浏览器最大化</span></span><br><span class="line"><span class="built_in">chr</span>.maximize_window()</span><br><span class="line"></span><br><span class="line"><span class="built_in">chr</span>.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># chr.get(&quot;https://www.jd.com/&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#后退</span></span><br><span class="line"><span class="built_in">chr</span>.back()</span><br><span class="line"><span class="comment">#暂停2s</span></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#前进</span></span><br><span class="line"><span class="built_in">chr</span>.forward()</span><br><span class="line"><span class="comment">#刷新</span></span><br><span class="line"><span class="built_in">chr</span>.refresh()</span><br><span class="line"><span class="comment">#截图</span></span><br><span class="line"><span class="built_in">chr</span>.get_screenshot_as_file(<span class="string">&#x27;截图.png&#x27;</span>)</span><br><span class="line"><span class="comment">#点击</span></span><br><span class="line"><span class="built_in">chr</span>.find_element(By.ID,<span class="string">&#x27;kw&#x27;</span>).click()</span><br><span class="line"><span class="comment">#输入</span></span><br><span class="line"><span class="built_in">chr</span>.find_element(By.ID,<span class="string">&#x27;kw&#x27;</span>).send_keys(<span class="string">&quot;saa&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#清除输入框内容</span></span><br><span class="line"><span class="built_in">chr</span>.find_element(By.ID,<span class="string">&#x27;kw&#x27;</span>).clear()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#关闭浏览器</span></span><br><span class="line"><span class="built_in">chr</span>.close()</span><br></pre></td></tr></table></figure><h2 id="2、单个元素定位的方法"><a href="#2、单个元素定位的方法" class="headerlink" title="2、单个元素定位的方法"></a>2、单个元素定位的方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">selenium4使用的时候需要导入模块    <span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line">find_element(By.XPATH, <span class="string">&quot;//*[@id=&#x27;search&#x27;]&quot;</span>)</span><br><span class="line"></span><br><span class="line">find_element(By.CLASS_NAME, <span class="string">&quot;element_class_name&quot;</span>)</span><br><span class="line"></span><br><span class="line">find_element(By.ID,<span class="string">&quot;element_id&quot;</span>)</span><br><span class="line"></span><br><span class="line">find_element(By.NAME, <span class="string">&quot;element_name&quot;</span>)</span><br><span class="line"></span><br><span class="line">find_element(By.LINK_TEXT,<span class="string">&quot;element_link_text&quot;</span>)</span><br><span class="line"></span><br><span class="line">find_element(By.CSS_SELECTOR, <span class="string">&quot;element_css_selector&quot;</span>)</span><br><span class="line"></span><br><span class="line">find_element(By.TAG_NAME, <span class="string">&quot;element_tag_name&quot;</span>)</span><br><span class="line"></span><br><span class="line">find_element(By.PARTIAL_LINK_TEXT, <span class="string">&quot;element_partial_link_text&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="3、多个元素定位的方法"><a href="#3、多个元素定位的方法" class="headerlink" title="3、多个元素定位的方法"></a>3、多个元素定位的方法</h2><p>与单个元素的定位方式类似，把find_element改成find_elements即可</p><h2 id="4、定位select类型的下拉框"><a href="#4、定位select类型的下拉框" class="headerlink" title="4、定位select类型的下拉框"></a>4、定位select类型的下拉框</h2><p>4、定位select类型的下拉框</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select_by_index()           <span class="comment"># 通过索引定位；注意：&gt;index索引是从“0”开始。</span></span><br><span class="line">select_by_value()           <span class="comment"># 通过value值定位，va&gt;lue标签的属性值。</span></span><br><span class="line">select_by_visible_text()    <span class="comment"># 通过文本值定位，即显&gt;示在下拉框的值。</span></span><br><span class="line">Select(<span class="built_in">chr</span>.find_element_by_name(<span class="string">&quot;姓名&quot;</span>)).select_by_index(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>或者分开写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="built_in">chr</span>.find_element_by_name(<span class="string">&quot;姓名&quot;</span>)</span><br><span class="line"></span><br><span class="line">Select(a).select_by_index(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="5、多窗口切换"><a href="#5、多窗口切换" class="headerlink" title="5、多窗口切换"></a>5、多窗口切换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">current_window_handle：获取当前窗口的句柄</span><br><span class="line"></span><br><span class="line">window_handles：返回当前浏览器的所有窗口的句柄</span><br><span class="line"></span><br><span class="line">switch_to_window()：用于切换到对应的窗口</span><br><span class="line"></span><br><span class="line"><span class="built_in">chr</span>.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line">a=<span class="built_in">chr</span>.current_window_handle</span><br><span class="line"><span class="built_in">chr</span>.execute_script(<span class="string">&#x27;window.open()&#x27;</span>)</span><br><span class="line"><span class="built_in">chr</span>.switch_to.window(<span class="built_in">chr</span>.window_handles[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">chr</span>.get(<span class="string">&quot;https://www.jd.com/&quot;</span>)</span><br><span class="line"><span class="comment"># chr.switch_to.window(chr.window_handles[0])</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">chr</span>.switch_to.window(a)</span><br></pre></td></tr></table></figure><h2 id="6、iframe切换"><a href="#6、iframe切换" class="headerlink" title="6、iframe切换"></a>6、iframe切换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.switch_to.frame(driver.find_element_by_xpath(<span class="string">&quot;//iframe[contains(@src,&#x27;myframe&#x27;)]&quot;</span>))</span><br></pre></td></tr></table></figure><p>#回到默认的iframe</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.switch_to.default_content()</span><br></pre></td></tr></table></figure><h2 id="7、键盘操作"><a href="#7、键盘操作" class="headerlink" title="7、键盘操作"></a>7、键盘操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">send_keys(Keys.BACK_SPACE)：删除键(BackSpace)</span><br><span class="line"></span><br><span class="line">send_keys(Keys.SPACE)：空格键(Space)</span><br><span class="line"></span><br><span class="line">send_keys(Keys.TAB)：制表键(TAB)</span><br><span class="line"></span><br><span class="line">send_keys(Keys.ESCAPE)：回退键(ESCAPE)</span><br><span class="line"></span><br><span class="line">send_keys(Keys.ENTER)：回车键(ENTER)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%B5%8B%E8%AF%95/">测试</category>
      
      
      <category domain="http://example.com/tags/%E6%B5%8B%E8%AF%95/">测试</category>
      
      <category domain="http://example.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/">自动化测试</category>
      
      
      <comments>http://example.com/2023/selenium/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>美团笔试3.18后端</title>
      <link>http://example.com/2023/mei-tuan-bi-shi/</link>
      <guid>http://example.com/2023/mei-tuan-bi-shi/</guid>
      <pubDate>Wed, 22 Mar 2023 16:00:00 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;1-捕获敌人&quot;&gt;&lt;a href=&quot;#1-捕获敌人&quot; class=&quot;headerlink&quot; title=&quot;1. 捕获敌人&quot;&gt;&lt;/a&gt;1. 捕获敌人&lt;/h2&gt;&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;小美在玩一项游戏。该游戏的目标是尽可能抓获敌人。&lt;/p&gt;
&lt;p&gt;敌人的位置将被一个二维坐标(&lt;em&gt;x&lt;/em&gt;,&lt;em&gt;y&lt;/em&gt;) 所描述。&lt;/p&gt;
&lt;p&gt;小美有一个全屏技能，该技能能一次性将若干敌人一次性捕获。捕获的敌人之间的横坐标的最大差值不能大于 &lt;em&gt;A&lt;/em&gt;，纵坐标的最大差值不能大于 &lt;em&gt;B&lt;/em&gt; 。&lt;/p&gt;
&lt;p&gt;现在给出所有敌人的坐标，你的任务是计算小美一次性最多能使用技能捕获多少敌人。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1-捕获敌人"><a href="#1-捕获敌人" class="headerlink" title="1. 捕获敌人"></a>1. 捕获敌人</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>小美在玩一项游戏。该游戏的目标是尽可能抓获敌人。</p><p>敌人的位置将被一个二维坐标(<em>x</em>,<em>y</em>) 所描述。</p><p>小美有一个全屏技能，该技能能一次性将若干敌人一次性捕获。捕获的敌人之间的横坐标的最大差值不能大于 <em>A</em>，纵坐标的最大差值不能大于 <em>B</em> 。</p><p>现在给出所有敌人的坐标，你的任务是计算小美一次性最多能使用技能捕获多少敌人。</p><span id="more"></span><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h3><p>第一行三个整数 N*,<em>A</em>,<em>B</em>，表示共有 N* 个敌人，小美的全屏技能的参数 <em>A</em> 和参数 <em>B</em>。</p><p>接下来 <em>N</em> 行，每行两个数字 <em>x</em>,<em>y</em>，描述一个敌人所在的坐标。</p><p>1⩽N⩽500,1⩽A,B⩽1000,1⩽x,y⩽1000</p><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h3><p>一行，一个整数表示小美使用技能单次所可以捕获的最多数量。</p><h3 id="样例1"><a href="#样例1" class="headerlink" title="样例1"></a>样例1</h3><p><strong>输入</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 1 1</span><br><span class="line">1 1</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><p>说明：最多可以同时捕获两名敌人，可以是 (1,1)(1,1) 和 (1,2)(1,2) 处的敌人，也可以是 (1,2)(1,2) 和 (1,3)(1,3) 处的敌人，但不可以同时捕获三名敌人，因为三名敌人时，纵坐标的最大差值是 22，超过了参数 B* 的值 11。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>二维前缀和：就是在一个大矩形中有若干个点，给我们一个小矩阵，看它最多能框住多少个点。</p><p>所以我们先读入敌人坐标，将有敌人的坐标初始化为 1。</p><p>然后用二维前缀和预处理，再枚举每一个范围内 (<em>A</em>,<em>B</em>) 的子矩阵，取一个 <strong>max</strong>即可。</p><p>时间复杂度 <em>O</em>(<em>N</em>2)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[][] g = <span class="keyword">new</span> <span class="title class_">int</span>[N + <span class="number">10</span>][N + <span class="number">10</span>];</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt(), a = sc.nextInt(), b = sc.nextInt();</span><br><span class="line">        a++; b++; <span class="comment">// 最大间隔++，前缀和下标从1开始处理，防止边界问题</span></span><br><span class="line">        <span class="comment">// 与N取min</span></span><br><span class="line">        a = Math.min(a, N);</span><br><span class="line">        b = Math.min(b, N);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> sc.nextInt(), y = sc.nextInt();</span><br><span class="line">            g[x][y]++; <span class="comment">// 读入敌人坐标</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= N; j++) &#123;</span><br><span class="line">                g[i][j] += g[i - <span class="number">1</span>][j] + g[i][j - <span class="number">1</span>] - g[i - <span class="number">1</span>][j - <span class="number">1</span>]; <span class="comment">// 二维前缀和预处理 公式一</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 枚举一下所有长宽是ab的矩形，(i,j)为右下角，取max</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> a; i &lt;= N; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> b; j &lt;= N; j++) &#123;</span><br><span class="line">                res = Math.max(res, g[i][j] - g[i - a][j] - g[i][j - b] + g[i - a][j - b]); <span class="comment">// 求某一个子矩阵的值 公式二</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-截彩带"><a href="#2-截彩带" class="headerlink" title="2. 截彩带"></a>2. 截彩带</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>小美现在有一串彩带，假定每一厘米的彩带上都是一种色彩。</p><p>因为任务的需要，小美希望从彩带上截取一段，使得彩带中的颜色数量不超过 <em>K</em> 种。</p><p>显然，这样的截取方法可能非常多。于是小美决定尽量长地截取一段。你的任务是帮助小美截取尽量长的一段，使得这段彩带上不同的色彩数量不超过 <em>K</em> 种。</p><h3 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述"></a>输入描述</h3><p>第一行两个整数 N*,<em>K</em>，以空格分开，分别表示彩带有 N* 厘米长，你截取的一段连续的彩带不能超过 K* 种颜色。接下来一行 N* 个整数，每个整数表示一种色彩，相同的整数表示相同的色彩。</p><p>1≤<em>N</em>,<em>K</em>≤5000，彩带上的颜色数字介于 [1,2000][1,2000] 之间。</p><h3 id="输出描述-1"><a href="#输出描述-1" class="headerlink" title="输出描述"></a>输出描述</h3><p>一行，一个整数，表示选取的彩带的最大长度。</p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><p><strong>输入</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8 3</span><br><span class="line">1 2 3 2 1 4 5 1</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><p>说明：最长的一段彩带是 [1,2,3,2,1][1,2,3,2,1] 共 55 厘米。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>求连续子数组最大和，但此题还要求区间的种类数不能超过 K* 种，所以在<code>双指针</code>的基础上我们还需要用 <strong><code>哈希</code></strong> 来维护区间的种类数。</p><p><strong>暴力解法</strong></p><p>直接两重循环，用 <code>set</code> 维护区间种类数。</p><p>时间复杂度 O*(<em>N</em>2)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt(), k = sc.nextInt();</span><br><span class="line">        <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) a[i] = sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt; n; j++) &#123;</span><br><span class="line">                set.add(a[j]);</span><br><span class="line">                <span class="keyword">if</span> (set.size() &gt; k) <span class="keyword">break</span>;</span><br><span class="line">                res = Math.max(res, j - i + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>双指针 + map</strong></p><p>时间复杂度 O*(<em>N</em>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">5010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] cnt = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> num;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt(), k = sc.nextInt();</span><br><span class="line">        <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            a[i] = sc.nextInt();</span><br><span class="line">            add(a[i]);</span><br><span class="line">            <span class="keyword">while</span> (num &gt; k) &#123;</span><br><span class="line">                sub(a[j]);</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            res = Math.max(res, i - j + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (++cnt[x] == <span class="number">1</span>) num++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (--cnt[x] == <span class="number">0</span>) num--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E7%AC%94%E8%AF%95%E8%AE%B0%E5%BD%95/">笔试记录</category>
      
      
      <category domain="http://example.com/tags/%E7%AC%94%E8%AF%95/">笔试</category>
      
      
      <comments>http://example.com/2023/mei-tuan-bi-shi/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>MYSQL篇</title>
      <link>http://example.com/2023/java-ba-gu-mysql/</link>
      <guid>http://example.com/2023/java-ba-gu-mysql/</guid>
      <pubDate>Mon, 20 Mar 2023 16:00:00 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;MySQL-的事务隔离级别有哪些？分别用于解决什么问题？&quot;&gt;&lt;a href=&quot;#MySQL-的事务隔离级别有哪些？分别用于解决什么问题？&quot; class=&quot;headerlink&quot; title=&quot;MySQL 的事务隔离级别有哪些？分别用于解决什么问题？&quot;&gt;&lt;/a&gt;MySQL 的事务隔离级别有哪些？分别用于解决什么问题？&lt;/h1&gt;&lt;p&gt;主要用于解决脏读、不可重复读、幻读。&lt;/p&gt;
&lt;p&gt;脏读：一个事务读取到另一个事务还未提交的数据。&lt;/p&gt;
&lt;p&gt;不可重复读：在一个事务中多次读取同一个数据时，结果出现不一致。&lt;/p&gt;
&lt;p&gt;幻读：在一个事务中使用相同的 SQL 两次读取，第二次读取到了其他事务新插入的行。&lt;/p&gt;
&lt;p&gt;不可重复读注重于数据的修改，而幻读注重于数据的插入。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="MySQL-的事务隔离级别有哪些？分别用于解决什么问题？"><a href="#MySQL-的事务隔离级别有哪些？分别用于解决什么问题？" class="headerlink" title="MySQL 的事务隔离级别有哪些？分别用于解决什么问题？"></a>MySQL 的事务隔离级别有哪些？分别用于解决什么问题？</h1><p>主要用于解决脏读、不可重复读、幻读。</p><p>脏读：一个事务读取到另一个事务还未提交的数据。</p><p>不可重复读：在一个事务中多次读取同一个数据时，结果出现不一致。</p><p>幻读：在一个事务中使用相同的 SQL 两次读取，第二次读取到了其他事务新插入的行。</p><p>不可重复读注重于数据的修改，而幻读注重于数据的插入。</p><span id="more"></span><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>读未提交（Read Uncommitted）</td><td>有</td><td>有</td><td>有</td></tr><tr><td>读已提交（Read Committed）</td><td>无</td><td>有</td><td>有</td></tr><tr><td>可重复读（Repeatable Read）</td><td>无</td><td>无</td><td>有</td></tr><tr><td>串行化（Serializable）</td><td>无</td><td>无</td><td>无</td></tr></tbody></table><h1 id="MySQL-的可重复读怎么实现的？"><a href="#MySQL-的可重复读怎么实现的？" class="headerlink" title="MySQL 的可重复读怎么实现的？"></a>MySQL 的可重复读怎么实现的？</h1><p>使用 MVCC 实现的，即 Mutil-Version Concurrency Control，多版本并发控制。关于 MVCC，比较常见的说法如下，包括《高性能 MySQL》也是这么介绍的。</p><p>InnoDB 在每行记录后面保存两个隐藏的列，分别保存了数据行的创建版本号和删除版本号。每开始一个新的事务，系统版本号都会递增。事务开始时刻的版本号会作为事务的版本号，用来和查询到的每行记录的版本号对比。在可重复读级别下，MVCC是如何操作的：</p><p>SELECT：必须同时满足以下两个条件，才能查询到。1）只查版本号早于当前版本的数据行；2）行的删除版本要么未定义，要么大于当前事务版本号。</p><p>INSERT：为插入的每一行保存当前系统版本号作为创建版本号。</p><p>DELETE：为删除的每一行保存当前系统版本号作为删除版本号。</p><p>UPDATE：插入一条新数据，保存当前系统版本号作为创建版本号。同时保存当前系统版本号作为原来的数据行删除版本号。</p><p>MVCC 只作用于 RC（Read Committed）和 RR（Repeatable Read）级别，因为 RU（Read Uncommitted）总是读取最新的数据版本，而不是符合当前事务版本的数据行。而 Serializable 则会对所有读取的行都加锁。这两种级别都不需要 MVCC 的帮助。</p><h1 id="什么是索引？"><a href="#什么是索引？" class="headerlink" title="什么是索引？"></a>什么是索引？</h1><p>MySQL 官方对索引的定义为：索引（Index）是帮助 MySQL 高效获取数据的数据结构。简单的理解，索引类似于字典里面的目录。</p><p>常见的索引类型有：hash、b树、b+树。</p><p>hash：底层就是 hash 表。进行查找时，根据 key 调用hash 函数获得对应的 hashcode，根据 hashcode 找到对应的数据行地址，根据地址拿到对应的数据。</p><p>B树：B树是一种多路搜索树，n 路搜索树代表每个节点最多有 n 个子节点。每个节点存储 key + 指向下一层节点的指针+ 指向 key 数据记录的地址。查找时，从根结点向下进行查找，直到找到对应的key。</p><p>B+树：B+树是b树的变种，主要区别在于：B+树的非叶子节点只存储 key + 指向下一层节点的指针。另外，B+树的叶子节点之间通过指针来连接，构成一个有序链表，因此对整棵树的遍历只需要一次线性遍历叶子结点即可。</p><h1 id="为什么MySQL数据库要用B-树存储索引？而不用红黑树、Hash、B树？"><a href="#为什么MySQL数据库要用B-树存储索引？而不用红黑树、Hash、B树？" class="headerlink" title="为什么MySQL数据库要用B+树存储索引？而不用红黑树、Hash、B树？"></a>为什么MySQL数据库要用B+树存储索引？而不用红黑树、Hash、B树？</h1><p>红黑树：如果在内存中，红黑树的查找效率比B树更高，但是涉及到磁盘操作，B树就更优了。因为红黑树是二叉树，数据量大时树的层数很高，从树的根结点向下寻找的过程，每读1个节点，都相当于一次IO操作，因此红黑树的I&#x2F;O操作会比B树多的多。</p><p>hash 索引：如果只查询单个值的话，hash 索引的效率非常高。但是 hash 索引有几个问题：</p><ol><li>不支持范围查询；</li><li>不支持索引值的排序操作；</li><li>不支持联合索引的最左匹配规则。</li></ol><p>B树索引：B树索相比于B+树，在进行范围查询时，需要做局部的中序遍历，可能要跨层访问，跨层访问代表着要进行额外的磁盘I&#x2F;O操作；另外，B树的非叶子节点存放了数据记录的地址，会导致存放的节点更少，树的层数变高。</p><h1 id="MySQL-中的索引叶子节点存放的是什么？"><a href="#MySQL-中的索引叶子节点存放的是什么？" class="headerlink" title="MySQL 中的索引叶子节点存放的是什么？"></a>MySQL 中的索引叶子节点存放的是什么？</h1><p>MyISAM和InnoDB都是采用的B+树作为索引结构，但是叶子节点的存储上有些不同。</p><p>MyISAM：主键索引和辅助索引（普通索引）的叶子节点都是存放 key 和 key 对应数据行的地址。在MyISAM 中，主键索引和辅助索引没有任何区别。</p><p>InnoDB：主键索引存放的是 key 和 key 对应的数据行。辅助索引存放的是 key 和 key 对应的主键值。因此在使用辅助索引时，通常需要检索两次索引，首先检索辅助索引获得主键值，然后用主键值到主键索引中检索获得记录。</p><h1 id="什么是聚簇索引（聚集索引）？"><a href="#什么是聚簇索引（聚集索引）？" class="headerlink" title="什么是聚簇索引（聚集索引）？"></a>什么是聚簇索引（聚集索引）？</h1><p>聚簇索引并不是一种单独的索引类型，而是一种数据存储方式。聚簇索引将索引和数据行放到了一块，找到索引也就找到了数据。因为无需进行回表操作，所以效率很高。</p><p>InnoDB 中必然会有，且只会有一个聚簇索引。通常是主键，如果没有主键，则优先选择非空的唯一索引，如果唯一索引也没有，则会创建一个隐藏的row_id 作为聚簇索引。至于为啥会只有一个聚簇索引，其实很简单，因为我们的数据只会存储一份。</p><p>而非聚簇索引则将数据存储和索引分开，找到索引后，需要通过对应的地址找到对应的数据行。MyISAM 的索引方式就是非聚簇索引。</p><h1 id="什么是回表查询？"><a href="#什么是回表查询？" class="headerlink" title="什么是回表查询？"></a>什么是回表查询？</h1><p>InnoDB 中，对于主键索引，只需要走一遍主键索引的查询就能在叶子节点拿到数据。</p><p>而对于普通索引，叶子节点存储的是 key + 主键值，因此需要再走一次主键索引，通过主键索引找到行记录，这就是所谓的回表查询，先定位主键值，再定位行记录。</p><h1 id="走普通索引，一定会出现回表查询吗？"><a href="#走普通索引，一定会出现回表查询吗？" class="headerlink" title="走普通索引，一定会出现回表查询吗？"></a>走普通索引，一定会出现回表查询吗？</h1><p>不一定，如果查询语句所要求的字段全部命中了索引，那么就不必再进行回表查询。</p><p>很容易理解，有一个 user 表，主键为 id，name 为普通索引，则再执行：select id, name from user where name &#x3D; ‘joonwhee’ 时，通过name 的索引就能拿到 id 和 name了，因此无需再回表去查数据行了。</p><h1 id="什么是覆盖索引（索引覆盖）吗？"><a href="#什么是覆盖索引（索引覆盖）吗？" class="headerlink" title="什么是覆盖索引（索引覆盖）吗？"></a>什么是覆盖索引（索引覆盖）吗？</h1><p>覆盖索引是 SQL-Server 中的一种说法，上面讲的例子其实就实现了覆盖索引。具体的：当索引上包含了查询语句中的所有列时，我们无需进行回表查询就能拿到所有的请求数据，因此速度会很快。</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E7%AC%94%E8%AE%B0/">笔记</category>
      
      <category domain="http://example.com/categories/%E7%AC%94%E8%AE%B0/%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1/">面试八股</category>
      
      
      <category domain="http://example.com/tags/Java/">Java</category>
      
      
      <comments>http://example.com/2023/java-ba-gu-mysql/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>线程池篇</title>
      <link>http://example.com/2023/java-ba-gu-xian-cheng-chi/</link>
      <guid>http://example.com/2023/java-ba-gu-xian-cheng-chi/</guid>
      <pubDate>Mon, 20 Mar 2023 16:00:00 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;为什么要使用线程池？直接new个线程不是很舒服？&quot;&gt;&lt;a href=&quot;#为什么要使用线程池？直接new个线程不是很舒服？&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用线程池？直接new个线程不是很舒服？&quot;&gt;&lt;/a&gt;为什么要使用线程池？直接new个线程不是很舒服？&lt;/h1&gt;&lt;p&gt;使用线程池可以带来以下几个好处：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;降低资源消耗。通过重复利用已创建的线程，降低线程创建和销毁造成的消耗。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;增加线程的可管理型。线程是稀缺资源，使用线程池可以进行统一分配，调优和监控。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="为什么要使用线程池？直接new个线程不是很舒服？"><a href="#为什么要使用线程池？直接new个线程不是很舒服？" class="headerlink" title="为什么要使用线程池？直接new个线程不是很舒服？"></a>为什么要使用线程池？直接new个线程不是很舒服？</h1><p>使用线程池可以带来以下几个好处：</p><ol><li><p>降低资源消耗。通过重复利用已创建的线程，降低线程创建和销毁造成的消耗。</p></li><li><p>提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行。</p></li><li><p>增加线程的可管理型。线程是稀缺资源，使用线程池可以进行统一分配，调优和监控。</p><span id="more"></span></li></ol><h1 id="线程池的核心属性有哪些？"><a href="#线程池的核心属性有哪些？" class="headerlink" title="线程池的核心属性有哪些？"></a>线程池的核心属性有哪些？</h1><p>threadFactory（线程工厂）：用于创建工作线程的工厂。</p><p>corePoolSize（核心线程数）：当线程池运行的线程少于 corePoolSize 时，将创建一个新线程来处理请求，即使其他工作线程处于空闲状态。</p><p>workQueue（队列）：用于保留任务并移交给工作线程的阻塞队列。</p><p>maximumPoolSize（最大线程数）：线程池允许开启的最大线程数。</p><p>handler（拒绝策略）：往线程池添加任务时，将在下面两种情况触发拒绝策略：1）线程池运行状态不是 RUNNING；2）线程池已经达到最大线程数，并且阻塞队列已满时。</p><p>keepAliveTime（保持存活时间）：如果线程池当前线程数超过 corePoolSize，则多余的线程空闲时间超过 keepAliveTime 时会被终止。</p><h1 id="线程池中的各个状态分别代表什么含义？"><a href="#线程池中的各个状态分别代表什么含义？" class="headerlink" title="线程池中的各个状态分别代表什么含义？"></a>线程池中的各个状态分别代表什么含义？</h1><p>线程池目前有5个状态：</p><p>RUNNING：接受新任务并处理排队的任务。</p><p>SHUTDOWN：不接受新任务，但处理排队的任务。</p><p>STOP：不接受新任务，不处理排队的任务，并中断正在进行的任务。</p><p>TIDYING：所有任务都已终止，workerCount 为零，线程转换到 TIDYING 状态将运行 terminated() 钩子方法。</p><p>TERMINATED：terminated() 已完成。</p><p><img src="https://fmphoto.oss-cn-chengdu.aliyuncs.com/Photo/aHR0cHM6Ly9tbWJpei5xcGljLmNuL3N6X21tYml6X3BuZy9LUlJ4dnFHY2ljWkh6RlM2UE9nNlRnaWNpY3Y1SU10TGliV2pHODFzOHF1TFByWWw.png"></p><h1 id="使用队列有什么需要注意的吗？"><a href="#使用队列有什么需要注意的吗？" class="headerlink" title="使用队列有什么需要注意的吗？"></a>使用队列有什么需要注意的吗？</h1><p>使用有界队列时，需要注意线程池满了后，被拒绝的任务如何处理。</p><p>使用无界队列时，需要注意如果任务的提交速度大于线程池的处理速度，可能会导致内存溢出。</p><h1 id="线程池有哪些拒绝策略？"><a href="#线程池有哪些拒绝策略？" class="headerlink" title="线程池有哪些拒绝策略？"></a>线程池有哪些拒绝策略？</h1><p>常见的有以下几种：</p><p>AbortPolicy：中止策略。默认的拒绝策略，直接抛出 RejectedExecutionException。调用者可以捕获这个异常，然后根据需求编写自己的处理代码。</p><p>DiscardPolicy：抛弃策略。什么都不做，直接抛弃被拒绝的任务。</p><p>DiscardOldestPolicy：抛弃最老策略。抛弃阻塞队列中最老的任务，相当于就是队列中下一个将要被执行的任务，然后重新提交被拒绝的任务。如果阻塞队列是一个优先队列，那么“抛弃最旧的”策略将导致抛弃优先级最高的任务，因此最好不要将该策略和优先级队列放在一起使用。</p><p>CallerRunsPolicy：调用者运行策略。在调用者线程中执行该任务。该策略实现了一种调节机制，该策略既不会抛弃任务，也不会抛出异常，而是将任务回退到调用者（调用线程池执行任务的主线程），由于执行任务需要一定时间，因此主线程至少在一段时间内不能提交任务，从而使得线程池有时间来处理完正在执行的任务。</p><h1 id="如何终止线程池？"><a href="#如何终止线程池？" class="headerlink" title="如何终止线程池？"></a>如何终止线程池？</h1><p>终止线程池主要有两种方式：</p><p>shutdown：“温柔”的关闭线程池。不接受新任务，但是在关闭前会将之前提交的任务处理完毕。</p><p>shutdownNow：“粗暴”的关闭线程池，也就是直接关闭线程池，通过 Thread#interrupt() 方法终止所有线程，不会等待之前提交的任务执行完毕。但是会返回队列中未处理的任务。</p><h1 id="Executors-提供了哪些创建线程池的方法？"><a href="#Executors-提供了哪些创建线程池的方法？" class="headerlink" title="Executors 提供了哪些创建线程池的方法？"></a>Executors 提供了哪些创建线程池的方法？</h1><p>newFixedThreadPool：固定线程数的线程池。corePoolSize &#x3D; maximumPoolSize，keepAliveTime为0，工作队列使用无界的LinkedBlockingQueue。适用于为了满足资源管理的需求，而需要限制当前线程数量的场景，适用于负载比较重的服务器。</p><p>newSingleThreadExecutor：只有一个线程的线程池。corePoolSize &#x3D; maximumPoolSize &#x3D; 1，keepAliveTime为0， 工作队列使用无界的LinkedBlockingQueue。适用于需要保证顺序的执行各个任务的场景。</p><p>newCachedThreadPool： 按需要创建新线程的线程池。核心线程数为0，最大线程数为 Integer.MAX_VALUE，keepAliveTime为60秒，工作队列使用同步移交 SynchronousQueue。该线程池可以无限扩展，当需求增加时，可以添加新的线程，而当需求降低时会自动回收空闲线程。适用于执行很多的短期异步任务，或者是负载较轻的服务器。</p><p>newScheduledThreadPool：创建一个以延迟或定时的方式来执行任务的线程池，工作队列为 DelayedWorkQueue。适用于需要多个后台线程执行周期任务。</p><p>newWorkStealingPool：JDK 1.8 新增，用于创建一个可以窃取的线程池，底层使用 ForkJoinPool 实现。</p><h1 id="在我们实际使用中，线程池的大小配置多少合适？"><a href="#在我们实际使用中，线程池的大小配置多少合适？" class="headerlink" title="在我们实际使用中，线程池的大小配置多少合适？"></a>在我们实际使用中，线程池的大小配置多少合适？</h1><p>要想合理的配置线程池大小，首先我们需要区分任务是计算密集型还是I&#x2F;O密集型。</p><p>对于计算密集型，设置 线程数 &#x3D; CPU数 + 1，通常能实现最优的利用率。</p><p>对于I&#x2F;O密集型，网上常见的说法是设置 线程数 &#x3D; CPU数 * 2 ，这个做法是可以的，但个人觉得不是最优的。</p><p>在我们日常的开发中，我们的任务几乎是离不开I&#x2F;O的，常见的网络I&#x2F;O（RPC调用）、磁盘I&#x2F;O（数据库操作），并且I&#x2F;O的等待时间通常会占整个任务处理时间的很大一部分，在这种情况下，开启更多的线程可以让 CPU 得到更充分的使用，一个较合理的计算公式如下：</p><p>线程数 &#x3D; CPU数 * CPU利用率 * (任务等待时间 &#x2F; 任务计算时间 + 1)</p><p>例如我们有个定时任务，部署在4核的服务器上，该任务有100ms在计算，900ms在I&#x2F;O等待，则线程数约为：4 * 1 * (1 + 900 &#x2F; 100) &#x3D; 40个。</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E7%AC%94%E8%AE%B0/">笔记</category>
      
      <category domain="http://example.com/categories/%E7%AC%94%E8%AE%B0/%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1/">面试八股</category>
      
      
      <category domain="http://example.com/tags/Java/">Java</category>
      
      
      <comments>http://example.com/2023/java-ba-gu-xian-cheng-chi/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>学位英语考</title>
      <link>http://example.com/2023/xue-wei-ying-yu-kao-bi-ji/</link>
      <guid>http://example.com/2023/xue-wei-ying-yu-kao-bi-ji/</guid>
      <pubDate>Sun, 19 Mar 2023 16:00:00 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;2023年学位英语考试培训&quot;&gt;&lt;a href=&quot;#2023年学位英语考试培训&quot; class=&quot;headerlink&quot; title=&quot;2023年学位英语考试培训&quot;&gt;&lt;/a&gt;2023年学位英语考试培训&lt;/h1&gt;</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="2023年学位英语考试培训"><a href="#2023年学位英语考试培训" class="headerlink" title="2023年学位英语考试培训"></a>2023年学位英语考试培训</h1><span id="more"></span><h2 id="写作篇"><a href="#写作篇" class="headerlink" title="写作篇"></a>写作篇</h2><p>本次考试话题：</p><p>1.学生学习生活相关话题</p><ul><li>大学生花销越来越高，没有节约的概念</li><li>大学生们流行考证热你怎么看</li><li>关于学生们迟到早退现象</li></ul><p>2.社会发展话题</p><h3 id="高分作文的要求和对策"><a href="#高分作文的要求和对策" class="headerlink" title="高分作文的要求和对策"></a>高分作文的要求和对策</h3><ul><li>熟悉校园生活话题和社会热点话题</li><li>熟悉各类文体写作特征</li><li>积极使用一些高频词汇和短语，尽量不适用“I think”</li><li>积极使用连接词</li><li>积极使用程度副词和评论性副词</li></ul><h4 id="尽量避免易犯错误"><a href="#尽量避免易犯错误" class="headerlink" title="尽量避免易犯错误"></a>尽量避免易犯错误</h4><ul><li>拼写错误较多，文字混乱，书写潦草</li><li>审题错误，文不对题，语无伦次</li><li>没有文采，缺乏写作技巧</li><li>用中午思维逐字翻译，句子不通，语法错误较多</li><li>格式不规范，标点大小写问题</li><li>三段式书写文章</li></ul><h4 id="对策"><a href="#对策" class="headerlink" title="对策"></a>对策</h4><ul><li>内容要切题，层次要清楚，结构要合理</li><li>写好段首句，主题句-&gt;扩展句-&gt;结尾句</li><li>语法，拼写要正确</li></ul><h3 id="段落写作"><a href="#段落写作" class="headerlink" title="段落写作"></a>段落写作</h3><ol><li>主题句：表明全段是论述什么的中心点，一般放在段首</li><li>扩展句：用来说明，解释，引申论证主题的中心思想的句子</li><li>结尾句：用一句话对段落的主题进行重诉，评论借以强调强化主题</li></ol><p><strong>五大特性：</strong></p><p>统一性；连贯性；简洁性；重点突出；用词造句有变换。</p><h4 id="扩展句："><a href="#扩展句：" class="headerlink" title="扩展句："></a>扩展句：</h4><ul><li><p>列举法：至少三个足以支持观点的具体细节</p><p>First       Secondly         Thirdly               Besides</p></li><li><p>举例法：通常只用具体的实例来阐述主题句包含的中心思想</p></li></ul><p>​There are         And there are     there are</p><ul><li>比较和对照法：比较主要是指出两个或两个以上的不同种类的共同或引用</li></ul><p>​(1).整体对比：既先描述甲(A1,A2…)，再描述乙(B1,B2)</p><p>​(2).逐项对比：既双方同时描述，逐点对比(A1B1,A2B2,….)</p><ul><li>因果关系</li></ul><p>​(1).先因后果 ：First of All          Also       Finally</p><p>​(2).先果后因 ：First    In addition  Most important of All </p><ul><li>分类法</li><li>时间顺序</li><li>空间顺序</li><li>综合法</li></ul><p>范文：</p><p>Nowadays it is a very common phenomenon that some university students are late for or even absent from classes. </p><p>如今，一些大学生迟到甚至缺课是一种非常普遍的现象。</p><p>And still there are some students who slip out of the classroom before the class is over.</p><p>还有一些学生在下课前溜出了教室。</p><p> Class attendance has become a thorny problem to both the students and teachers.</p><p>对于学生和老师来说，出勤率已经成为一个棘手的问题。</p><p>In fact, it is very important for the students to attend their classes regularly. </p><p>事实上，对学生来说，按时上课是非常重要的。</p><p>First, it will ensure you to catch up with the teachers in your learning. </p><p>首先，它将确保你在学习上赶上老师。</p><p>That is very helpful to you if you want to do a good job in your study. </p><p>如果你想在学习中取得好成绩，这对你是很有帮助的。</p><p>Second, attending classes regularly is a way of showing respect to your teachers ,too. </p><p>其次，定期上课也是对老师表示尊重的一种方式。</p><p>Your teachers will feel bad if the students do not attend their classes, which, in turn, will affect their teaching and be no good for the students. </p><p>如果学生不来上课，你的老师会感觉很糟糕，这反过来会影响他们的教学，对学生也没有好处。</p><p>Third, attending classes regularly will help to form a good habit of punctuality, which is of great importance for the students to do a good job in the future.</p><p>第三，定期上课将有助于形成守时的好习惯，这对学生将来做好工作是非常重要的。</p><p>Therefore, we university students should form the good habit of attending our classes regularly from now on. </p><p>因此，从现在开始，我们大学生应该养成按时上课的好习惯。</p><p>And some day we’ll benefit from it.</p><p>总有一天我们会从中受益。</p><h2 id="单词篇"><a href="#单词篇" class="headerlink" title="单词篇"></a>单词篇</h2><p>adjust 适应            education 教育           cemetery 墓地           stripe 条纹           inborn 天生的           tedious 单调沉闷的           </p><p>cabinet 柜子           graphic 绘画的           pearls 珍珠             obliged 强制           arrogant 傲慢           makeup 化妆</p><p>rehearsals 排练       screws 螺丝            inference 推断          violet 紫罗兰花         crow 乌鸦            effective 有效的</p><p>mastermind 策划            commonwealth 协会            expressway 高速公路            brochure 小册子            distort 扭曲</p><p>terminates 终止            deficient 不足的            textiles 纺织品            obesity 肥胖          outfit 套装            luminous 明亮的</p><p>analytical 善于分析的           optic 视觉的           eclipse 使黯然失色的            successor 继任者            patriotism 爱国主义</p><p>shutters 百叶窗                 </p><p>​</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/English/">English</category>
      
      
      <category domain="http://example.com/tags/%E6%B5%8B%E8%AF%95/">测试</category>
      
      <category domain="http://example.com/tags/%E8%8B%B1%E8%AF%AD/">英语</category>
      
      
      <comments>http://example.com/2023/xue-wei-ying-yu-kao-bi-ji/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>刷题日志</title>
      <link>http://example.com/2023/leetcode/</link>
      <guid>http://example.com/2023/leetcode/</guid>
      <pubDate>Tue, 28 Feb 2023 16:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;种一棵树最好的时间是十年前，或者现在&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>种一棵树最好的时间是十年前，或者现在</p><span id="more"></span><p><strong>2023.3.14</strong></p><p>1.两数之和</p><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><p><strong>示例 1：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,7,11,15], target = 9</span><br><span class="line">输出：[0,1]</span><br><span class="line">解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</span><br></pre></td></tr></table></figure><details>   <summary>思路1:通过双循环暴力计算两个数的和；</summary>   <pre><code> class Solution &#123;        public int[] twoSum(int[] nums, int target) &#123;        int n = nums.length;        for (int i = 0; i < n; ++i) &#123;            for (int j = i + 1; j < n; ++j) &#123;                if (nums[i] + nums[j] == target) &#123;                    return new int[]&#123;i, j&#125;;                &#125;            &#125;        &#125;        return new int[0];    &#125;&#125; </code></pre> </details><p>思路二：使用哈希表建立索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">          Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">          <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)</span><br><span class="line">          &#123;</span><br><span class="line">              map(数组值，脚标);</span><br><span class="line">              <span class="comment">//循环比较如果 num[i] + map.get(数组值)（存在时）退出循环</span></span><br><span class="line">              <span class="keyword">if</span>(map.get(target - nums[i]) != <span class="literal">null</span>)</span><br><span class="line">              &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;map.get(target-nums[i]),i&#125;;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">//不存在则保存该值</span></span><br><span class="line">              map.put(nums[i],i);</span><br><span class="line">          &#125;</span><br><span class="line">        <span class="comment">//结束循环，不存在</span></span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="1624"><li>两个相同字符之间的最长子字符串</li></ol><p>给你一个字符串 <code>s</code>，请你返回 <strong>两个相同字符之间的最长子字符串的长度</strong> <em>，</em>计算长度时不含这两个字符。如果不存在这样的子字符串，返回 <code>-1</code> 。</p><p><strong>子字符串</strong> 是字符串中的一个连续字符序列。 </p><p><strong>示例 1：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;aa&quot;</span><br><span class="line">输出：0</span><br><span class="line">解释：最优的子字符串是两个 &#x27;a&#x27; 之间的空子字符串。</span><br></pre></td></tr></table></figure><p>思路：通过哈希表记录最开始出现的位置，然后比较后面的出现时距离</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxLengthBetweenEqualCharacters</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(s.length() &gt;&gt; <span class="number">1</span>);<span class="comment">//map&lt;字母，第一次位置&gt;</span></span><br><span class="line">        <span class="type">int</span> max=-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            <span class="comment">//获取当前字母，如果表内不存在则记录位置</span></span><br><span class="line">            <span class="keyword">if</span>(map.get(c)==<span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                map.put(c,i);</span><br><span class="line">                 <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        max = Math.max(max,i-map.get(c)-<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2023.3.20</strong></p><p>合并两个有序链表:</p><p>将两个升序链表合并为一个新的 <strong>升序</strong> 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>], l2 = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> &#123;</span><br><span class="line">     <span class="keyword">if</span>(l1==<span class="literal">null</span>)</span><br><span class="line">     <span class="keyword">return</span> l2;</span><br><span class="line">     <span class="keyword">else</span> <span class="keyword">if</span>(l2 == <span class="literal">null</span>)</span><br><span class="line">     <span class="keyword">return</span> l1;</span><br><span class="line">     <span class="keyword">if</span>(l1.val&lt;l2.val)</span><br><span class="line">     &#123;</span><br><span class="line">         l1.next = mergeTwoLists(l1.next,l2);</span><br><span class="line">         <span class="keyword">return</span> l1;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span>&#123;  </span><br><span class="line">         l2.next = mergeTwoLists(l2.next,l1);</span><br><span class="line">         <span class="keyword">return</span> l2;</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>删除排序链表中的重复元素</strong></p><p>给定一个已排序的链表的头 <code>head</code> ， <em>删除所有重复的元素，使每个元素只出现一次</em> 。返回 <em>已排序的链表</em> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,1,2,3,3]</span><br><span class="line">输出：[1,2,3]</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">deleteDuplicates</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line"><span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span> &amp;&amp; cur.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.val == cur.next.val) &#123;</span><br><span class="line">                cur.next = cur.next.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>环形链表</strong></p><p>给你一个链表的头节点 <code>head</code> ，判断链表中是否有环。</p><p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。注意：<code>pos</code> 不作为参数进行传递 。仅仅是为了标识链表的实际情况。</p><p><em>如果链表中存在环</em> ，则返回 <code>true</code> 。 否则，返回 <code>false</code> 。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [3,2,0,-4], pos = 1</span><br><span class="line">输出：true</span><br><span class="line">解释：链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>( head == <span class="literal">null</span> ||head.next == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span>head.next;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span>head;</span><br><span class="line">        <span class="keyword">while</span>(fast!=slow)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(fast==<span class="literal">null</span> || fast.next==<span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>只出现一次的数字</strong></p><p>给你一个 <strong>非空</strong> 整数数组 <code>nums</code> ，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p><p>你必须设计并实现线性时间复杂度的算法来解决此问题，且该算法只使用常量额外空间。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,2,1]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">singleNumber</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        Set&lt;Integer&gt; Net = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> num : nums)</span><br><span class="line">            &#123;<span class="comment">//当他无法被加入时删除他</span></span><br><span class="line">                <span class="keyword">if</span>(!Net.add(num))</span><br><span class="line">                Net.remove(num);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Net.isEmpty()?-<span class="number">1</span>:Net.iterator().next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">singleNumber</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">reduce</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//使用异或，将相同的两个数字抵消</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            reduce =  reduce ^ num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> reduce;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2023.3.25</strong></p><p><strong>无重复字符的最长子串</strong></p><p>定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;abcabcbb&quot;</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length(), ans = <span class="number">0</span>;</span><br><span class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> <span class="number">0</span>, start = <span class="number">0</span>; end &lt; n; end++) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">alpha</span> <span class="operator">=</span> s.charAt(end);</span><br><span class="line">            <span class="comment">//如果已经出现过，则更新左下标</span></span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(alpha)) &#123;</span><br><span class="line">                <span class="comment">//抛弃上一次的重复字符</span></span><br><span class="line">                start = Math.max(map.get(alpha), start);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//计算无重复字串长度，取最大</span></span><br><span class="line">            ans = Math.max(ans, end - start + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">//记录字符最新位置</span></span><br><span class="line">            map.put(alpha, end + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%8A%9B%E6%89%A3%E8%AE%B0%E5%BD%95/">力扣记录</category>
      
      
      <category domain="http://example.com/tags/%E5%88%B7%E9%A2%98/">刷题</category>
      
      
      <comments>http://example.com/2023/leetcode/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
