<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>NFC</title>
      <link href="/2025/nfc-scheme/"/>
      <url>/2025/nfc-scheme/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="扫一扫"><a href="#扫一扫" class="headerlink" title="扫一扫"></a>扫一扫</h2><table><thead><tr><th>应用</th><th align="left">URL Scheme</th></tr></thead><tbody><tr><td>微信</td><td align="left">weixin:&#x2F;&#x2F;scanqrcode</td></tr><tr><td>支付宝</td><td align="left">alipays:&#x2F;&#x2F;platformapi&#x2F;startapp?saId&#x3D;10000007</td></tr><tr><td>QQ</td><td align="left">mqqapi:&#x2F;&#x2F;qrcode&#x2F;scan_qrcode?version&#x3D;1&amp;src_type&#x3D;app</td></tr><tr><td>Tim</td><td align="left">tim:&#x2F;&#x2F;qrcode&#x2F;scan_qrcode?version&#x3D;1&amp;src_type&#x3D;app</td></tr><tr><td>美团</td><td align="left">imeituan:&#x2F;&#x2F;<a href="http://www.meituan.com/scanQRCode?openAR=1">www.meituan.com/scanQRCode?openAR=1</a></td></tr><tr><td>京东</td><td align="left">openapp.jdmobile:&#x2F;&#x2F;virtual?params&#x3D;{“category”:”jump”,”des”:”saoasao”}</td></tr><tr><td>钉钉</td><td align="left">dingtalk:&#x2F;&#x2F;dingtalkclient&#x2F;page&#x2F;scan</td></tr><tr><td>淘宝</td><td align="left">taobao:&#x2F;&#x2F;tb.cn&#x2F;n&#x2F;scancode</td></tr><tr><td>知乎</td><td align="left">zhihu:&#x2F;&#x2F;codereader</td></tr><tr><td>bilibili</td><td align="left">bilibili:&#x2F;&#x2F;qrcode</td></tr><tr><td>微博</td><td align="left">sinaweibo:&#x2F;&#x2F;qrcode</td></tr></tbody></table><span id="more"></span><h2 id="哔哩哔哩"><a href="#哔哩哔哩" class="headerlink" title="哔哩哔哩"></a>哔哩哔哩</h2><ul><li>bilibili:&#x2F;&#x2F;video&#x2F;【bv号】 打开哔哩哔哩并播放视频</li><li>bilibili:&#x2F;&#x2F;space&#x2F;【Uid】 打开用户主页</li><li>bilibili:&#x2F;&#x2F;live&#x2F;【直播间ID】 打开直播间</li></ul><h2 id="网易云"><a href="#网易云" class="headerlink" title="网易云"></a>网易云</h2><ul><li>orpheus:&#x2F;&#x2F;song&#x2F;【歌曲ID】</li><li>本地音乐 orpheus:&#x2F;&#x2F;download</li><li>orpheus:&#x2F;&#x2F;playlist&#x2F;【歌单ID】</li></ul><h2 id="QQ音乐"><a href="#QQ音乐" class="headerlink" title="QQ音乐"></a>QQ音乐</h2><ul><li>qqmusic:&#x2F;&#x2F;qq.com&#x2F;media&#x2F;playSonglist?p&#x3D;{“song”:[{“songmid”:”歌曲ID”}]}</li></ul><h2 id="抖音"><a href="#抖音" class="headerlink" title="抖音"></a>抖音</h2><ul><li><p>snssdk1128:&#x2F;&#x2F;aweme&#x2F;detail&#x2F;{itemId}作品</p></li><li><p>snssdk1128:&#x2F;&#x2F;aweme&#x2F;live&#x2F;{roomId}直播</p></li></ul><h2 id="微信"><a href="#微信" class="headerlink" title="微信"></a>微信</h2><ul><li>扫一扫 weixin:&#x2F;&#x2F;scanqrcode</li><li>扫一扫 weixin:&#x2F;&#x2F;dl&#x2F;scan</li><li>微信付款码 weixin:&#x2F;&#x2F;widget&#x2F;pay</li><li>反馈 weixin:&#x2F;&#x2F;dl&#x2F;feedback</li><li>朋友圈 weixin:&#x2F;&#x2F;dl&#x2F;moments</li><li>设置 weixin:&#x2F;&#x2F;dl&#x2F;settings</li><li>消息通知设置 weixin:&#x2F;&#x2F;dl&#x2F;notifications</li><li>聊天设置 weixin:&#x2F;&#x2F;dl&#x2F;chat</li><li>通用设置 weixin:&#x2F;&#x2F;dl&#x2F;general</li><li>公众号 weixin:&#x2F;&#x2F;dl&#x2F;officialaccounts</li><li>游戏 weixin:&#x2F;&#x2F;dl&#x2F;games</li><li>帮助 weixin:&#x2F;&#x2F;dl&#x2F;help</li><li>反馈 weixin:&#x2F;&#x2F;dl&#x2F;feedback</li><li>个人信息 weixin:&#x2F;&#x2F;dl&#x2F;profile</li><li>功能插件 weixin:&#x2F;&#x2F;dl&#x2F;features</li></ul><h2 id="支付宝"><a href="#支付宝" class="headerlink" title="支付宝"></a>支付宝</h2><ul><li>扫一扫 alipayqr:&#x2F;&#x2F;platformapi&#x2F;startapp?saId&#x3D;10000007</li><li>付款码 alipayqr:&#x2F;&#x2F;platformapi&#x2F;startapp?appId&#x3D;20000056</li><li>收款码 alipayqr:&#x2F;&#x2F;platformapi&#x2F;startapp?saId&#x3D;20000123</li><li>转账 alipays:&#x2F;&#x2F;platformapi&#x2F;startapp?appId&#x3D;20000116</li><li>发红包 alipay:&#x2F;&#x2F;platformapi&#x2F;startapp?saId&#x3D;88886666</li><li>记账本 alipays:&#x2F;&#x2F;platformapi&#x2F;startapp?appId&#x3D;20000168</li><li>创建群聊 alipay:&#x2F;&#x2F;platformapi&#x2F;startapp？appId&#x3D;20000254&amp;actionType&#x3D;createGroup</li><li>滴滴出行 alipay:&#x2F;&#x2F;platformapi&#x2F;startapp?appId&#x3D;20000778</li><li>蚂蚁森林 alipay:&#x2F;&#x2F;platformapi&#x2F;startapp?appId&#x3D;60000002</li><li>手机充值 alipayqr:&#x2F;&#x2F;platformapi&#x2F;startapp?appId&#x3D;10000003</li><li>生活缴费 alipays:&#x2F;&#x2F;platformapi&#x2F;startapp?appId&#x3D;20000193</li><li>快递查询 alipays:&#x2F;&#x2F;platformapi&#x2F;startapp?appId&#x3D;20000754</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NFC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Juri连段备忘录</title>
      <link href="/2025/han-zhu-li-lian-duan-bei-wang-lu/"/>
      <url>/2025/han-zhu-li-lian-duan-bei-wang-lu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><img src="https://fmphoto.oss-cn-chengdu.aliyuncs.com/Photo/QQ%25E5%259B%25BE%25E7%2589%258720250803223557(1).jpeg" style="zoom:33%;" /><span id="more"></span><h2 id="进攻压制"><a href="#进攻压制" class="headerlink" title="进攻压制"></a>进攻压制</h2><h3 id="贴身轻拳"><a href="#贴身轻拳" class="headerlink" title="贴身轻拳"></a>贴身轻拳</h3><ul><li><p>“轻拳<em>2”+轻拳+重升龙【+28】 —— 两点确认，最速抢招</em></p><ul><li><em>被防：“轻拳</em>2”+轻脚+中风破刃 —— 被防基本无责，但轻脚会被对手6帧拳脚抢招</li></ul></li></ul><h3 id="贴身轻脚"><a href="#贴身轻脚" class="headerlink" title="贴身轻脚"></a>贴身轻脚</h3><ul><li>“下轻脚+下轻拳*2+中风破刃”【+37】 —— 无脑复合，偷下段<ul><li>被防：基本无责</li></ul></li></ul><h3 id="近距离"><a href="#近距离" class="headerlink" title="近距离"></a>近距离</h3><ul><li>“轻拳+轻脚”+重升龙【+26~28】 —— 两点确认，距离要求宽松，非常推荐</li></ul><h3 id="中远距离"><a href="#中远距离" class="headerlink" title="中远距离"></a>中远距离</h3><ul><li><p>“下中脚+中风破刃”【+37】 —— 无脑复合，全游最长可取消的下段拳脚，好用多用。</p><ul><li>被防：控制好距离基本无责</li></ul></li><li><p>“下中脚+绿冲取消中拳”+下重拳+重风破刃+重升龙【+27】 —— 两点确认</p><ul><li>被防：“下中脚+绿冲取消中拳”+中拳+下中拳+中风破刃</li></ul></li></ul><h3 id="较远距离"><a href="#较远距离" class="headerlink" title="较远距离"></a>较远距离</h3><ul><li><p>“绿冲中拳+下重拳”+重风破刃+重升龙【+28】 —— 两点确认，蛛俐招牌绿冲</p><ul><li>被防：“绿冲中拳+下重拳”+轻风破刃</li></ul></li><li><p>“绿冲下轻脚+中拳+下中拳+中风破刃”【+37】 —— 无脑复合，偷下段</p></li></ul><h3 id="远距离"><a href="#远距离" class="headerlink" title="远距离"></a>远距离</h3><ul><li><p>“绿冲前中拳”+下重拳+重风破刃+重升龙【+28】 —— 绿冲前中拳确认</p><ul><li>被防：“绿冲前中拳”+下轻拳+轻风破刃</li></ul></li><li><p>“绿冲下中脚+绿冲取消中拳”+任意收尾 —— 两点确认，耗四格斗气，斩杀用</p><ul><li>被防：“绿冲下中脚+绿冲取消中拳”+中拳+下中拳+中风破刃</li></ul></li></ul><h3 id="跳入"><a href="#跳入" class="headerlink" title="跳入"></a>跳入</h3><ul><li><p>近距离~较远距离：</p><ul><li>0球：“跳中脚+中拳+下中拳”+中风破刃【+37】 —— 三点确认<ul><li>压起身方式同贴身轻脚连段</li></ul></li></ul></li><li><p>近距离~较远距离：</p><ul><li>2球：“跳中脚+中拳+下中拳”+五黄杀+地波【+19】 —— 三点确认，压起身和伤害比上一套更猛<ul><li>压起身：<ul><li>前前卡帧+中拳 <ul><li>对手如果原地受身，则地波先击中，按照常规中拳贴身压制方式处理</li><li>对手如果后退受身，则中拳先击中，地波命中+13，接重拳+重风破刃+重升龙<ul><li>地波被防+9，接后重脚+中风破刃，磨掉对手一格多斗气</li></ul></li></ul></li></ul></li><li>微前走确认对手前后起手，后起身前前踩头</li></ul></li></ul></li><li><p>远距离，0球：“跳重脚+前中拳+轻风破刃”【+37】 —— 无脑复合</p></li><li><p>远距离，1球：“跳重脚+重拳”+下劈+前中拳+重升龙&#x2F;中风破刃【+28&#x2F;+37】 —— 两点确认</p><ul><li>被防：“跳重脚+重拳”+地波</li></ul></li></ul><h2 id="中拳-下中拳被防处理"><a href="#中拳-下中拳被防处理" class="headerlink" title="中拳+下中拳被防处理"></a>中拳+下中拳被防处理</h2><ul><li><p>中拳之后：</p><ul><li><p>蹲防：前跳踩头</p></li><li><p>后走：下中脚</p></li><li><p>轻攻击：站重拳差和</p></li></ul></li><li><p>0球 —— 没什么可接的，满斗气可以接绿冲取消中拳，不太划算</p><ul><li>版边可以后后，距离刚好升龙对空</li></ul></li><li><p>1球，版边限定 —— 接地波+前中拳复合轻风破刃，对手如果用中力度拳脚抢招就会被打康吃一套</p><ul><li>对手如果用轻力度拳脚抢招或一直拉防就被磨掉一格多斗气，而蛛俐不耗任何资源还不会被确反</li><li>想迸放吗</li><li>不过前跳，斗反和凹都能破解，所以要和后后混着用</li></ul></li><li><p>2球，版中限定 —— 接回旋踢+地波，回旋踢能打乱动，被防-3</p><ul><li>压起身：<ul><li>微前走确认对手前后起手，后起身前前踩头</li><li>前前卡帧+中拳 <ul><li>对手如果原地受身，则地波先击中，按照常规中拳贴身压制方式处理</li><li>对手如果后退受身，则中拳先击中，地波命中+13，接重拳+重风破刃+重升龙<ul><li>地波被防+9，接后重脚+中风破刃，磨掉对手一格多斗气</li></ul></li></ul></li></ul></li></ul></li></ul><h2 id="压起身"><a href="#压起身" class="headerlink" title="压起身"></a>压起身</h2><h3 id="重升龙【-26-28】"><a href="#重升龙【-26-28】" class="headerlink" title="重升龙【+26~28】"></a>重升龙【+26~28】</h3><h4 id="劈头-轻脚重升龙【-26】"><a href="#劈头-轻脚重升龙【-26】" class="headerlink" title="劈头+轻脚重升龙【+26】"></a>劈头+轻脚重升龙【+26】</h4><ul><li><p>前前卡帧+下中脚复合轻&#x2F;中风破刃 </p><p>a.对手原地受身用轻风破刃</p><p>b.对手后退受身用中风破刃</p></li><li><p>前前卡帧+中拳 （不偷帧）</p></li><li><p>绿冲放帧中拳【+6】</p></li><li><p>版边限定：中拳卡帧之后【+4】不可防斗反</p></li></ul><h4 id="重风破刃-重升龙【-27】"><a href="#重风破刃-重升龙【-27】" class="headerlink" title="重风破刃+重升龙【+27】"></a>重风破刃+重升龙【+27】</h4><ul><li><p>前前卡帧+下中脚复合轻&#x2F;中风破刃 </p><p>a.对手原地受身用轻风破刃</p><p>b.对手后退受身用中风破刃</p></li><li><p>前前卡帧+中拳 </p><ul><li>偷帧命中+8，被防+3，均接下中拳，版边限定不怕斗反</li></ul></li><li><p>绿冲放帧中拳【+6】</p></li><li><p>版边限定：中拳卡帧之后【+5】可防斗反</p></li></ul><h4 id="轻攻击-重升龙【-28】"><a href="#轻攻击-重升龙【-28】" class="headerlink" title="轻攻击+重升龙【+28】"></a>轻攻击+重升龙【+28】</h4><ul><li><p>前前卡帧+中拳 （不偷帧）</p></li><li><p>前前卡帧+下中脚复合轻&#x2F;中风破刃 </p><p>a.对手原地受身用轻风破刃</p><p>b.对手后退受身用中风破刃</p></li><li><p>板边不能中拳卡帧</p></li><li><p>版边限定：中拳卡帧之后【+6】可防斗反</p></li></ul><h3 id="中风破刃【-37】"><a href="#中风破刃【-37】" class="headerlink" title="中风破刃【+37】"></a>中风破刃【+37】</h3><ul><li>前前卡帧+前重拳复合轻风破刃 —— 较为安全的压起身，被防只有个别4帧拳脚很长的角色能确反（卢克 玛丽莎 曼侬 本田 拉希德）</li><li>下中脚卡帧【+8】可后走打拆，仿帧投</li><li>前前卡帧+前重拳复合轻地波 —— 命中接下劈，2球限定，被防-3</li><li>前前卡帧+绿冲中拳 —— 命中+11，被防+6，均接下重拳</li><li>前前卡帧+绿冲下轻脚 —— 命中+7，接中拳，被防+3，可接中拳&#x2F;投</li><li>其实最推荐直接绿冲凭感觉压起身，可以及时后走骗拆防凹</li><li>轻风破刃卡帧+中拳复合轻风破刃 —— 被防无责，最速攒满3球，开始无限压制，版边限定</li><li>绿冲+迸放 —— 版边限定</li></ul><h3 id="五黄杀"><a href="#五黄杀" class="headerlink" title="五黄杀"></a>五黄杀</h3><h4 id="有球结尾【-37】"><a href="#有球结尾【-37】" class="headerlink" title="有球结尾【+37】"></a>有球结尾【+37】</h4><p>参考中风破结尾</p><ul><li>五黄杀+地波压制<ul><li>微前走确认对手前后起手，后起身前前踩头</li><li>前前卡帧+中拳 <ul><li>对手如果原地受身，则地波先击中，按照常规中拳贴身压制方式处理</li><li>对手如果后退受身，则中拳先击中，地波命中+13，接重拳+重风破刃+重升龙<ul><li>地波被防+9，接后重脚+中风破刃，磨掉对手一格多斗气</li></ul></li></ul></li></ul></li></ul><h4 id="无球结尾【-27】"><a href="#无球结尾【-27】" class="headerlink" title="无球结尾【+27】"></a>无球结尾【+27】</h4><ul><li><p>前前卡帧+下中脚复合轻&#x2F;中风破刃 </p><p>a.对手原地受身用轻风破刃</p><p>b.对手后退受身用中风破刃</p></li><li><p>前前卡帧+中拳 </p><ul><li>偷帧命中+8，被防+3，均接下中拳，版边限定不怕斗反</li></ul></li><li><p>绿冲放帧中拳【+6】</p></li><li><p>版边限定：中拳卡帧之后【+5】可防斗反</p></li></ul><h3 id="重风破刃-轻升龙收尾【-36】"><a href="#重风破刃-轻升龙收尾【-36】" class="headerlink" title="重风破刃+轻升龙收尾【+36】"></a>重风破刃+轻升龙收尾【+36】</h3><ul><li>轻风破刃卡帧+中拳复合轻风破刃 —— 被防无责，最速攒满3球，开始无限压制，版边限定</li><li>其实最推荐直接绿冲凭感觉压起身，可以及时后走骗拆防凹</li></ul><h3 id="一气【-48】"><a href="#一气【-48】" class="headerlink" title="一气【+48】"></a>一气【+48】</h3><h4 id="裸一气"><a href="#裸一气" class="headerlink" title="裸一气"></a>裸一气</h4><ul><li>远版【+48】：</li><li>版边【+26】</li></ul><h4 id="重风破刃-一气"><a href="#重风破刃-一气" class="headerlink" title="重风破刃+一气"></a>重风破刃+一气</h4><ul><li>远版【+53】</li><li>版边【+20】</li></ul><h4 id="OD回旋踢下劈-一气收尾"><a href="#OD回旋踢下劈-一气收尾" class="headerlink" title="OD回旋踢下劈+一气收尾"></a>OD回旋踢下劈+一气收尾</h4><ul><li>远版【+51】 </li><li>版边【+27】</li></ul><h3 id="前投【-25】"><a href="#前投【-25】" class="headerlink" title="前投【+25】"></a>前投【+25】</h3><ul><li><p>版中除非投到确反康否则无法压起身，蓄球吧</p></li><li><p>绿冲前中拳</p></li><li><p>前前卡帧 【 +3】下轻脚&#x2F;中拳&#x2F;投&#x2F;后后骗拆，版边限定</p></li></ul><h4 id="后投【-18】"><a href="#后投【-18】" class="headerlink" title="后投【+18】"></a>后投【+18】</h4><ul><li>绿冲前中拳压起身，版中确反康或版边限定</li></ul><h2 id="确反"><a href="#确反" class="headerlink" title="确反"></a>确反</h2><h3 id="无风破球"><a href="#无风破球" class="headerlink" title="无风破球"></a>无风破球</h3><ul><li><p>无资源时：中拳+重拳+下劈+轻脚+重升龙【+26】 —— 不太推荐，0球时还是蓄球优先</p><ul><li>压起身：除了近距离连段那些压起身，+26刚好可以直接迸</li></ul></li><li><p>蓄球：中拳+重拳+重风破刃+重升龙【+27】</p></li><li><p>最推荐：中拳+重拳+OD劈头+前中拳+中风破&#x2F;重升龙</p></li></ul><h3 id="1风破球"><a href="#1风破球" class="headerlink" title="1风破球"></a>1风破球</h3><ul><li>打伤害：中拳+重拳+下劈+前中拳+重升龙【+28】 —— 要蓄球就把重升龙换成中风破刃</li></ul><h3 id="2风破球"><a href="#2风破球" class="headerlink" title="2风破球"></a>2风破球</h3><ul><li>打伤害：前重拳+下中拳+地波下劈+前中拳+重升龙【+28】 —— 要蓄球就把重升龙换成中风破刃</li><li>资源回收：中拳+重拳+OD劈头+前中拳+地波_劈头+前中拳+中风破&#x2F;重升龙</li></ul><h3 id="3风破球"><a href="#3风破球" class="headerlink" title="3风破球"></a>3风破球</h3><ul><li><p>打伤害：前重拳+下中拳+回旋踢地波下劈+前中拳+重升龙【+28】 —— 要蓄球就把重升龙换成中风破刃</p></li><li><p>中拳+重拳+回旋踢-地波-下劈+前中拳+中风破&#x2F;重升龙</p></li><li><p>版边，3斗气，1球，打伤害：前重拳+下中拳+OD回旋踢下劈+重升龙【+27】 —— 性价比极高的连段，推板距离优秀，重升龙还能换成一气</p></li></ul><h3 id="反迸非版边"><a href="#反迸非版边" class="headerlink" title="反迸非版边"></a>反迸非版边</h3><ul><li>打伤害：前重拳+下中拳+回旋踢地波下劈+前中拳+重升龙【+28】 —— 要蓄球就把重升龙换成中风破刃</li></ul><h3 id="反迸版边"><a href="#反迸版边" class="headerlink" title="反迸版边"></a>反迸版边</h3><ul><li><p>绿冲前重拳+重风破刃+轻风破刃+中升龙【+30】 —— 能蓄2球</p><p>压起身：</p><ul><li>版边像这种风破刃+重升龙收尾的连段可以改为风破刃+中升龙收尾，伤害不变，有利帧+30<ul><li>前前卡帧+下中拳 —— 偷帧命中+8，接下重拳</li><li>被防+1，接下中拳+中风破刃</li></ul></li><li>绿冲前中脚</li></ul></li><li><p>前前+下重拳+轻风破刃+重升龙【+30】 —— 能蓄1球，伤害比上一套高，压起身同上</p></li></ul><h3 id="墙崩"><a href="#墙崩" class="headerlink" title="墙崩"></a>墙崩</h3><p>参考反迸版边连段，但第一套不再适用</p><h3 id="晕连"><a href="#晕连" class="headerlink" title="晕连"></a>晕连</h3><p>后跳+轻风破刃+前跳重脚+下重拳+任意收尾</p><h2 id="打拆投"><a href="#打拆投" class="headerlink" title="打拆投"></a>打拆投</h2><h3 id="晃拆"><a href="#晃拆" class="headerlink" title="晃拆"></a>晃拆</h3><h4 id="下重脚"><a href="#下重脚" class="headerlink" title="下重脚"></a>下重脚</h4><ul><li>前中拳卡帧，后走打拆</li></ul><h4 id="中风破刃结尾"><a href="#中风破刃结尾" class="headerlink" title="中风破刃结尾"></a>中风破刃结尾</h4><ul><li>下中脚卡帧</li><li>下重拳卡帧，可后走打拆</li></ul><h4 id="中升龙（-31"><a href="#中升龙（-31" class="headerlink" title="中升龙（+31)"></a>中升龙（+31)</h4><ul><li>前中拳中拳偷帧</li><li>前中拳卡帧后走打拆</li></ul><h4 id="重升龙（-28）"><a href="#重升龙（-28）" class="headerlink" title="重升龙（+28）"></a>重升龙（+28）</h4><ul><li>中拳偷帧</li><li>放帧重升龙，肘击卡帧后走打拆</li></ul><h4 id="跳重拳踩头"><a href="#跳重拳踩头" class="headerlink" title="跳重拳踩头"></a>跳重拳踩头</h4><ul><li>肘击卡帧后走打拆</li></ul><h3 id="0风破球"><a href="#0风破球" class="headerlink" title="0风破球"></a>0风破球</h3><ul><li>“重拳+OD地波”+重升龙【+27】 —— 两点确认<ul><li>被防：“重拳+OD地波”+前中拳+轻风破刃</li></ul></li></ul><h3 id="1风破球-1"><a href="#1风破球-1" class="headerlink" title="1风破球"></a>1风破球</h3><ul><li><p>“重拳+地波”+下中拳+中风破刃【+37】 —— 两点确认</p><ul><li>被防：“重拳+地波”+前中拳+轻风破刃</li></ul></li><li><p>1球，3斗气 “重拳+OD回旋踢”+下劈+重升龙【+27】 —— 两点确认，非版边的话，回旋踢只踢两下就出下劈</p><ul><li>被防：“重拳+OD回旋踢”+地波 —— 全程联防，对手没得凹</li></ul></li></ul><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><ul><li><p>重脚确反康+重升龙【+26~27】 —— 重脚最远端命中接不上重升龙</p></li><li><p>下重脚确反康，下重拳卡帧</p></li></ul><h2 id="风水引擎相关"><a href="#风水引擎相关" class="headerlink" title="风水引擎相关"></a>风水引擎相关</h2><ul><li><p>起手①：前重拳开风水 —— 在对手斗气少于2格时，不需确认是否命中直接开，对手要么斗反气绝，要么承受无尽的择</p></li><li><p>起手②：中拳+下中拳开风水 —— 有充足的时间确认命中再开</p></li></ul><p>连段组件①：下轻拳+下中脚+中拳 —— 通常破防用的组件</p><p>连段组件②：轻脚+前中拳+下中脚 —— 使用率最高的组件</p><p>连段组件③：下重拳+重脚+重风破刃 —— 变化最丰富的组件</p><p>三个连段组件的衔接必须练熟，可以把风破球和风水引擎调成无限，在训练场这样练习</p><p>起手命中：</p><p>清斗气：前冲+中脚+中拳+下重拳+迸放【+32】 —— 能打掉近两格斗气</p><p>└压起身：1. 绿冲前中脚+组件②+组件③ —— 中段择</p><ol start="2"><li>下中拳卡帧+下中脚+中拳+组件②+组件③ —— 下段择，版边限定</li></ol><p>无球：前重拳+下劈+组件②+组件③ —— 性价比极高的连段，不易掉招，有安全跳，可以蓄球，还回斗气，只是推板能力略有不足</p><p>有球：前重拳+下劈+下中脚+中拳+组件②+组件③ —— 上一套的升级版</p><p>版中安全跳压起身：“跳中脚+重拳”+绿冲取消下重拳+中脚+中拳+组件②+组件③ —— 两点确认</p><p>└被防：“跳中脚+重拳”+绿冲取消中拳+下中脚+中拳+破防套路 —— 破防套路下面介绍</p><p>版边安全跳压起身：“跳重脚+下中脚+中拳”+组件②+组件③ —— 三点确认，和版中安全跳相比，不需要耗斗气绿冲取消</p><p>起手被防：</p><p>破防套路①：前冲+组件①+组件②+下重脚+轻风破刃 —— 蓄球，被防无责</p><p>└压起身：1. 下轻拳卡帧+下中脚+中拳+组件②+组件③</p><ol start="2"><li>迸放 —— 版边限定</li></ol><p>破防套路②：前冲+组件①+轻脚+前中拳+前中脚+轻风破刃 —— 蓄球，被防无责，加入中段破防能力出众</p><p>└压起身：1. 绿冲下轻脚+下中脚+中拳+组件②+组件③</p><ol start="2"><li>去掉轻风破刃，迸放 —— 版边限定</li></ol><p>破防套路③：前冲+组件①+组件②+绿冲取消前中脚+中脚+中拳+组件②+组件③ —— 耗3格斗气，前中脚会被对手抢招（真有人敢和风水引擎抢招吗）</p><p>被斗反后重新进攻：</p><ol><li><p>绿冲下轻脚&#x2F;下中脚+中拳+组件②+组件③ —— 如果被防就用上面的破防套路</p></li><li><p>跳中拳+跳中脚+下中脚+中拳+组件②+组件③ —— 蛛俐专属中段二连，用跳重拳+跳重脚也可以，不过跳重拳不小心命中就没后续了</p></li></ol><h2 id="斩杀"><a href="#斩杀" class="headerlink" title="斩杀"></a>斩杀</h2><ul><li><p>一气：绿冲前重拳+下重拳+绿冲取消前重拳+中拳+绿冲取消下重拳+中拳tc+一气</p></li><li><p>二气</p><ul><li><p>0~1球：前重拳+二气+前重拳+绿冲取消前重拳+中拳+绿冲取消下重拳+中脚+中拳+组件②+组件③+强化一气&#x2F;重升龙</p></li><li><p>2球：前重拳+二气+前重拳+绿冲取消前重拳+中拳+绿冲取消下重拳+中脚+中拳+组件②+地波下劈+组件②+组件③+强化一气&#x2F;重升龙 —— 如果在版边，可以在下劈后加上下中脚+中拳</p></li><li><p>3球：前重拳+二气+前重拳+绿冲取消前重拳+中拳+绿冲取消下重拳+中脚+中拳+组件②+回旋踢地波下劈+组件②+组件③+强化一气&#x2F;重升龙 —— 如果在版边，可以在下劈和组件②之间加上下中脚+中拳</p></li></ul></li><li><p>三气：绿冲前重拳+下重拳+绿冲取消前重拳+中拳+绿冲取消下重拳+中拳+根据风破球选择连段+三气 6752</p></li></ul><h2 id="角色对策"><a href="#角色对策" class="headerlink" title="角色对策"></a>角色对策</h2><h3 id="老桑"><a href="#老桑" class="headerlink" title="老桑"></a>老桑</h3><h3 id="豪鬼"><a href="#豪鬼" class="headerlink" title="豪鬼"></a>豪鬼</h3><p>1.板边不使用拆投</p><p>2.打白之后尽量往板边推</p><p>3.白了之后少跳，多前走魔血</p><h2 id="虚损压制"><a href="#虚损压制" class="headerlink" title="虚损压制"></a>虚损压制</h2><ul><li>中拳-下中拳-轻反摇腿<ul><li>站中脚复合重反摇：打8帧抢招</li><li>下重脚退远打下段，无法确反</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Game </tag>
            
            <tag> 街霸6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>摄影三要素</title>
      <link href="/2025/she-ying/"/>
      <url>/2025/she-ying/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>曝光三要素</strong>指的是光圈大小、快门速度、感光度ISO</p><img src="https://fmphoto.oss-cn-chengdu.aliyuncs.com/Photo/IMG_20250602_191323.jpg" style="zoom: 50%;" /><span id="more"></span><h2 id="1-光圈"><a href="#1-光圈" class="headerlink" title="1.光圈"></a><strong>1.光圈</strong></h2><p>光圈是一个用来控制光线透过镜头，进入机身内感光面光量的装置，它通常是在镜头内。表达光圈大小我们是用f值。完整的光圈值系列如下：</p><p><strong>光圈的两个作用</strong></p><p>1.通过进光量的多少来控制摄影时的曝光程度</p><p>2.通过改变光圈的大小来调节所拍照片的清晰与虚化效果</p><hr><p>此处加入一个摄影术语–<strong>景深</strong></p><p><strong>景深</strong> 通俗地说，景深是指拍摄的照片中，对焦点前后能够看到的清晰对象的范围。景深以深浅来衡量，清晰景物的范围较大，是指景深较深，清晰景物的范围较小，是指景深较浅。</p><p>决定景深的因素–<strong>光圈 焦距 物距</strong></p><p><strong>焦距</strong>是焦点到面镜的中心点之间的距离</p><p><strong>物距</strong>是指拍摄者与拍摄对象的距离，更为精确的说是相机镜头与对焦位置的距离</p><p><strong>光圈 焦距 物距对于景深的影响</strong>可以用以下三句话来概括</p><p>光圈越大，景深越浅；光圈越小，景深越深</p><p>焦距越大，景深越浅；焦距越小；景深越深</p><p>物距越大，景深越深；物距越小，景深越浅</p><p><strong>对于任意光圈，其焦点之后的景深大约是焦点前面景深的2倍</strong></p><hr><h2 id="2-快门"><a href="#2-快门" class="headerlink" title="2.快门"></a><strong>2.快门</strong></h2><p>快门是一种让光线在一段精确的时间里照射胶片或影像传感器的装置。快门的另一种含义是指相机的曝光时间长短，通常称为快门时间</p><p><strong>快门级数</strong></p><p>常见的快门时间有：15 8 4 2 1 1&#x2F;2 1&#x2F;4 1&#x2F;8 1&#x2F;15 1&#x2F;30 1&#x2F;60 1&#x2F;125 1&#x2F;250 1&#x2F;500 1&#x2F;1000 1&#x2F;2000 1&#x2F;4000</p><p><strong>安全快门</strong>：安全快门就是手持相机拍摄时，快门时间的设定不能大于拍摄时焦距的倒数</p><p><strong>常用参数</strong>：行人：1&#x2F;500    静物：1&#x2F;124</p><p><strong>快门速度的选择</strong></p><p>快门可以控制曝光量（画面明暗）和运动物体的动感与静态凝结状态在控制曝光量这方面，主要针对光线条件比较极端的拍摄环境，如夜晚，晨昏这一类光线较暗的环境，需要使用慢速快门进行长时间曝光，以获得合理的曝光量，而在室外的太阳光下，环境光线很亮，就需要使用高速快门，以防止画面过曝，拍摄运动对象时，一般创作手法有两种，通过使用高速快门，可以捕捉运动主体瞬间的静态画面，而使用慢速快门，则可以表现出一种运动模糊的效果，最常见的例子就是使用长时间快门拍摄小溪流水，能够排出水流的轨迹。</p><h2 id="3-感光度ISO"><a href="#3-感光度ISO" class="headerlink" title="3.感光度ISO"></a><strong>3.感光度ISO</strong></h2><p>ISO感光度是摄影领域最常使用的术语之一，在胶片时代，其表示胶卷对光线的敏感度。感光度分为100 200 400等。在光线昏暗的场所拍摄，需要用到高感光，同时色彩的鲜艳度和真实性则越会受到影响。</p><p><img src="https://pica.zhimg.com/v2-55b3525056aba13fdfe0c073894077c8_1440w.jpg" alt="img"></p><p><strong>ISO感光度与画质的关系</strong></p><p>感光度越高，噪点越明显，画质就越粗糙，感光度越小，画质越细腻.</p><h2 id="三者的关系"><a href="#三者的关系" class="headerlink" title="三者的关系"></a>三者的关系</h2><p><strong>相同点</strong>–都可以调节曝光的明暗度，光圈大就亮，ISO高也亮，快门速度慢也亮，相反就是暗。</p><p><strong>不同点</strong></p><ol><li>光圈还可以调节景深，小光圈景深大，大光圈景深小，景深无法通过ISO &#x2F;快门来控制，这就是光圈和ISO &#x2F;快门的区别</li><li>ISO除了明暗调节还有一个特点是降低画质，ISO高了画质就会降低，所以升高ISO在三要素里是最后考虑的，实在不成才提高ISO，当然有个别艺术创作想诚心要那种高噪点低画质而提高ISO是例外。</li><li>快门除了变化曝光明暗还有一个功能就是设定捕获瞬间的长短，慢速快门得到一个动态的模糊的目标，快速快门得到一个凝固的瞬间的目标.</li></ol><h1 id="摄影构图"><a href="#摄影构图" class="headerlink" title="摄影构图"></a>摄影构图</h1><p><strong>构图元素及表现手法</strong></p><p>摄影构图是指在摄影中通过被摄画面中点线面的组合，将景物更为合理 更为优美的表现出来。接触摄影构图，首先要了解一些具体的概念，如主体，陪体，留白，前景，背景等。其中主体是所有元素中最为重要的，一般情况下，主体要处于画面中最显眼的位置，陪体也称为宾体，主要用于修饰 陪衬主体，留白主要是指在画面中留出一定没有景物的区域，给欣赏者留下思索的空间。前景主要用于放在主体等景物之前，起到一个过渡性的作用，使主体不至于太突兀，背景主要用于交代主体所处的环境 时节 时间等信息 也可以起到衬托主体的作用</p><h2 id="景别"><a href="#景别" class="headerlink" title="景别"></a><strong>景别</strong></h2><p>景别的划分大致有两种方法：</p><p>第一 根据被摄取主体（景物）在画幅中所占的画幅面积比例大小为标准.</p><p>第二 是以人物为参照系。即以人物在画面中占据比例的大小来划分景别.</p><p><img src="https://pic2.zhimg.com/v2-649ac77bea925e77aac147ab41ce0eb1_1440w.jpg" alt="img"></p><p>摄影的景别来分可分成远景、全景、中景、近景、特写.这是根据摄影机与被摄对象的距离或是摄成的画面的范围大小来区分的.</p><p>1.<strong>远景</strong>是指拍摄远距离景物和人物的一种广阔的画面.</p><p>2.<strong>全景</strong>是摄取较完整的人和场景的全部.</p><p>3.<strong>中景</strong>一般指摄取人的大半身显得空间较大而又能展示人物间的相互关系在影视中运用较多.</p><p>4.<strong>近景</strong>相对来说视距比中景更近一些了.一般指摄取人物的上半身或景物的局部范围比较强调人物的面部表情、手势和上半身形体动作对塑造人物起到重要作用.</p><p>5.<strong>特写</strong>是指拍摄人的头部、面部、人体的局部、物景的某一部的镜头.这是影视中强调某一局部和细节的一种独特而有效的摄影手段.</p><h2 id="摄影色彩"><a href="#摄影色彩" class="headerlink" title="摄影色彩"></a>摄影色彩</h2><p>摄影学中，色彩的运用是一门重要的学问。利用色彩，可以传达不同的画面情感。自然界中任何色彩的产生都离不开太阳光线红、橙、黄、绿、青、蓝、紫这7种光谱色彩的混合叠加。人们把红、绿、蓝这3种色光称之为三原色光，分别简称为R&#x2F;G&#x2F;B。</p><p><img src="https://pic2.zhimg.com/v2-3de9a37e33e7c3c8d70f06baf1a9730f_1440w.jpg" alt="img"></p><p><img src="https://pica.zhimg.com/v2-95f35ddbea66d0cf5a2e36ed6c01f828_1440w.jpg" alt="img"></p><p><strong>色彩的范畴</strong></p><p>　　色彩分为无色彩与有色彩两大范畴。</p><p>　　无色彩指无单色光，即：黑、白、灰；</p><p>　　有色彩指有单色光，即：红、橙、黄、绿、蓝、紫；</p><p>自然界的色彩虽然各不相同</p><p>但任何色彩都具有<strong>色相、明度、饱和度</strong>这三个基本属性</p><p><img src="https://pic1.zhimg.com/v2-471ec29e760f7dcf149c6ea25c6d295a_1440w.jpg" alt="img"></p><p><strong>色相</strong></p><p>色相是指色彩的相貌，即各种颜色之间的区别，是色彩最显著的特征，它是不同波长的色光被感觉的结果，光谱中有红、橙、黄、绿、蓝、紫6种基本色光</p><p><strong>饱和度</strong></p><p>饱和度是指色彩的鲜艳程度，也称色彩的纯度，饱和度取决于该色中含色成分和消色成分的比例，含色成分越大，饱和度越高，消色成分越大，饱和度越低。</p><p><strong>明度</strong></p><p>明度是指色彩的深浅，明暗，它取决于反射光的强度，在无色彩中，明度最高的色为白色，明度最低的色为黑色，中间存在一个从亮到暗的灰色系列。在在彩色中，任何一种纯度都有着自己的明度物特征。例如：黄色为明度最高的色，紫色为明度最低的色。</p><hr><p><strong>暖色调</strong></p><p>即红色、橙色、黄色、赭色等色彩的搭配。这种色调的运用，可使主页呈现温馨、和煦、热情的氛围。</p><p><img src="https://pica.zhimg.com/v2-443aa5901bb0157a8ca6245f3a2d5aa8_1440w.jpg" alt="img"></p><p>暖色调</p><p><strong>冷色调</strong></p><p>即青色、绿色、紫色等色彩的搭配。这种色调的运用，可使主页呈现宁静、清凉、高雅的氛围。</p><p><img src="https://pic3.zhimg.com/v2-1ee58abc43589cc3f0e0d4a10f5e7692_1440w.jpg" alt="img"></p><p>冷色调</p><p><strong>对比色调</strong></p><p>即把色性完全相反的色彩搭配在同一个空间里。例如：红与绿、黄与紫、橙与蓝等。这种色彩的搭配，可以产生强烈的视觉效果，给人亮丽、鲜艳、喜庆的感觉。当然，对比色调如果用得不好，会适得其反，产生俗气、刺眼的不良效果。这就要把握“大调和，小对比”这一个重要原则，即总体的色调应该是统一和谐的，局部的地方可以有一些小的强烈对比。</p><p><img src="https://pica.zhimg.com/v2-b0082b901a33d90bffc5cfbb0042c650_1440w.jpg" alt="img"></p><p>对比色调</p><p>色彩的<strong>心理感觉</strong></p><p>不同的颜色会给浏览者不同的心理感受。</p><p><strong>红色</strong>—是一种激奋的色彩。刺激效果，能使人产生冲动，愤怒，热情，活力的感觉。</p><p><strong>绿色</strong>—介于冷暖两中色彩的中间，显得和睦，宁静，健康，安全的感觉。 它和金黄，淡白搭配，可以产生优雅，舒适的气氛。</p><p><strong>橙色</strong>—也是一种激奋的色彩，具有轻快，欢欣，热烈，温馨，时尚的效果。</p><p><strong>黄色</strong>—具有快乐，希望，智慧和轻快的个性，它的明度最高。</p><p><strong>蓝色</strong>—是最具凉爽，清新，专业的色彩。它和白色混合，能体现柔顺，淡雅，浪漫的气氛(象天空的色彩:)</p><p><strong>白色</strong>—具有洁白，明快，纯真，清洁的感受。</p><p><strong>黑色</strong>—具有深沉，神秘，寂静，悲哀，压抑的感受。</p><p><strong>灰色</strong>—具有中庸，平凡，温和，谦让，中立和高雅的感觉。</p><p>每种色彩在饱和度，透明度上略微变化就会产生不同的感觉。以绿色为例，黄绿色有青春，旺盛的视觉意境，而蓝绿色则显得幽宁，阴深。</p><h2 id="认识光线"><a href="#认识光线" class="headerlink" title="认识光线"></a>认识光线</h2><p><strong>光的特性</strong></p><p>无论是自然光或人工室内光,都有其特征：</p><p><strong>1.明暗度</strong>：明暗度表示光的强弱.它随光源能量和距离的变化而变化。</p><p><strong>2.方向</strong>：只有一个光源,方向很容易确定.而有多个光源诸如多云天气的漫射光,方向就难以确定,甚至完全迷失。</p><p><strong>3.色彩</strong>：光随不同的光的本源,并随它穿越的物质的不同而变化出多种色彩.自然光的色彩与白炽灯光或电子闪光灯作用下的色彩不同,而且阳光本身的色彩,也随大气条件和一天时辰的变化而变化。</p><p><strong>光的基本方向</strong></p><p>光线的方向是以光线的来源，被摄体及相机三者的相对位置来看。可分为顺光、逆光、侧光、侧顺光、侧逆光、顶光、底光。</p><p><img src="https://pic4.zhimg.com/v2-b6b0fcb89100ed11839e40c75b748555_1440w.jpg" alt="img"></p><p>光的基本方向</p><p><strong>1.顺光</strong></p><p>顺光时，被摄体受到均匀照明，景物的阴影被景物自身遮挡住，影调比较柔和。能拍出被摄体表面的质地和带来较好的色彩还原。表现空间立体感的效果也较差.</p><p><strong>优点</strong>：成像清晰，色彩、线条、形态、气氛都能得到真实的还原。</p><p><strong>缺点</strong>：呆板，立体感弱，缺少纵深。</p><p><strong>拍摄要点：</strong>要注意画面层次感和立体感的营造。可考虑通过色彩差异拉大主体与背景的分离度，提高画面立体感.</p><p><strong>2.逆光</strong></p><p>光线的照射方向与照相机的拍摄方向是相反的。主体人物的边缘有明显的光线轮廓，画面有明显的明暗反差。逆光又被称为“轮廓照明”， 是人像摄影中最讲究的一种用光方式，画面效果十分生动，且富有造型特点。</p><p><strong>优点</strong>：逆光具有很强的塑形感，有利于勾勒轮郭，表现空间层次和营造气氛。</p><p><strong>缺点</strong>：因照度极其不均，所以在曝光上很难把握。</p><p><strong>拍摄要点</strong>：</p><p>1.逆光拍摄时，为了防止镜头进光（特殊效果除外），尽量使用镜头遮光罩或是遮光板。</p><p>2.为防止画面明暗反差过大，可以使用反光板或闪光灯等补光工具控制亮度平衡。</p><p><strong>3.侧光</strong></p><p>光线的照射方向与照相机的拍摄方向成90度的夹角关系。主体人物有明显的受光面和背光面之分，光线的方向和明暗关系十分明确。侧光使被摄人物有鲜明的层次感和立体感，被称为“质感照明”。</p><p><strong>优点</strong>：被摄主体一侧受光便会产生强烈的明暗对比，使形态、线条、质感得以突出。</p><p><strong>缺点</strong>：侧光运用在人像摄影中，容易暴露皮肤的瑕疵，形成明暗过渡不均的“阴阳脸”。</p><p><strong>拍摄要点</strong>：1.运用侧光拍摄，适合表现个性鲜明、强硬的人物形象，不太适合一般强调浪漫的婚纱照。2.可以使用反光板或闪光灯对暗部进行补光，以减小光比，以适合婚纱柔和的画面效果。</p><p><strong>4.侧顺光</strong></p><p>光线的照射方向与照相机的拍摄方向成锐角夹角关系。侧顺光兼具顺光与侧光两种光线的特征，它既保证了被摄主体的亮度，又可以使其明暗对比得当，有很好的塑形效果。侧顺光是最常见的外景婚纱用光，也是单光源补光较理想的光线。</p><p><strong>优点</strong>：侧顺光拍摄出的画面中有丰富的影调和层次，不仅有利于表现人物的造型，还可以突出立体感。</p><p><strong>缺点</strong>：亮部和阴影部分的光比以及面积比例掌控很关键。</p><p><strong>拍摄要点</strong>：侧顺光下，人脸大面积处于受光面，所以应按亮部进行测光、曝光，如光比过大，暗部层次缺失严重，则需要利用补光工具给暗部补光，或降低亮部光强。</p><p><strong>5.侧逆光</strong></p><p>光线的照射方向与照相机的拍摄方向成钝角夹角关系。侧逆光兼具逆光与侧光两种光线的特征，采用侧逆光照明，被摄者面部和身体的受光面只占小部分，阴影面占大部分，人物的一侧有明显的轮廓光，能很好地表现被摄对象的立体感，层次丰富。侧逆光拍摄出的画面易产生很好的光影效果。</p><p><strong>优点</strong>：侧逆光具有很强空间感，画面层次丰富且生动活泼。</p><p><strong>缺点</strong>：容易因测光不准确而使画面曝光过度或不足。</p><p><strong>拍摄要点</strong>：</p><p>1.在外景婚纱摄影中，常常需要反光板、闪光灯等辅助照明设备适当提高阴影面的亮度，修饰阴影面的立体层次，改善阴影部分的立体感。</p><p>2.在拍摄人物中近景和特写时，有时作为主光用，有时作修饰光用。3.要根据侧逆光的用途确定光比，避免人物脸部大面积过暗，只有一亮线。</p><p><strong>6.顶光 底光</strong></p><p><strong>顶光</strong>顾名思义就是从头顶上照射下来的光线，又叫骷髅光。最具代表性的顶光就是正午的阳光，这种光线使凸出来的部分更明亮、凹进去的部分更阴暗，它会使人物的眼睛、鼻子下方出现难看的阴影。在外景婚纱拍摄中，应尽量避免使用顶光，如无法避免，则可以将反光板放置在人脸下放，消除阴影。</p><p><strong>底光</strong>是从人的脚下垂直照上来的光线，它往往会使被摄主体显得残暴，纯粹的底光容易形成阴险、恐怖、刻板的效果。底光更多出现在舞台戏剧照明中，而在外景婚纱拍摄中较少用到，但低角度的反光板、广场的地灯、桥下水流的反光等也带有底光的性质。</p><p><strong>自然光</strong></p><p><strong>明暗度</strong> 明暗度表示光的强弱。它随光源能量和距离的变化而变化。</p><p><strong>方向</strong> 如果只有一个光源，方向很容易确定。而有多个光源诸如多云天气的漫射光，方向就难以确定，甚至完全迷失。</p><p><strong>色彩</strong> 光随不同的光源，并随它穿越的物质的不同而变化出多种色彩。自然光的色彩与白炽灯光或电子闪光灯下的色彩不同，而且阳光本身的色彩，也随大气条件和一天时间的变化而变化。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 摄影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>可乐鸡翅</title>
      <link href="/2023/ke-le-ji-chi/"/>
      <url>/2023/ke-le-ji-chi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>材料：</strong></p><ol><li><p>鸡翅10只</p></li><li><p>可乐330毫升（一罐）</p></li><li><p>生姜3片</p></li><li><p>大葱1根</p><span id="more"></span></li><li><p>生抽、老抽各适量</p></li><li><p>白糖两勺</p></li><li><p>料酒适量</p></li><li><p>食盐适量</p></li></ol><p><strong>步骤：</strong></p><ol><li><p>首先，清洗鸡翅并用刀在表面划几刀，以便入味。</p></li><li><p>生姜切片，大葱切段备用。</p></li><li><p>在锅中加入适量的油，热锅冷油可以防止鸡翅皮粘锅。(ps记得把鸡翅水吸干），加入生姜片炒香。</p><img src="https://fmphoto.oss-cn-chengdu.aliyuncs.com/Photo/%E5%8F%AF%E4%B9%90%E9%B8%A1%E7%BF%8501.jpg" style="zoom:50%;" /></li><li><p>接着，把鸡翅放入锅中两面煎炒（ps把生姜片夹出），煎至两面微黄色。</p></li><li><p>加入两勺糖继续炒，炒至糖溶化并裹在鸡翅上，鸡翅色泽变深。</p></li><li><p>倒入适量的料酒，用中小火慢慢翻煎，让鸡翅充分吸收料酒的香味。</p></li><li><p>加入适量的生抽和老抽翻煎均匀，使鸡翅充分上色。</p></li><li><p>倒入一罐可乐（大约330ml），加入葱段，用中小火烧煮15-20分钟。</p><p><img src="https://fmphoto.oss-cn-chengdu.aliyuncs.com/Photo/%E5%8F%AF%E4%B9%90%E9%B8%A1%E7%BF%8502.jpg"></p></li><li><p>最后，撇去浮沫，调入适量的盐炖煮至汤汁变粘稠即可。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 厨房 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 下厨房 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>selenium4.0更新</title>
      <link href="/2023/selenium/"/>
      <url>/2023/selenium/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="selenium4-0"><a href="#selenium4-0" class="headerlink" title="selenium4.0"></a>selenium4.0</h1><p>Selenium 4 已经到来，将至少需要 <strong>Python 3.7 或更高版本。</strong></p><p>下面介绍一下基础的语法格式</p><span id="more"></span><h2 id="1、初始化浏览器、刷新、最大化、后退、前进、截图"><a href="#1、初始化浏览器、刷新、最大化、后退、前进、截图" class="headerlink" title="1、初始化浏览器、刷新、最大化、后退、前进、截图"></a>1、初始化浏览器、刷新、最大化、后退、前进、截图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"><span class="comment">#初始化浏览器为谷歌浏览器</span></span><br><span class="line"><span class="built_in">chr</span>=webdriver.Chrome()</span><br><span class="line"><span class="comment"># 无界面的浏览器</span></span><br><span class="line"><span class="comment"># option = webdriver.ChromeOptions()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># option.add_argument(&quot;headless&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># chr = webdriver.Chrome(options=option)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#浏览器最大化</span></span><br><span class="line"><span class="built_in">chr</span>.maximize_window()</span><br><span class="line"></span><br><span class="line"><span class="built_in">chr</span>.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># chr.get(&quot;https://www.jd.com/&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#后退</span></span><br><span class="line"><span class="built_in">chr</span>.back()</span><br><span class="line"><span class="comment">#暂停2s</span></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#前进</span></span><br><span class="line"><span class="built_in">chr</span>.forward()</span><br><span class="line"><span class="comment">#刷新</span></span><br><span class="line"><span class="built_in">chr</span>.refresh()</span><br><span class="line"><span class="comment">#截图</span></span><br><span class="line"><span class="built_in">chr</span>.get_screenshot_as_file(<span class="string">&#x27;截图.png&#x27;</span>)</span><br><span class="line"><span class="comment">#点击</span></span><br><span class="line"><span class="built_in">chr</span>.find_element(By.ID,<span class="string">&#x27;kw&#x27;</span>).click()</span><br><span class="line"><span class="comment">#输入</span></span><br><span class="line"><span class="built_in">chr</span>.find_element(By.ID,<span class="string">&#x27;kw&#x27;</span>).send_keys(<span class="string">&quot;saa&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#清除输入框内容</span></span><br><span class="line"><span class="built_in">chr</span>.find_element(By.ID,<span class="string">&#x27;kw&#x27;</span>).clear()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#关闭浏览器</span></span><br><span class="line"><span class="built_in">chr</span>.close()</span><br></pre></td></tr></table></figure><h2 id="2、单个元素定位的方法"><a href="#2、单个元素定位的方法" class="headerlink" title="2、单个元素定位的方法"></a>2、单个元素定位的方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">selenium4使用的时候需要导入模块    <span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line">find_element(By.XPATH, <span class="string">&quot;//*[@id=&#x27;search&#x27;]&quot;</span>)</span><br><span class="line"></span><br><span class="line">find_element(By.CLASS_NAME, <span class="string">&quot;element_class_name&quot;</span>)</span><br><span class="line"></span><br><span class="line">find_element(By.ID,<span class="string">&quot;element_id&quot;</span>)</span><br><span class="line"></span><br><span class="line">find_element(By.NAME, <span class="string">&quot;element_name&quot;</span>)</span><br><span class="line"></span><br><span class="line">find_element(By.LINK_TEXT,<span class="string">&quot;element_link_text&quot;</span>)</span><br><span class="line"></span><br><span class="line">find_element(By.CSS_SELECTOR, <span class="string">&quot;element_css_selector&quot;</span>)</span><br><span class="line"></span><br><span class="line">find_element(By.TAG_NAME, <span class="string">&quot;element_tag_name&quot;</span>)</span><br><span class="line"></span><br><span class="line">find_element(By.PARTIAL_LINK_TEXT, <span class="string">&quot;element_partial_link_text&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="3、多个元素定位的方法"><a href="#3、多个元素定位的方法" class="headerlink" title="3、多个元素定位的方法"></a>3、多个元素定位的方法</h2><p>与单个元素的定位方式类似，把find_element改成find_elements即可</p><h2 id="4、定位select类型的下拉框"><a href="#4、定位select类型的下拉框" class="headerlink" title="4、定位select类型的下拉框"></a>4、定位select类型的下拉框</h2><p>4、定位select类型的下拉框</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select_by_index()           <span class="comment"># 通过索引定位；注意：&gt;index索引是从“0”开始。</span></span><br><span class="line">select_by_value()           <span class="comment"># 通过value值定位，va&gt;lue标签的属性值。</span></span><br><span class="line">select_by_visible_text()    <span class="comment"># 通过文本值定位，即显&gt;示在下拉框的值。</span></span><br><span class="line">Select(<span class="built_in">chr</span>.find_element_by_name(<span class="string">&quot;姓名&quot;</span>)).select_by_index(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>或者分开写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="built_in">chr</span>.find_element_by_name(<span class="string">&quot;姓名&quot;</span>)</span><br><span class="line"></span><br><span class="line">Select(a).select_by_index(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="5、多窗口切换"><a href="#5、多窗口切换" class="headerlink" title="5、多窗口切换"></a>5、多窗口切换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">current_window_handle：获取当前窗口的句柄</span><br><span class="line"></span><br><span class="line">window_handles：返回当前浏览器的所有窗口的句柄</span><br><span class="line"></span><br><span class="line">switch_to_window()：用于切换到对应的窗口</span><br><span class="line"></span><br><span class="line"><span class="built_in">chr</span>.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line">a=<span class="built_in">chr</span>.current_window_handle</span><br><span class="line"><span class="built_in">chr</span>.execute_script(<span class="string">&#x27;window.open()&#x27;</span>)</span><br><span class="line"><span class="built_in">chr</span>.switch_to.window(<span class="built_in">chr</span>.window_handles[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">chr</span>.get(<span class="string">&quot;https://www.jd.com/&quot;</span>)</span><br><span class="line"><span class="comment"># chr.switch_to.window(chr.window_handles[0])</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">chr</span>.switch_to.window(a)</span><br></pre></td></tr></table></figure><h2 id="6、iframe切换"><a href="#6、iframe切换" class="headerlink" title="6、iframe切换"></a>6、iframe切换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.switch_to.frame(driver.find_element_by_xpath(<span class="string">&quot;//iframe[contains(@src,&#x27;myframe&#x27;)]&quot;</span>))</span><br></pre></td></tr></table></figure><p>#回到默认的iframe</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.switch_to.default_content()</span><br></pre></td></tr></table></figure><h2 id="7、键盘操作"><a href="#7、键盘操作" class="headerlink" title="7、键盘操作"></a>7、键盘操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">send_keys(Keys.BACK_SPACE)：删除键(BackSpace)</span><br><span class="line"></span><br><span class="line">send_keys(Keys.SPACE)：空格键(Space)</span><br><span class="line"></span><br><span class="line">send_keys(Keys.TAB)：制表键(TAB)</span><br><span class="line"></span><br><span class="line">send_keys(Keys.ESCAPE)：回退键(ESCAPE)</span><br><span class="line"></span><br><span class="line">send_keys(Keys.ENTER)：回车键(ENTER)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
            <tag> 自动化测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美团笔试3.18后端</title>
      <link href="/2023/mei-tuan-bi-shi/"/>
      <url>/2023/mei-tuan-bi-shi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1-捕获敌人"><a href="#1-捕获敌人" class="headerlink" title="1. 捕获敌人"></a>1. 捕获敌人</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>小美在玩一项游戏。该游戏的目标是尽可能抓获敌人。</p><p>敌人的位置将被一个二维坐标(<em>x</em>,<em>y</em>) 所描述。</p><p>小美有一个全屏技能，该技能能一次性将若干敌人一次性捕获。捕获的敌人之间的横坐标的最大差值不能大于 <em>A</em>，纵坐标的最大差值不能大于 <em>B</em> 。</p><p>现在给出所有敌人的坐标，你的任务是计算小美一次性最多能使用技能捕获多少敌人。</p><span id="more"></span><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h3><p>第一行三个整数 N*,<em>A</em>,<em>B</em>，表示共有 N* 个敌人，小美的全屏技能的参数 <em>A</em> 和参数 <em>B</em>。</p><p>接下来 <em>N</em> 行，每行两个数字 <em>x</em>,<em>y</em>，描述一个敌人所在的坐标。</p><p>1⩽N⩽500,1⩽A,B⩽1000,1⩽x,y⩽1000</p><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h3><p>一行，一个整数表示小美使用技能单次所可以捕获的最多数量。</p><h3 id="样例1"><a href="#样例1" class="headerlink" title="样例1"></a>样例1</h3><p><strong>输入</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 1 1</span><br><span class="line">1 1</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><p>说明：最多可以同时捕获两名敌人，可以是 (1,1)(1,1) 和 (1,2)(1,2) 处的敌人，也可以是 (1,2)(1,2) 和 (1,3)(1,3) 处的敌人，但不可以同时捕获三名敌人，因为三名敌人时，纵坐标的最大差值是 22，超过了参数 B* 的值 11。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>二维前缀和：就是在一个大矩形中有若干个点，给我们一个小矩阵，看它最多能框住多少个点。</p><p>所以我们先读入敌人坐标，将有敌人的坐标初始化为 1。</p><p>然后用二维前缀和预处理，再枚举每一个范围内 (<em>A</em>,<em>B</em>) 的子矩阵，取一个 <strong>max</strong>即可。</p><p>时间复杂度 <em>O</em>(<em>N</em>2)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[][] g = <span class="keyword">new</span> <span class="title class_">int</span>[N + <span class="number">10</span>][N + <span class="number">10</span>];</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt(), a = sc.nextInt(), b = sc.nextInt();</span><br><span class="line">        a++; b++; <span class="comment">// 最大间隔++，前缀和下标从1开始处理，防止边界问题</span></span><br><span class="line">        <span class="comment">// 与N取min</span></span><br><span class="line">        a = Math.min(a, N);</span><br><span class="line">        b = Math.min(b, N);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> sc.nextInt(), y = sc.nextInt();</span><br><span class="line">            g[x][y]++; <span class="comment">// 读入敌人坐标</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= N; j++) &#123;</span><br><span class="line">                g[i][j] += g[i - <span class="number">1</span>][j] + g[i][j - <span class="number">1</span>] - g[i - <span class="number">1</span>][j - <span class="number">1</span>]; <span class="comment">// 二维前缀和预处理 公式一</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 枚举一下所有长宽是ab的矩形，(i,j)为右下角，取max</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> a; i &lt;= N; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> b; j &lt;= N; j++) &#123;</span><br><span class="line">                res = Math.max(res, g[i][j] - g[i - a][j] - g[i][j - b] + g[i - a][j - b]); <span class="comment">// 求某一个子矩阵的值 公式二</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-截彩带"><a href="#2-截彩带" class="headerlink" title="2. 截彩带"></a>2. 截彩带</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>小美现在有一串彩带，假定每一厘米的彩带上都是一种色彩。</p><p>因为任务的需要，小美希望从彩带上截取一段，使得彩带中的颜色数量不超过 <em>K</em> 种。</p><p>显然，这样的截取方法可能非常多。于是小美决定尽量长地截取一段。你的任务是帮助小美截取尽量长的一段，使得这段彩带上不同的色彩数量不超过 <em>K</em> 种。</p><h3 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述"></a>输入描述</h3><p>第一行两个整数 N*,<em>K</em>，以空格分开，分别表示彩带有 N* 厘米长，你截取的一段连续的彩带不能超过 K* 种颜色。接下来一行 N* 个整数，每个整数表示一种色彩，相同的整数表示相同的色彩。</p><p>1≤<em>N</em>,<em>K</em>≤5000，彩带上的颜色数字介于 [1,2000][1,2000] 之间。</p><h3 id="输出描述-1"><a href="#输出描述-1" class="headerlink" title="输出描述"></a>输出描述</h3><p>一行，一个整数，表示选取的彩带的最大长度。</p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><p><strong>输入</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8 3</span><br><span class="line">1 2 3 2 1 4 5 1</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><p>说明：最长的一段彩带是 [1,2,3,2,1][1,2,3,2,1] 共 55 厘米。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>求连续子数组最大和，但此题还要求区间的种类数不能超过 K* 种，所以在<code>双指针</code>的基础上我们还需要用 <strong><code>哈希</code></strong> 来维护区间的种类数。</p><p><strong>暴力解法</strong></p><p>直接两重循环，用 <code>set</code> 维护区间种类数。</p><p>时间复杂度 O*(<em>N</em>2)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt(), k = sc.nextInt();</span><br><span class="line">        <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) a[i] = sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt; n; j++) &#123;</span><br><span class="line">                set.add(a[j]);</span><br><span class="line">                <span class="keyword">if</span> (set.size() &gt; k) <span class="keyword">break</span>;</span><br><span class="line">                res = Math.max(res, j - i + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>双指针 + map</strong></p><p>时间复杂度 O*(<em>N</em>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">5010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] cnt = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> num;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt(), k = sc.nextInt();</span><br><span class="line">        <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            a[i] = sc.nextInt();</span><br><span class="line">            add(a[i]);</span><br><span class="line">            <span class="keyword">while</span> (num &gt; k) &#123;</span><br><span class="line">                sub(a[j]);</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            res = Math.max(res, i - j + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (++cnt[x] == <span class="number">1</span>) num++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (--cnt[x] == <span class="number">0</span>) num--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔试记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL篇</title>
      <link href="/2023/java-ba-gu-mysql/"/>
      <url>/2023/java-ba-gu-mysql/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="MySQL-的事务隔离级别有哪些？分别用于解决什么问题？"><a href="#MySQL-的事务隔离级别有哪些？分别用于解决什么问题？" class="headerlink" title="MySQL 的事务隔离级别有哪些？分别用于解决什么问题？"></a>MySQL 的事务隔离级别有哪些？分别用于解决什么问题？</h1><p>主要用于解决脏读、不可重复读、幻读。</p><p>脏读：一个事务读取到另一个事务还未提交的数据。</p><p>不可重复读：在一个事务中多次读取同一个数据时，结果出现不一致。</p><p>幻读：在一个事务中使用相同的 SQL 两次读取，第二次读取到了其他事务新插入的行。</p><p>不可重复读注重于数据的修改，而幻读注重于数据的插入。</p><span id="more"></span><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>读未提交（Read Uncommitted）</td><td>有</td><td>有</td><td>有</td></tr><tr><td>读已提交（Read Committed）</td><td>无</td><td>有</td><td>有</td></tr><tr><td>可重复读（Repeatable Read）</td><td>无</td><td>无</td><td>有</td></tr><tr><td>串行化（Serializable）</td><td>无</td><td>无</td><td>无</td></tr></tbody></table><h1 id="MySQL-的可重复读怎么实现的？"><a href="#MySQL-的可重复读怎么实现的？" class="headerlink" title="MySQL 的可重复读怎么实现的？"></a>MySQL 的可重复读怎么实现的？</h1><p>使用 MVCC 实现的，即 Mutil-Version Concurrency Control，多版本并发控制。关于 MVCC，比较常见的说法如下，包括《高性能 MySQL》也是这么介绍的。</p><p>InnoDB 在每行记录后面保存两个隐藏的列，分别保存了数据行的创建版本号和删除版本号。每开始一个新的事务，系统版本号都会递增。事务开始时刻的版本号会作为事务的版本号，用来和查询到的每行记录的版本号对比。在可重复读级别下，MVCC是如何操作的：</p><p>SELECT：必须同时满足以下两个条件，才能查询到。1）只查版本号早于当前版本的数据行；2）行的删除版本要么未定义，要么大于当前事务版本号。</p><p>INSERT：为插入的每一行保存当前系统版本号作为创建版本号。</p><p>DELETE：为删除的每一行保存当前系统版本号作为删除版本号。</p><p>UPDATE：插入一条新数据，保存当前系统版本号作为创建版本号。同时保存当前系统版本号作为原来的数据行删除版本号。</p><p>MVCC 只作用于 RC（Read Committed）和 RR（Repeatable Read）级别，因为 RU（Read Uncommitted）总是读取最新的数据版本，而不是符合当前事务版本的数据行。而 Serializable 则会对所有读取的行都加锁。这两种级别都不需要 MVCC 的帮助。</p><h1 id="什么是索引？"><a href="#什么是索引？" class="headerlink" title="什么是索引？"></a>什么是索引？</h1><p>MySQL 官方对索引的定义为：索引（Index）是帮助 MySQL 高效获取数据的数据结构。简单的理解，索引类似于字典里面的目录。</p><p>常见的索引类型有：hash、b树、b+树。</p><p>hash：底层就是 hash 表。进行查找时，根据 key 调用hash 函数获得对应的 hashcode，根据 hashcode 找到对应的数据行地址，根据地址拿到对应的数据。</p><p>B树：B树是一种多路搜索树，n 路搜索树代表每个节点最多有 n 个子节点。每个节点存储 key + 指向下一层节点的指针+ 指向 key 数据记录的地址。查找时，从根结点向下进行查找，直到找到对应的key。</p><p>B+树：B+树是b树的变种，主要区别在于：B+树的非叶子节点只存储 key + 指向下一层节点的指针。另外，B+树的叶子节点之间通过指针来连接，构成一个有序链表，因此对整棵树的遍历只需要一次线性遍历叶子结点即可。</p><h1 id="为什么MySQL数据库要用B-树存储索引？而不用红黑树、Hash、B树？"><a href="#为什么MySQL数据库要用B-树存储索引？而不用红黑树、Hash、B树？" class="headerlink" title="为什么MySQL数据库要用B+树存储索引？而不用红黑树、Hash、B树？"></a>为什么MySQL数据库要用B+树存储索引？而不用红黑树、Hash、B树？</h1><p>红黑树：如果在内存中，红黑树的查找效率比B树更高，但是涉及到磁盘操作，B树就更优了。因为红黑树是二叉树，数据量大时树的层数很高，从树的根结点向下寻找的过程，每读1个节点，都相当于一次IO操作，因此红黑树的I&#x2F;O操作会比B树多的多。</p><p>hash 索引：如果只查询单个值的话，hash 索引的效率非常高。但是 hash 索引有几个问题：</p><ol><li>不支持范围查询；</li><li>不支持索引值的排序操作；</li><li>不支持联合索引的最左匹配规则。</li></ol><p>B树索引：B树索相比于B+树，在进行范围查询时，需要做局部的中序遍历，可能要跨层访问，跨层访问代表着要进行额外的磁盘I&#x2F;O操作；另外，B树的非叶子节点存放了数据记录的地址，会导致存放的节点更少，树的层数变高。</p><h1 id="MySQL-中的索引叶子节点存放的是什么？"><a href="#MySQL-中的索引叶子节点存放的是什么？" class="headerlink" title="MySQL 中的索引叶子节点存放的是什么？"></a>MySQL 中的索引叶子节点存放的是什么？</h1><p>MyISAM和InnoDB都是采用的B+树作为索引结构，但是叶子节点的存储上有些不同。</p><p>MyISAM：主键索引和辅助索引（普通索引）的叶子节点都是存放 key 和 key 对应数据行的地址。在MyISAM 中，主键索引和辅助索引没有任何区别。</p><p>InnoDB：主键索引存放的是 key 和 key 对应的数据行。辅助索引存放的是 key 和 key 对应的主键值。因此在使用辅助索引时，通常需要检索两次索引，首先检索辅助索引获得主键值，然后用主键值到主键索引中检索获得记录。</p><h1 id="什么是聚簇索引（聚集索引）？"><a href="#什么是聚簇索引（聚集索引）？" class="headerlink" title="什么是聚簇索引（聚集索引）？"></a>什么是聚簇索引（聚集索引）？</h1><p>聚簇索引并不是一种单独的索引类型，而是一种数据存储方式。聚簇索引将索引和数据行放到了一块，找到索引也就找到了数据。因为无需进行回表操作，所以效率很高。</p><p>InnoDB 中必然会有，且只会有一个聚簇索引。通常是主键，如果没有主键，则优先选择非空的唯一索引，如果唯一索引也没有，则会创建一个隐藏的row_id 作为聚簇索引。至于为啥会只有一个聚簇索引，其实很简单，因为我们的数据只会存储一份。</p><p>而非聚簇索引则将数据存储和索引分开，找到索引后，需要通过对应的地址找到对应的数据行。MyISAM 的索引方式就是非聚簇索引。</p><h1 id="什么是回表查询？"><a href="#什么是回表查询？" class="headerlink" title="什么是回表查询？"></a>什么是回表查询？</h1><p>InnoDB 中，对于主键索引，只需要走一遍主键索引的查询就能在叶子节点拿到数据。</p><p>而对于普通索引，叶子节点存储的是 key + 主键值，因此需要再走一次主键索引，通过主键索引找到行记录，这就是所谓的回表查询，先定位主键值，再定位行记录。</p><h1 id="走普通索引，一定会出现回表查询吗？"><a href="#走普通索引，一定会出现回表查询吗？" class="headerlink" title="走普通索引，一定会出现回表查询吗？"></a>走普通索引，一定会出现回表查询吗？</h1><p>不一定，如果查询语句所要求的字段全部命中了索引，那么就不必再进行回表查询。</p><p>很容易理解，有一个 user 表，主键为 id，name 为普通索引，则再执行：select id, name from user where name &#x3D; ‘joonwhee’ 时，通过name 的索引就能拿到 id 和 name了，因此无需再回表去查数据行了。</p><h1 id="什么是覆盖索引（索引覆盖）吗？"><a href="#什么是覆盖索引（索引覆盖）吗？" class="headerlink" title="什么是覆盖索引（索引覆盖）吗？"></a>什么是覆盖索引（索引覆盖）吗？</h1><p>覆盖索引是 SQL-Server 中的一种说法，上面讲的例子其实就实现了覆盖索引。具体的：当索引上包含了查询语句中的所有列时，我们无需进行回表查询就能拿到所有的请求数据，因此速度会很快。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 面试八股 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程池篇</title>
      <link href="/2023/java-ba-gu-xian-cheng-chi/"/>
      <url>/2023/java-ba-gu-xian-cheng-chi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="为什么要使用线程池？直接new个线程不是很舒服？"><a href="#为什么要使用线程池？直接new个线程不是很舒服？" class="headerlink" title="为什么要使用线程池？直接new个线程不是很舒服？"></a>为什么要使用线程池？直接new个线程不是很舒服？</h1><p>使用线程池可以带来以下几个好处：</p><ol><li><p>降低资源消耗。通过重复利用已创建的线程，降低线程创建和销毁造成的消耗。</p></li><li><p>提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行。</p></li><li><p>增加线程的可管理型。线程是稀缺资源，使用线程池可以进行统一分配，调优和监控。</p><span id="more"></span></li></ol><h1 id="线程池的核心属性有哪些？"><a href="#线程池的核心属性有哪些？" class="headerlink" title="线程池的核心属性有哪些？"></a>线程池的核心属性有哪些？</h1><p>threadFactory（线程工厂）：用于创建工作线程的工厂。</p><p>corePoolSize（核心线程数）：当线程池运行的线程少于 corePoolSize 时，将创建一个新线程来处理请求，即使其他工作线程处于空闲状态。</p><p>workQueue（队列）：用于保留任务并移交给工作线程的阻塞队列。</p><p>maximumPoolSize（最大线程数）：线程池允许开启的最大线程数。</p><p>handler（拒绝策略）：往线程池添加任务时，将在下面两种情况触发拒绝策略：1）线程池运行状态不是 RUNNING；2）线程池已经达到最大线程数，并且阻塞队列已满时。</p><p>keepAliveTime（保持存活时间）：如果线程池当前线程数超过 corePoolSize，则多余的线程空闲时间超过 keepAliveTime 时会被终止。</p><h1 id="线程池中的各个状态分别代表什么含义？"><a href="#线程池中的各个状态分别代表什么含义？" class="headerlink" title="线程池中的各个状态分别代表什么含义？"></a>线程池中的各个状态分别代表什么含义？</h1><p>线程池目前有5个状态：</p><p>RUNNING：接受新任务并处理排队的任务。</p><p>SHUTDOWN：不接受新任务，但处理排队的任务。</p><p>STOP：不接受新任务，不处理排队的任务，并中断正在进行的任务。</p><p>TIDYING：所有任务都已终止，workerCount 为零，线程转换到 TIDYING 状态将运行 terminated() 钩子方法。</p><p>TERMINATED：terminated() 已完成。</p><p><img src="https://fmphoto.oss-cn-chengdu.aliyuncs.com/Photo/aHR0cHM6Ly9tbWJpei5xcGljLmNuL3N6X21tYml6X3BuZy9LUlJ4dnFHY2ljWkh6RlM2UE9nNlRnaWNpY3Y1SU10TGliV2pHODFzOHF1TFByWWw.png"></p><h1 id="使用队列有什么需要注意的吗？"><a href="#使用队列有什么需要注意的吗？" class="headerlink" title="使用队列有什么需要注意的吗？"></a>使用队列有什么需要注意的吗？</h1><p>使用有界队列时，需要注意线程池满了后，被拒绝的任务如何处理。</p><p>使用无界队列时，需要注意如果任务的提交速度大于线程池的处理速度，可能会导致内存溢出。</p><h1 id="线程池有哪些拒绝策略？"><a href="#线程池有哪些拒绝策略？" class="headerlink" title="线程池有哪些拒绝策略？"></a>线程池有哪些拒绝策略？</h1><p>常见的有以下几种：</p><p>AbortPolicy：中止策略。默认的拒绝策略，直接抛出 RejectedExecutionException。调用者可以捕获这个异常，然后根据需求编写自己的处理代码。</p><p>DiscardPolicy：抛弃策略。什么都不做，直接抛弃被拒绝的任务。</p><p>DiscardOldestPolicy：抛弃最老策略。抛弃阻塞队列中最老的任务，相当于就是队列中下一个将要被执行的任务，然后重新提交被拒绝的任务。如果阻塞队列是一个优先队列，那么“抛弃最旧的”策略将导致抛弃优先级最高的任务，因此最好不要将该策略和优先级队列放在一起使用。</p><p>CallerRunsPolicy：调用者运行策略。在调用者线程中执行该任务。该策略实现了一种调节机制，该策略既不会抛弃任务，也不会抛出异常，而是将任务回退到调用者（调用线程池执行任务的主线程），由于执行任务需要一定时间，因此主线程至少在一段时间内不能提交任务，从而使得线程池有时间来处理完正在执行的任务。</p><h1 id="如何终止线程池？"><a href="#如何终止线程池？" class="headerlink" title="如何终止线程池？"></a>如何终止线程池？</h1><p>终止线程池主要有两种方式：</p><p>shutdown：“温柔”的关闭线程池。不接受新任务，但是在关闭前会将之前提交的任务处理完毕。</p><p>shutdownNow：“粗暴”的关闭线程池，也就是直接关闭线程池，通过 Thread#interrupt() 方法终止所有线程，不会等待之前提交的任务执行完毕。但是会返回队列中未处理的任务。</p><h1 id="Executors-提供了哪些创建线程池的方法？"><a href="#Executors-提供了哪些创建线程池的方法？" class="headerlink" title="Executors 提供了哪些创建线程池的方法？"></a>Executors 提供了哪些创建线程池的方法？</h1><p>newFixedThreadPool：固定线程数的线程池。corePoolSize &#x3D; maximumPoolSize，keepAliveTime为0，工作队列使用无界的LinkedBlockingQueue。适用于为了满足资源管理的需求，而需要限制当前线程数量的场景，适用于负载比较重的服务器。</p><p>newSingleThreadExecutor：只有一个线程的线程池。corePoolSize &#x3D; maximumPoolSize &#x3D; 1，keepAliveTime为0， 工作队列使用无界的LinkedBlockingQueue。适用于需要保证顺序的执行各个任务的场景。</p><p>newCachedThreadPool： 按需要创建新线程的线程池。核心线程数为0，最大线程数为 Integer.MAX_VALUE，keepAliveTime为60秒，工作队列使用同步移交 SynchronousQueue。该线程池可以无限扩展，当需求增加时，可以添加新的线程，而当需求降低时会自动回收空闲线程。适用于执行很多的短期异步任务，或者是负载较轻的服务器。</p><p>newScheduledThreadPool：创建一个以延迟或定时的方式来执行任务的线程池，工作队列为 DelayedWorkQueue。适用于需要多个后台线程执行周期任务。</p><p>newWorkStealingPool：JDK 1.8 新增，用于创建一个可以窃取的线程池，底层使用 ForkJoinPool 实现。</p><h1 id="在我们实际使用中，线程池的大小配置多少合适？"><a href="#在我们实际使用中，线程池的大小配置多少合适？" class="headerlink" title="在我们实际使用中，线程池的大小配置多少合适？"></a>在我们实际使用中，线程池的大小配置多少合适？</h1><p>要想合理的配置线程池大小，首先我们需要区分任务是计算密集型还是I&#x2F;O密集型。</p><p>对于计算密集型，设置 线程数 &#x3D; CPU数 + 1，通常能实现最优的利用率。</p><p>对于I&#x2F;O密集型，网上常见的说法是设置 线程数 &#x3D; CPU数 * 2 ，这个做法是可以的，但个人觉得不是最优的。</p><p>在我们日常的开发中，我们的任务几乎是离不开I&#x2F;O的，常见的网络I&#x2F;O（RPC调用）、磁盘I&#x2F;O（数据库操作），并且I&#x2F;O的等待时间通常会占整个任务处理时间的很大一部分，在这种情况下，开启更多的线程可以让 CPU 得到更充分的使用，一个较合理的计算公式如下：</p><p>线程数 &#x3D; CPU数 * CPU利用率 * (任务等待时间 &#x2F; 任务计算时间 + 1)</p><p>例如我们有个定时任务，部署在4核的服务器上，该任务有100ms在计算，900ms在I&#x2F;O等待，则线程数约为：4 * 1 * (1 + 900 &#x2F; 100) &#x3D; 40个。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 面试八股 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题日志</title>
      <link href="/2023/leetcode/"/>
      <url>/2023/leetcode/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>种一棵树最好的时间是十年前，或者现在</p><span id="more"></span><p><strong>2023.3.14</strong></p><p>1.两数之和</p><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><p><strong>示例 1：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,7,11,15], target = 9</span><br><span class="line">输出：[0,1]</span><br><span class="line">解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</span><br></pre></td></tr></table></figure><details>   <summary>思路1:通过双循环暴力计算两个数的和；</summary>   <pre><code> class Solution &#123;        public int[] twoSum(int[] nums, int target) &#123;        int n = nums.length;        for (int i = 0; i < n; ++i) &#123;            for (int j = i + 1; j < n; ++j) &#123;                if (nums[i] + nums[j] == target) &#123;                    return new int[]&#123;i, j&#125;;                &#125;            &#125;        &#125;        return new int[0];    &#125;&#125; </code></pre> </details><p>思路二：使用哈希表建立索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">          Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">          <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)</span><br><span class="line">          &#123;</span><br><span class="line">              map(数组值，脚标);</span><br><span class="line">              <span class="comment">//循环比较如果 num[i] + map.get(数组值)（存在时）退出循环</span></span><br><span class="line">              <span class="keyword">if</span>(map.get(target - nums[i]) != <span class="literal">null</span>)</span><br><span class="line">              &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;map.get(target-nums[i]),i&#125;;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">//不存在则保存该值</span></span><br><span class="line">              map.put(nums[i],i);</span><br><span class="line">          &#125;</span><br><span class="line">        <span class="comment">//结束循环，不存在</span></span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="1624"><li>两个相同字符之间的最长子字符串</li></ol><p>给你一个字符串 <code>s</code>，请你返回 <strong>两个相同字符之间的最长子字符串的长度</strong> <em>，</em>计算长度时不含这两个字符。如果不存在这样的子字符串，返回 <code>-1</code> 。</p><p><strong>子字符串</strong> 是字符串中的一个连续字符序列。 </p><p><strong>示例 1：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;aa&quot;</span><br><span class="line">输出：0</span><br><span class="line">解释：最优的子字符串是两个 &#x27;a&#x27; 之间的空子字符串。</span><br></pre></td></tr></table></figure><p>思路：通过哈希表记录最开始出现的位置，然后比较后面的出现时距离</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxLengthBetweenEqualCharacters</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(s.length() &gt;&gt; <span class="number">1</span>);<span class="comment">//map&lt;字母，第一次位置&gt;</span></span><br><span class="line">        <span class="type">int</span> max=-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            <span class="comment">//获取当前字母，如果表内不存在则记录位置</span></span><br><span class="line">            <span class="keyword">if</span>(map.get(c)==<span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                map.put(c,i);</span><br><span class="line">                 <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        max = Math.max(max,i-map.get(c)-<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2023.3.20</strong></p><p>合并两个有序链表:</p><p>将两个升序链表合并为一个新的 <strong>升序</strong> 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>], l2 = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> &#123;</span><br><span class="line">     <span class="keyword">if</span>(l1==<span class="literal">null</span>)</span><br><span class="line">     <span class="keyword">return</span> l2;</span><br><span class="line">     <span class="keyword">else</span> <span class="keyword">if</span>(l2 == <span class="literal">null</span>)</span><br><span class="line">     <span class="keyword">return</span> l1;</span><br><span class="line">     <span class="keyword">if</span>(l1.val&lt;l2.val)</span><br><span class="line">     &#123;</span><br><span class="line">         l1.next = mergeTwoLists(l1.next,l2);</span><br><span class="line">         <span class="keyword">return</span> l1;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span>&#123;  </span><br><span class="line">         l2.next = mergeTwoLists(l2.next,l1);</span><br><span class="line">         <span class="keyword">return</span> l2;</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>删除排序链表中的重复元素</strong></p><p>给定一个已排序的链表的头 <code>head</code> ， <em>删除所有重复的元素，使每个元素只出现一次</em> 。返回 <em>已排序的链表</em> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,1,2,3,3]</span><br><span class="line">输出：[1,2,3]</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">deleteDuplicates</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line"><span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span> &amp;&amp; cur.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.val == cur.next.val) &#123;</span><br><span class="line">                cur.next = cur.next.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>环形链表</strong></p><p>给你一个链表的头节点 <code>head</code> ，判断链表中是否有环。</p><p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。注意：<code>pos</code> 不作为参数进行传递 。仅仅是为了标识链表的实际情况。</p><p><em>如果链表中存在环</em> ，则返回 <code>true</code> 。 否则，返回 <code>false</code> 。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [3,2,0,-4], pos = 1</span><br><span class="line">输出：true</span><br><span class="line">解释：链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>( head == <span class="literal">null</span> ||head.next == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span>head.next;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span>head;</span><br><span class="line">        <span class="keyword">while</span>(fast!=slow)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(fast==<span class="literal">null</span> || fast.next==<span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>只出现一次的数字</strong></p><p>给你一个 <strong>非空</strong> 整数数组 <code>nums</code> ，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p><p>你必须设计并实现线性时间复杂度的算法来解决此问题，且该算法只使用常量额外空间。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,2,1]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">singleNumber</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        Set&lt;Integer&gt; Net = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> num : nums)</span><br><span class="line">            &#123;<span class="comment">//当他无法被加入时删除他</span></span><br><span class="line">                <span class="keyword">if</span>(!Net.add(num))</span><br><span class="line">                Net.remove(num);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Net.isEmpty()?-<span class="number">1</span>:Net.iterator().next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">singleNumber</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">reduce</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//使用异或，将相同的两个数字抵消</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            reduce =  reduce ^ num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> reduce;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2023.3.25</strong></p><p><strong>无重复字符的最长子串</strong></p><p>定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;abcabcbb&quot;</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length(), ans = <span class="number">0</span>;</span><br><span class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> <span class="number">0</span>, start = <span class="number">0</span>; end &lt; n; end++) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">alpha</span> <span class="operator">=</span> s.charAt(end);</span><br><span class="line">            <span class="comment">//如果已经出现过，则更新左下标</span></span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(alpha)) &#123;</span><br><span class="line">                <span class="comment">//抛弃上一次的重复字符</span></span><br><span class="line">                start = Math.max(map.get(alpha), start);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//计算无重复字串长度，取最大</span></span><br><span class="line">            ans = Math.max(ans, end - start + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">//记录字符最新位置</span></span><br><span class="line">            map.put(alpha, end + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 力扣记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis基础</title>
      <link href="/2023/redis-ji-chu-pian/"/>
      <url>/2023/redis-ji-chu-pian/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="一、Redis入门"><a href="#一、Redis入门" class="headerlink" title="一、Redis入门"></a>一、Redis入门</h1><h2 id="1-认识NoSQL"><a href="#1-认识NoSQL" class="headerlink" title="1.认识NoSQL"></a>1.认识NoSQL</h2><h3 id="1-1什么是NoSQL"><a href="#1-1什么是NoSQL" class="headerlink" title="1.1什么是NoSQL"></a>1.1什么是NoSQL</h3><hr><ul><li><p>NoSQL最常见的解释是”<code>non-relational</code>“， 很多人也说它是”<em><strong>Not Only SQL</strong></em>“</p></li><li><p>NoSQL仅仅是一个概念，泛指<strong>非关系型的数据库</strong></p></li><li><p>区别于关系数据库，它们不保证关系数据的ACID特性</p></li><li><p>NoSQL是一项全新的数据库革命性运动，提倡运用非关系型的数据存储，相对于铺天盖地的关系型数据库运用，这一概念无疑是一种全新的思维的注入</p></li><li><p>常见的NoSQL数据库有：<code>Redis</code>、<code>MemCache</code>、<code>MongoDB</code>等</p><span id="more"></span></li></ul><h3 id="1-2NoSQL与SQL的差异"><a href="#1-2NoSQL与SQL的差异" class="headerlink" title="1.2NoSQL与SQL的差异"></a>1.2NoSQL与SQL的差异</h3><hr><table><thead><tr><th align="center"></th><th align="center">SQL</th><th align="center">NoSQL</th></tr></thead><tbody><tr><td align="center">数据结构</td><td align="center">结构化</td><td align="center">非结构化</td></tr><tr><td align="center">数据关联</td><td align="center">关联的</td><td align="center">无关联的</td></tr><tr><td align="center">查询方式</td><td align="center">SQL查询</td><td align="center">非SQL</td></tr><tr><td align="center">事务特性</td><td align="center">ACID</td><td align="center">BASE</td></tr><tr><td align="center">存储方式</td><td align="center">磁盘</td><td align="center">内存</td></tr><tr><td align="center">扩展性</td><td align="center">垂直</td><td align="center">水平</td></tr><tr><td align="center">使用场景</td><td align="center">1）数据结构固定<br>2）相关业务对数据安全性、一致性要求较高</td><td align="center">1）数据结构不固定<br>2）对一致性、安全性要求不高<br>3）对性能要求</td></tr></tbody></table><h2 id="2-认识Redis"><a href="#2-认识Redis" class="headerlink" title="2.认识Redis"></a>2.认识Redis</h2><blockquote><p>Redis诞生于2009年全称是Remote Dictionary Server，远程词典服务器，是一个基于内存的键值型NoSQL数据库。</p></blockquote><p><strong>Redis的特征：</strong></p><ul><li>键值（<code>key-value</code>）型，value支持多种不同数据结构，功能丰富</li><li>单线程，每个命令具备原子性</li><li>低延迟，速度快（基于内存、IO多路复用、良好的编码）。</li><li>支持数据持久化</li><li>支持主从集群、分片集群</li><li>支持多语言客户端</li></ul><h2 id="3-安装Redis"><a href="#3-安装Redis" class="headerlink" title="3.安装Redis"></a>3.安装Redis</h2><h3 id="3-1前置准备"><a href="#3-1前置准备" class="headerlink" title="3.1前置准备"></a>3.1前置准备</h3><hr><blockquote><p>本次安装Redis是基于Linux系统下安装的，因此需要一台Linux服务器或者虚拟机。</p><p>Ps：由于提供的CentOS操作系统为mini版，因此需要自行配置网络，不会配置的请联系我，如果您使用的是自己购买的服务器，请提前开放<code>6379</code>端口，避免后续出现的莫名其妙的错误！</p></blockquote><ul><li><p><strong>虚拟机</strong>：<a href="https://pan.baidu.com/s/1Zn13h9G7MtSgz-xdkQFeJg?pwd=1234">VMware16</a></p></li><li><p><strong>操作系统</strong>：<a href="https://pan.baidu.com/s/1SiYip29cYqiNBqjGGV0JgA?pwd=1234">CentOS-7-x86_64-Minimal-1708</a></p></li><li><p><strong>Redis</strong>：<a href="https://pan.baidu.com/s/1hsoEz1NTCDCCWZmaiZrIgg?pwd=1234">redis-6.2.6.tar</a></p></li><li><p><strong>xShell及xFtp</strong>：<a href="https://www.xshell.com/zh/free-for-home-school/">https://www.xshell.com/zh/free-for-home-school/</a></p></li></ul><h3 id="3-2安装Redis依赖"><a href="#3-2安装Redis依赖" class="headerlink" title="3.2安装Redis依赖"></a>3.2安装Redis依赖</h3><hr><blockquote><p>Redis是基于C语言编写的，因此首先需要安装Redis所需要的gcc依赖</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc tcl</span><br></pre></td></tr></table></figure><p><strong>安装成功如下图所示：</strong></p><p><img src="https://fmphoto.oss-cn-chengdu.aliyuncs.com/Photo/redis-5.png" alt="image-20220524181842626"></p><h3 id="3-3正式安装Redis"><a href="#3-3正式安装Redis" class="headerlink" title="3.3正式安装Redis"></a>3.3正式安装Redis</h3><hr><ul><li><p><strong>将<code>redis-6.2.6.tar</code>上传至<code>/usr/local/src</code>目录</strong></p><p><img src="https://fmphoto.oss-cn-chengdu.aliyuncs.com/Photo/redis-4.png" alt="image-20220524185659727"></p></li><li><p><strong>在xShell中<code>cd</code>到<code>/usr/local/src</code>目录执行以下命令进行解压操作</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzf redis-6.2.6.tar.gz</span><br></pre></td></tr></table></figure></li><li><p><strong>解压成功后依次执行以下命令</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> redis-6.2.6</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></li><li><p><strong>安装成功后打开&#x2F;usr&#x2F;local&#x2F;bin目录（该目录为Redis默认的安装目录）</strong></p><p><img src="https://fmphoto.oss-cn-chengdu.aliyuncs.com/Photo/redis-3.png" alt="image-20220524190400547"></p></li></ul><h2 id="4-启动Redis"><a href="#4-启动Redis" class="headerlink" title="4.启动Redis"></a>4.启动Redis</h2><blockquote><p>Redis的启动方式有很多种，例如：<strong>前台启动</strong>、<strong>后台启动</strong>、<strong>开机自启</strong></p></blockquote><h3 id="4-1前台启动（不推荐）"><a href="#4-1前台启动（不推荐）" class="headerlink" title="4.1前台启动（不推荐）"></a>4.1前台启动（不推荐）</h3><hr><blockquote><p><strong>这种启动属于前台启动，会阻塞整个会话窗口，窗口关闭或者按下<code>CTRL + C</code>则Redis停止。不推荐使用。</strong></p></blockquote><ul><li><p><strong>安装完成后，在任意目录输入<code>redis-server</code>命令即可启动Redis</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server</span><br></pre></td></tr></table></figure></li><li><p><strong>启动成功如下图所示</strong></p><p><img src="https://fmphoto.oss-cn-chengdu.aliyuncs.com/Photo/redis-2.png" alt="image-20220524191137983"></p></li></ul><h3 id="4-2后台启动（不推荐）"><a href="#4-2后台启动（不推荐）" class="headerlink" title="4.2后台启动（不推荐）"></a>4.2后台启动（不推荐）</h3><hr><blockquote><p><strong>如果要让Redis以后台方式启动，则必须修改Redis配置文件，配置文件所在目录就是之前我们解压的安装包下</strong></p></blockquote><ul><li><p><strong>因为我们要修改配置文件，因此我们需要先将原文件备份一份</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/src/redis-6.2.6</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> redis.conf redis.conf.bck</span><br></pre></td></tr></table></figure></li><li><p><strong>然后修改<code>redis.conf</code>文件中的一些配置</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 允许访问的地址，默认是127.0.0.1，会导致只能在本地访问。修改为0.0.0.0则可以在任意IP访问，生产环境不要设置为0.0.0.0</span></span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0</span><br><span class="line"><span class="comment"># 守护进程，修改为yes后即可后台运行</span></span><br><span class="line">daemonize <span class="built_in">yes</span> </span><br><span class="line"><span class="comment"># 密码，设置后访问Redis必须输入密码</span></span><br><span class="line">requirepass 1325</span><br></pre></td></tr></table></figure></li><li><p><strong>Redis其他常用配置</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 监听的端口</span></span><br><span class="line">port 6379</span><br><span class="line"><span class="comment"># 工作目录，默认是当前目录，也就是运行redis-server时的命令，日志、持久化等文件会保存在这个目录</span></span><br><span class="line"><span class="built_in">dir</span> .</span><br><span class="line"><span class="comment"># 数据库数量，设置为1，代表只使用1个库，默认有16个库，编号0~15</span></span><br><span class="line">databases 1</span><br><span class="line"><span class="comment"># 设置redis能够使用的最大内存</span></span><br><span class="line">maxmemory 512mb</span><br><span class="line"><span class="comment"># 日志文件，默认为空，不记录日志，可以指定日志文件名</span></span><br><span class="line">logfile <span class="string">&quot;redis.log&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>启动Redis</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入redis安装目录 </span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/src/redis-6.2.6</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">redis-server redis.conf</span><br></pre></td></tr></table></figure></li><li><p><strong>停止Redis服务</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过kill命令直接杀死进程</span></span><br><span class="line"><span class="built_in">kill</span> -9 redis进程<span class="built_in">id</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用redis-cli来执行 shutdown 命令，即可停止 Redis 服务，</span></span><br><span class="line"><span class="comment"># 因为之前配置了密码，因此需要通过 -a 来指定密码</span></span><br><span class="line">redis-cli -a 132537 shutdown</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-3开机自启（推荐）"><a href="#4-3开机自启（推荐）" class="headerlink" title="4.3开机自启（推荐）"></a>4.3开机自启（推荐）</h3><hr><blockquote><p><strong>我们也可以通过配置来实现开机自启</strong></p></blockquote><ul><li><p><strong>首先，新建一个系统服务文件</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/systemd/system/redis.service</span><br></pre></td></tr></table></figure></li><li><p><strong>将以下命令粘贴进去</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=redis-server</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/bin/redis-server /usr/local/src/redis-6.2.6/redis.conf</span><br><span class="line">PrivateTmp=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li><li><p><strong>然后重载系统服务</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure></li><li><p><strong>现在，我们可以用下面这组命令来操作redis了</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start redis</span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">systemctl stop redis</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">systemctl restart redis</span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">systemctl status redis</span><br></pre></td></tr></table></figure></li><li><p><strong>执行下面的命令，可以让redis开机自启</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> redis</span><br></pre></td></tr></table></figure></li></ul><h1 id="二、Redis常见命令"><a href="#二、Redis常见命令" class="headerlink" title="二、Redis常见命令"></a>二、Redis常见命令</h1><blockquote><p>我们可以通过Redis的中文文档：<a href="http://www.redis.cn/commands.html%EF%BC%8C%E6%9D%A5%E5%AD%A6%E4%B9%A0%E5%90%84%E7%A7%8D%E5%91%BD%E4%BB%A4%E3%80%82">http://www.redis.cn/commands.html，来学习各种命令。</a></p><p>也可以通过菜鸟教程官网来学习：<a href="https://www.runoob.com/redis/redis-keys.html">https://www.runoob.com/redis/redis-keys.html</a></p></blockquote><h2 id="1-Redis数据结构介绍"><a href="#1-Redis数据结构介绍" class="headerlink" title="1.Redis数据结构介绍"></a>1.Redis数据结构介绍</h2><blockquote><p><strong>Redis是一个key-value的数据库，key一般是String类型，不过value的类型多种多样</strong></p></blockquote><p><img src="https://fmphoto.oss-cn-chengdu.aliyuncs.com/Photo/redis01.png" alt="image-20220524205926164"></p><h2 id="2-通用命令"><a href="#2-通用命令" class="headerlink" title="2.通用命令"></a>2.通用命令</h2><blockquote><p><strong>通用指令是部分数据类型的，都可以使用的指令，常见的有如下表格所示</strong></p></blockquote><table><thead><tr><th align="center">指令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">KEYS</td><td align="center">查看符合模板的所有key，不建议在生产环境设备上使用</td></tr><tr><td align="center">DEL</td><td align="center">删除一个指定的key</td></tr><tr><td align="center">EXISTS</td><td align="center">判断key是否存在</td></tr><tr><td align="center">EXPIRE</td><td align="center">给一个key设置有效期，有效期到期时该key会被自动删除</td></tr><tr><td align="center">TTL</td><td align="center">查看一个KEY的剩余有效期</td></tr></tbody></table><p><strong>可以通过<code>help [command] </code>可以查看一个命令的具体用法！</strong></p><h2 id="3-String类型"><a href="#3-String类型" class="headerlink" title="3.String类型"></a>3.String类型</h2><blockquote><p><strong>String类型，也就是字符串类型，是Redis中最简单的存储类型。</strong></p></blockquote><p>其value是字符串，不过根据字符串的格式不同，又可以分为3类：</p><ul><li><code>string</code>：普通字符串</li><li><code>int</code>：整数类型，可以做自增、自减操作</li><li><code>float</code>：浮点类型，可以做自增、自减操作</li></ul><blockquote><p>不管是哪种格式，底层都是字节数组形式存储，只不过是编码方式不同。字符串类型的最大空间不能超过<strong>512m</strong>.</p></blockquote><table><thead><tr><th align="center">KEY</th><th align="center">VALUE</th></tr></thead><tbody><tr><td align="center">msg</td><td align="center">hello world</td></tr><tr><td align="center">num</td><td align="center">10</td></tr><tr><td align="center">score</td><td align="center">92.5</td></tr></tbody></table><blockquote><p><strong>String的常见命令有如下表格所示</strong></p></blockquote><table><thead><tr><th align="center">命令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">SET</td><td align="center">添加或者修改已经存在的一个String类型的键值对</td></tr><tr><td align="center">GET</td><td align="center">根据key获取String类型的value</td></tr><tr><td align="center">MSET</td><td align="center">批量添加多个String类型的键值对</td></tr><tr><td align="center">MGET</td><td align="center">根据多个key获取多个String类型的value</td></tr><tr><td align="center">INCR</td><td align="center">让一个整型的key自增1</td></tr><tr><td align="center">INCRBY</td><td align="center">让一个整型的key自增并指定步长，例如：incrby num 2 让num值自增2</td></tr><tr><td align="center">INCRBYFLOAT</td><td align="center">让一个浮点类型的数字自增并指定步长</td></tr><tr><td align="center">SETNX</td><td align="center">添加一个String类型的键值对，前提是这个key不存在，否则不执行</td></tr><tr><td align="center"><strong>SETEX</strong></td><td align="center">添加一个String类型的键值对，并且指定有效期</td></tr></tbody></table><blockquote><p><strong>Redis的key允许有多个单词形成层级结构，多个单词之间用” ：“隔开，格式如下：</strong></p></blockquote><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">项目名:业务名:类型:id</span><br></pre></td></tr></table></figure><p>这个格式并非固定，也可以根据自己的需求来删除或添加词条。</p><p>例如我们的项目名称叫 <code>heima</code>，有<code>user</code>和<code>product</code>两种不同类型的数据，我们可以这样定义key：</p><ul><li><strong>user</strong>相关的key：<code>heima:user:1</code></li><li><strong>product</strong>相关的key：<code>heima:product:1</code></li></ul><p>如果Value是一个Java对象，例如一个User对象，则可以将对象序列化为JSON字符串后存储</p><table><thead><tr><th align="center">KEY</th><th align="center">VALUE</th></tr></thead><tbody><tr><td align="center">heima:user:1</td><td align="center">{“id”:1, “name”: “Jack”, “age”: 21}</td></tr><tr><td align="center">heima:product:1</td><td align="center">{“id”:1, “name”: “小米11”, “price”: 4999}</td></tr></tbody></table><h2 id="4-Hash类型"><a href="#4-Hash类型" class="headerlink" title="4.Hash类型"></a>4.Hash类型</h2><blockquote><p><strong>Hash类型，也叫散列，其value是一个无序字典，类似于Java中的<code>HashMap</code>结构。</strong></p></blockquote><ul><li><p><strong>Hash结构可以将对象中的每个字段独立存储，可以针对单个字段做CRUD</strong></p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/Redis/image-20220525001227167.png" alt="image-20220525001227167"  /></li><li><p><strong>Hash的常见命令有：</strong></p><table><thead><tr><th align="center">命令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">HSET key field value</td><td align="center">添加或者修改hash类型key的field的值</td></tr><tr><td align="center">HGET key field</td><td align="center">获取一个hash类型key的field的值</td></tr><tr><td align="center">HMSET</td><td align="center">hmset 和 hset 效果相同 ，4.0之后hmset可以弃用了</td></tr><tr><td align="center">HMGET</td><td align="center">批量获取多个hash类型key的field的值</td></tr><tr><td align="center">HGETALL</td><td align="center">获取一个hash类型的key中的所有的field和value</td></tr><tr><td align="center">HKEYS</td><td align="center">获取一个hash类型的key中的所有的field</td></tr><tr><td align="center">HVALS</td><td align="center">获取一个hash类型的key中的所有的value</td></tr><tr><td align="center">HINCRBY</td><td align="center">让一个hash类型key的字段值自增并指定步长</td></tr><tr><td align="center">HSETNX</td><td align="center">添加一个hash类型的key的field值，前提是这个field不存在，否则不执行</td></tr></tbody></table></li></ul><h2 id="5-List类型"><a href="#5-List类型" class="headerlink" title="5.List类型"></a>5.List类型</h2><blockquote><p><strong>Redis中的List类型与Java中的LinkedList类似，可以看做是一个双向链表结构。既可以支持正向检索和也可以支持反向检索。</strong></p></blockquote><p><strong>特征也与<code>LinkedList</code>类似：</strong></p><ul><li>有序</li><li>元素可以重复</li><li>插入和删除快</li><li>查询速度一般</li></ul><p>常用来存储一个有序数据，例如：朋友圈点赞列表，评论列表等.</p><blockquote><p><strong>List的常见命令有</strong></p></blockquote><table><thead><tr><th align="center">命令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">LPUSH key  element …</td><td align="center">向列表左侧插入一个或多个元素</td></tr><tr><td align="center">LPOP key</td><td align="center">移除并返回列表左侧的第一个元素，没有则返回nil</td></tr><tr><td align="center"><strong>RPUSH key  element …</strong></td><td align="center">向列表右侧插入一个或多个元素</td></tr><tr><td align="center">RPOP key</td><td align="center">移除并返回列表右侧的第一个元素</td></tr><tr><td align="center">LRANGE key star end</td><td align="center">返回一段角标范围内的所有元素</td></tr><tr><td align="center">BLPOP和BRPOP</td><td align="center">与LPOP和RPOP类似，只不过在没有元素时等待指定时间，而不是直接返回nil</td></tr></tbody></table><p><img src="https://fmphoto.oss-cn-chengdu.aliyuncs.com/Photo/new.gif" alt="new"></p><blockquote><p><strong>思考问题</strong></p></blockquote><ul><li><p><strong>如何利用List结构模拟一个栈?</strong></p><ul><li>先进后出，入口和出口在同一边</li></ul></li><li><p><strong>如何利用List结构模拟一个队列?</strong></p><ul><li>先进先出，入口和出口在不同边</li></ul></li><li><p><strong>如何利用List结构模拟一个阻塞队列?</strong></p><ul><li>入口和出口在不同边</li><li>出队时采用BLPOP或BRPOP</li></ul></li></ul><h2 id="6-Set类型"><a href="#6-Set类型" class="headerlink" title="6.Set类型"></a>6.Set类型</h2><blockquote><p><strong>Redis的Set结构与Java中的HashSet类似，可以看做是一个value为null的HashMap。因为也是一个hash表，因此具备与HashSet类似的特征</strong></p></blockquote><ul><li>无序</li><li>元素不可重复</li><li>查找快</li><li>支持交集、并集、差集等功能</li></ul><blockquote><p><strong>Set的常见命令有</strong></p></blockquote><table><thead><tr><th align="center">命令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">SADD key member …</td><td align="center">向set中添加一个或多个元素</td></tr><tr><td align="center">SREM key member …</td><td align="center">移除set中的指定元素</td></tr><tr><td align="center">SCARD key</td><td align="center">返回set中元素的个数</td></tr><tr><td align="center">SISMEMBER key member</td><td align="center">判断一个元素是否存在于set中</td></tr><tr><td align="center">SMEMBERS</td><td align="center">获取set中的所有元素</td></tr><tr><td align="center">SINTER key1 key2 …</td><td align="center">求key1与key2的交集</td></tr><tr><td align="center">SDIFF key1 key2 …</td><td align="center">求key1与key2的差集</td></tr><tr><td align="center">SUNION key1 key2 ..</td><td align="center">求key1和key2的并集</td></tr></tbody></table><blockquote><p><strong>交集、差集、并集图示</strong></p></blockquote><p><img src="https://fmphoto.oss-cn-chengdu.aliyuncs.com/Photo/redis-6.png" alt="image-20220525112632214"></p><h2 id="7-SortedSet类型"><a href="#7-SortedSet类型" class="headerlink" title="7.SortedSet类型"></a>7.SortedSet类型</h2><blockquote><p><strong>Redis的SortedSet是一个可排序的set集合，与Java中的TreeSet有些类似，但底层数据结构却差别很大。SortedSet中的每一个元素都带有一个score属性，可以基于score属性对元素排序，底层的实现是一个跳表（SkipList）加 hash表。</strong></p></blockquote><p><strong>SortedSet具备下列特性：</strong></p><ul><li>可排序</li><li>元素不重复</li><li>查询速度快</li></ul><p>因为SortedSet的可排序特性，经常被用来实现排行榜这样的功能。</p><blockquote><p><strong>SortedSet的常见命令有</strong></p></blockquote><table><thead><tr><th align="center">命令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">ZADD key score member</td><td align="center">添加一个或多个元素到sorted set ，如果已经存在则更新其score值</td></tr><tr><td align="center">ZREM key member</td><td align="center">删除sorted set中的一个指定元素</td></tr><tr><td align="center">ZSCORE key member</td><td align="center">获取sorted set中的指定元素的score值</td></tr><tr><td align="center">ZRANK key member</td><td align="center">获取sorted set 中的指定元素的排名</td></tr><tr><td align="center">ZCARD key</td><td align="center">获取sorted set中的元素个数</td></tr><tr><td align="center">ZCOUNT key min max</td><td align="center">统计score值在给定范围内的所有元素的个数</td></tr><tr><td align="center">ZINCRBY key increment member</td><td align="center">让sorted set中的指定元素自增，步长为指定的increment值</td></tr><tr><td align="center">ZRANGE key min max</td><td align="center">按照score排序后，获取指定排名范围内的元素</td></tr><tr><td align="center">ZRANGEBYSCORE key min max</td><td align="center">按照score排序后，获取指定score范围内的元素</td></tr><tr><td align="center">ZDIFF、ZINTER、ZUNION</td><td align="center">求差集、交集、并集</td></tr></tbody></table><p><strong>注意：所有的排名默认都是升序，如果要降序则在命令的Z后面添加<code>REV</code>即可</strong></p><h1 id="三、Redis客户端"><a href="#三、Redis客户端" class="headerlink" title="三、Redis客户端"></a>三、Redis客户端</h1><blockquote><p>安装完成Redis，我们就可以操作Redis，实现数据的CRUD了。这需要用到Redis客户端，包括：</p></blockquote><ul><li><strong>命令行客户端</strong></li><li><strong>图形化桌面客户端</strong></li><li><strong>编程客户端</strong></li></ul><h2 id="1-命令行客户端"><a href="#1-命令行客户端" class="headerlink" title="1.命令行客户端"></a>1.命令行客户端</h2><ul><li><p><strong>Redis安装完成后就自带了命令行客户端：<code>redis-cli</code>，使用方式如下：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli [options] [commonds]</span><br></pre></td></tr></table></figure></li><li><p><strong>其中常见的<code>options</code>有：</strong></p><ul><li><code>-h 127.0.0.1</code>：指定要连接的redis节点的IP地址，默认是127.0.0.1</li><li><code>-p 6379</code>：指定要连接的redis节点的端口，默认是6379</li><li><code>-a 132537</code>：指定redis的访问密码</li></ul></li><li><p><strong>其中的<code>commonds</code>就是Redis的操作命令，例如：</strong></p><ul><li><code>ping</code>：与redis服务端做心跳测试，服务端正常会返回<code>pong</code></li><li>不指定commond时，会进入<code>redis-cli</code>的交互控制台：</li></ul></li></ul><p><img src="https://fmphoto.oss-cn-chengdu.aliyuncs.com/Photo/redis-7.png" alt="image-20220524201258092"></p><h2 id="2-图形化客户端"><a href="#2-图形化客户端" class="headerlink" title="2.图形化客户端"></a>2.图形化客户端</h2><blockquote><p>下载地址：<a href="https://pan.baidu.com/s/1sxQTOt-A5MCvVZnlgDf0eA?pwd=1234">https://pan.baidu.com/s/1sxQTOt-A5MCvVZnlgDf0eA?pwd=1234</a> </p></blockquote><ul><li><p><strong>安装图形化客户端</strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">安装步骤过于简单不再演示</span><br></pre></td></tr></table></figure></li><li><p><strong>如何连接到Redis</strong></p><img src="https://fmphoto.oss-cn-chengdu.aliyuncs.com/Photo/redis-8.png" alt="image-20220524202853286" style="zoom:80%;" /></li><li><p><strong>连接成功后如图所示</strong></p><img src="https://fmphoto.oss-cn-chengdu.aliyuncs.com/Photo/redis-9.png" alt="image-20220524203745436" style="zoom:80%;" /></li></ul><h2 id="3-Java客户端"><a href="#3-Java客户端" class="headerlink" title="3.Java客户端"></a>3.Java客户端</h2><h3 id="3-1Jedis快速入门"><a href="#3-1Jedis快速入门" class="headerlink" title="3.1Jedis快速入门"></a>3.1Jedis快速入门</h3><hr><blockquote><p>Jedis的官网地址： <a href="https://github.com/redis/jedis%EF%BC%8C%E6%88%91%E4%BB%AC%E5%85%88%E6%9D%A5%E4%B8%AA%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%EF%BC%9A">https://github.com/redis/jedis，我们先来个快速入门：</a></p></blockquote><ul><li><p><strong>新建一个Maven工程并引入以下依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入Jedis依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入单元测试依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>编写测试类并与Redis建立连接</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Jedis jedis;</span><br><span class="line"></span><br><span class="line"><span class="meta">@BeforeEach</span> <span class="comment">//被该注解修饰的方法每次执行其他方法前自动执行</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 1. 获取连接</span></span><br><span class="line">    jedis = <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.230.88&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">    <span class="comment">// 2. 设置密码</span></span><br><span class="line">    jedis.auth(<span class="string">&quot;132537&quot;</span>);</span><br><span class="line">    <span class="comment">// 3. 选择库（默认是下标为0的库）</span></span><br><span class="line">    jedis.select(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>编写一个操作数据的方法（这里以操作String类型为例）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testString</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 1.往redis中存放一条String类型的数据并获取返回结果</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> jedis.set(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;https://www.oz6.cn&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.从redis中获取一条数据</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> jedis.get(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;url = &quot;</span> + url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>最后不要忘记编写一个释放资源的方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterEach</span> <span class="comment">//被该注解修饰的方法会在每次执行其他方法后执行</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 1.释放资源</span></span><br><span class="line">    <span class="keyword">if</span> (jedis != <span class="literal">null</span>)&#123;</span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>执行<code>testString()</code>方法后测试结果如图所示</strong></p><p><img src="https://fmphoto.oss-cn-chengdu.aliyuncs.com/Photo/redis-10.png" alt="image-20220525131017888"></p></li></ul><h3 id="3-2Jedis连接池"><a href="#3-2Jedis连接池" class="headerlink" title="3.2Jedis连接池"></a>3.2Jedis连接池</h3><hr><blockquote><p><strong>Jedis本身是线程不安全的，并且频繁的创建和销毁连接会有性能损耗，因此我们推荐大家使用Jedis连接池代替Jedis的直连方式</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JedisConnectionFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> JedisPool jedisPool;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//配置连接池</span></span><br><span class="line">        <span class="type">JedisPoolConfig</span> <span class="variable">jedisPoolConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPoolConfig</span>();</span><br><span class="line">        jedisPoolConfig.setMaxTotal(<span class="number">8</span>);</span><br><span class="line">        jedisPoolConfig.setMaxIdle(<span class="number">8</span>);</span><br><span class="line">        jedisPoolConfig.setMinIdle(<span class="number">0</span>);</span><br><span class="line">        jedisPoolConfig.setMaxWaitMillis(<span class="number">200</span>);</span><br><span class="line">        <span class="comment">//创建连接池对象</span></span><br><span class="line">        jedisPool = <span class="keyword">new</span> <span class="title class_">JedisPool</span>(jedisPoolConfig,<span class="string">&quot;192.168.230.88&quot;</span>,<span class="number">6379</span>,<span class="number">1000</span>,<span class="string">&quot;132537&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title function_">getJedis</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> jedisPool.getResource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-3SpringDataRedis介绍"><a href="#3-3SpringDataRedis介绍" class="headerlink" title="3.3SpringDataRedis介绍"></a>3.3SpringDataRedis介绍</h3><hr><blockquote><p><strong>SpringData是Spring中数据操作的模块，包含对各种数据库的集成，其中对Redis的集成模块就叫做<code>SpringDataRedis</code></strong></p><p><strong>官网地址</strong>：<a href="https://spring.io/projects/spring-data-redis">https://spring.io/projects/spring-data-redis</a></p></blockquote><ul><li>提供了对不同Redis客户端的整合（<code>Lettuce</code>和<code>Jedis</code>）</li><li>提供了<code>RedisTemplate</code>统一API来操作Redis</li><li>支持Redis的发布订阅模型</li><li>支持Redis哨兵和Redis集群</li><li>支持基于Lettuce的响应式编程</li><li>支持基于JDK、JSON、字符串、Spring对象的数据序列化及反序列化</li><li>支持基于Redis的JDKCollection实现</li></ul><blockquote><p><strong>SpringDataRedis中提供了RedisTemplate工具类，其中封装了各种对Redis的操作。并且将不同数据类型的操作API封装到了不同的类型中：</strong></p></blockquote><p><img src="https://fmphoto.oss-cn-chengdu.aliyuncs.com/Photo/redis11.png" alt="image-20220525140217446"></p><h3 id="3-4-SpringDataRedis快速入门"><a href="#3-4-SpringDataRedis快速入门" class="headerlink" title="3.4 SpringDataRedis快速入门"></a>3.4 SpringDataRedis快速入门</h3><hr><blockquote><p><strong><code>SpringBoot</code>已经提供了对<code>SpringDataRedis</code>的支持，使用非常简单</strong></p></blockquote><ul><li><p><strong>首先新建一个Spring Boot工程</strong></p><p><img src="https://fmphoto.oss-cn-chengdu.aliyuncs.com/Photo/redis-12.png" alt="image-20220525141608974"></p></li><li><p><strong>然后引入连接池依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--连接池依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>编写配置文件<code>application.yml</code>（连接池的配置在实际开发中是根据需求来的）</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.230</span><span class="number">.88</span> <span class="comment">#指定redis所在的host</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span>  <span class="comment">#指定redis的端口</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">132537</span>  <span class="comment">#设置redis密码</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span> <span class="comment">#最大连接数</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">8</span> <span class="comment">#最大空闲数</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span> <span class="comment">#最小空闲数</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="string">100ms</span> <span class="comment">#连接等待时间</span></span><br></pre></td></tr></table></figure></li><li><p><strong>编写测试类执行测试方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedisDemoApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 1.通过RedisTemplate获取操作String类型的ValueOperations对象</span></span><br><span class="line"><span class="type">ValueOperations</span> <span class="variable">ops</span> <span class="operator">=</span> redisTemplate.opsForValue();</span><br><span class="line"><span class="comment">// 2.插入一条数据</span></span><br><span class="line">ops.set(<span class="string">&quot;blogName&quot;</span>,<span class="string">&quot;Vz-Blog&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.获取数据</span></span><br><span class="line"><span class="type">String</span> <span class="variable">blogName</span> <span class="operator">=</span> (String) ops.get(<span class="string">&quot;blogName&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;blogName = &quot;</span> + blogName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-5RedisSerializer配置"><a href="#3-5RedisSerializer配置" class="headerlink" title="3.5RedisSerializer配置"></a>3.5RedisSerializer配置</h3><hr><blockquote><p><strong>RedisTemplate可以接收任意Object作为值写入Redis，只不过写入前会把Object序列化为字节形式，<code>默认是采用JDK序列化</code>，得到的结果是这样的</strong></p></blockquote><p><img src="https://fmphoto.oss-cn-chengdu.aliyuncs.com/Photo/redis-13.png" alt="image-20220525170205272"></p><p><strong>缺点：</strong></p><ul><li>可读性差</li><li>内存占用较大</li></ul><blockquote><p><strong>那么如何解决以上的问题呢？我们可以通过自定义RedisTemplate序列化的方式来解决。</strong></p></blockquote><ul><li><p><strong>编写一个配置类<code>RedisConfig</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String,Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建RedisTemplate对象</span></span><br><span class="line">        RedisTemplate&lt;String ,Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 2.设置连接工厂</span></span><br><span class="line">        redisTemplate.setConnectionFactory(factory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.创建序列化对象</span></span><br><span class="line">        <span class="type">StringRedisSerializer</span> <span class="variable">stringRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="type">GenericJackson2JsonRedisSerializer</span> <span class="variable">genericJackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.设置key和hashKey采用String的序列化方式</span></span><br><span class="line">        redisTemplate.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        redisTemplate.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.设置value和hashValue采用json的序列化方式</span></span><br><span class="line">        redisTemplate.setValueSerializer(genericJackson2JsonRedisSerializer);</span><br><span class="line">        redisTemplate.setHashValueSerializer(genericJackson2JsonRedisSerializer);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>此时我们已经将RedisTemplate的key设置为<code>String序列化</code>，value设置为<code>Json序列化</code>的方式，再来执行方法测试</strong></p><p><img src="https://fmphoto.oss-cn-chengdu.aliyuncs.com/Photo/redis-14.png" alt="image-20220525170925364"></p></li><li><p><strong>由于我们设置的value序列化方式是Json的，因此我们可以直接向redis中插入一个对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSaveUser</span><span class="params">()</span> &#123;</span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;user:100&quot;</span>, <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Vz&quot;</span>, <span class="number">21</span>));</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) redisTemplate.opsForValue().get(<span class="string">&quot;user:100&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;User = &quot;</span> + user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://fmphoto.oss-cn-chengdu.aliyuncs.com/Photo/redis-15.png" alt="image-20220525171340322"></p><p>尽管Json序列化可以满足我们的需求，但是依旧存在一些问题。</p><p>如上图所示，为了在反序列化时知道对象的类型，JSON序列化器会将类的class类型写入json结果中，存入Redis，会带来额外的内存开销。</p><p>那么我们如何解决这个问题呢？我们可以通过下文的<code>StringRedisTemplate</code>来解决这个问题。</p></li></ul><h3 id="3-6StringRedisTemplate"><a href="#3-6StringRedisTemplate" class="headerlink" title="3.6StringRedisTemplate"></a>3.6StringRedisTemplate</h3><hr><blockquote><p><strong>为了节省内存空间，我们并不会使用JSON序列化器来处理value，而是统一使用String序列化器，要求只能存储String类型的key和value。当需要存储Java对象时，手动完成对象的序列化和反序列化。</strong></p></blockquote><p><img src="https://fmphoto.oss-cn-chengdu.aliyuncs.com/Photo/redis-16.png" alt="image-20220525172001057"></p><blockquote><p><strong>Spring默认提供了一个StringRedisTemplate类，它的key和value的序列化方式默认就是String方式。省去了我们自定义RedisTemplate的过程</strong></p></blockquote><ul><li><p><strong>我们可以直接编写一个测试类使用StringRedisTemplate来执行以下方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedisStringTemplateTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSaveUser</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line"><span class="comment">// 1.创建一个Json序列化对象</span></span><br><span class="line"><span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"><span class="comment">// 2.将要存入的对象通过Json序列化对象转换为字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">userJson1</span> <span class="operator">=</span> objectMapper.writeValueAsString(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Vz&quot;</span>, <span class="number">21</span>));</span><br><span class="line"><span class="comment">// 3.通过StringRedisTemplate将数据存入redis</span></span><br><span class="line">stringRedisTemplate.opsForValue().set(<span class="string">&quot;user:100&quot;</span>,userJson1);</span><br><span class="line"><span class="comment">// 4.通过key取出value</span></span><br><span class="line"><span class="type">String</span> <span class="variable">userJson2</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(<span class="string">&quot;user:100&quot;</span>);</span><br><span class="line"><span class="comment">// 5.由于取出的值是String类型的Json字符串，因此我们需要通过Json序列化对象来转换为java对象</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> objectMapper.readValue(userJson2, User.class);</span><br><span class="line"><span class="comment">// 6.打印结果</span></span><br><span class="line">System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>执行完毕回到Redis的图形化客户端查看结果</strong></p><p><img src="https://fmphoto.oss-cn-chengdu.aliyuncs.com/Photo/redis-17.png" alt="image-20220525172508234"></p></li></ul><h3 id="3-7总结"><a href="#3-7总结" class="headerlink" title="3.7总结"></a>3.7总结</h3><hr><blockquote><p>RedisTemplate的两种序列化实践方案，两种方案各有各的优缺点，可以根据实际情况选择使用。</p></blockquote><p>方案一：</p><ol><li>自定义RedisTemplate</li><li>修改RedisTemplate的序列化器为GenericJackson2JsonRedisSerializer</li></ol><p>方案二：</p><ol><li>使用StringRedisTemplate</li><li>写入Redis时，手动把对象序列化为JSON</li><li>读取Redis时，手动把读取到的JSON反序列化为对象</li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux指令</title>
      <link href="/2022/linux-ji-chu-zhi-ling/"/>
      <url>/2022/linux-ji-chu-zhi-ling/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="https://fmphoto.oss-cn-chengdu.aliyuncs.com/Photo/Linux-%E6%88%AA%E5%9B%BE.png"></p><span id="more"></span><h1 id="Linux命令初体验："><a href="#Linux命令初体验：" class="headerlink" title="Linux命令初体验："></a>Linux命令初体验：</h1><table><thead><tr><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>ls</td><td>list</td><td>查看当前目录下的内容</td></tr><tr><td>pwd</td><td>print work directory</td><td>查看当前所在目录</td></tr><tr><td>cd[目录名]</td><td>change directory</td><td>切换目录</td></tr><tr><td>touch[文件名]</td><td>touch</td><td>如果文件不存在，新建文件</td></tr><tr><td>mkdir[目录名]</td><td>make directory</td><td>创建目录</td></tr><tr><td>rm[文件名]</td><td>remove</td><td>删除指定文件</td></tr></tbody></table><h2 id="ls-al-dir"><a href="#ls-al-dir" class="headerlink" title="ls [-al] [dir]"></a><strong>ls [-al] [dir]</strong></h2><p> <strong>显示指定目录下内容</strong></p><p>说明：</p><ul><li>-a：显示所有文件以及目录(.开头的隐藏文件也会列出)</li><li>-l ：除文件名称外，还会显示文件形态，权限，拥有者。</li></ul><p>linux为ls -l 提供了简写 ll</p><h2 id="cd-目录名"><a href="#cd-目录名" class="headerlink" title="cd[目录名]"></a><strong>cd[目录名]</strong></h2><p> <strong>用于切换当前目录，即进入指定目录</strong></p><p>说明：</p><ul><li>~表示用户的home目录</li><li>.表示目前所在的目录</li><li>..表示目前所在目录位置的上级目录</li></ul><h2 id="文件目录操作命令"><a href="#文件目录操作命令" class="headerlink" title="文件目录操作命令"></a>文件目录操作命令</h2><h3 id="cat-n-fileName"><a href="#cat-n-fileName" class="headerlink" title="cat [-n] fileName"></a><strong>cat [-n] fileName</strong></h3><p>说明：</p><ul><li>用于显示文件内容</li><li>-n：由1开始对所有输出的行数编号</li></ul><h3 id="more-fileName"><a href="#more-fileName" class="headerlink" title="more fileName"></a>more fileName</h3><p>说明：</p><ul><li><p>用于分页显示文件内容</p></li><li><p>回车键：向下滚动一行</p></li><li><p>空格键：向下滚动一屏</p></li><li><p>b：  返回上一屏</p></li><li><p>q或者ctrl + c：退出more</p></li></ul><h3 id="tail-f-fileName"><a href="#tail-f-fileName" class="headerlink" title="tail [-f] fileName"></a>tail [-f] fileName</h3><p><strong>查看文件末尾的内容</strong></p><p>说明：</p><ul><li>-f：动态读取文件末尾内容并显示，通常用于日志文件的内容输出</li></ul><p>举例：</p><p>tail -20&#x2F;etc&#x2F;profile  显示文件末尾20行</p><p>tail -f&#x2F;etc&#x2F;profile   动态显示文件末尾内容，一般用于读取日志</p><h2 id="makdir-p-dirName"><a href="#makdir-p-dirName" class="headerlink" title="makdir [-p] dirName"></a>makdir [-p] dirName</h2><p><strong>创建目录</strong></p><p>说明：</p><ul><li>-p：确保目录名称存在，不存在则创建一个。通过此选项，可以实现多层目录同时创建</li><li>举例：<ul><li>mkdir itcast 在当前目录创建一个itcast的子目录</li><li>mkdir - p itcast&#x2F;test 在当前目录下的itcast下创建一个test目录，若itcast目录不存在则创建</li></ul></li></ul><h2 id="rmdir-p-dirName"><a href="#rmdir-p-dirName" class="headerlink" title="rmdir [-p] dirName"></a>rmdir [-p] dirName</h2><p><strong>删除空目录</strong></p><p>说明：</p><ul><li>-p 当子目录被删除后使父目录为空目录的话，则一并删除<ul><li>rmdir itcast 删除名为itcast的空目录</li><li>rmdir -p itcast&#x2F;test 删除itcast目录中名 为test的子目录，若删除test目录后itcast后变为空目录则一起删除</li></ul></li></ul><h2 id="rm-rf-name"><a href="#rm-rf-name" class="headerlink" title="rm [-rf] name"></a>rm [-rf] name</h2><p><strong>删除文件或者目录</strong></p><p>说明：</p><ul><li>-r：将目录以及目录中所有文件逐一删除</li><li>-f：无需确认，直接删除</li></ul><h2 id="cp-r-source-dest"><a href="#cp-r-source-dest" class="headerlink" title="cp [-r] source dest"></a>cp [-r] source dest</h2><p><strong>用于复制文件或目录</strong></p><p>说明：</p><ul><li>-r：如果复制的是目录需要使用此选项，此时会复制目录下子目录和文件<ul><li>cp hallo.txt  itcast&#x2F; 将hello.txt 复制到itcast中</li><li>cp -r itcast&#x2F;  .&#x2F;it&#x2F; 将itcast目录和目录下所有文件复制到it中</li></ul></li></ul><h2 id="mv-source-dest"><a href="#mv-source-dest" class="headerlink" title="mv source dest"></a>mv source dest</h2><p><strong>为文件或者目录改名，移动到其他位置</strong></p><ul><li>mv hello.txt hi.txt将hello.txt改名为hi.txt</li><li>mv hi.txt itheima&#x2F;    将文件hi.txt移动到itheima目录中</li><li>mv hi.txt it&#x2F;hello.txt      将hi.txt移动到it目录中，并改名为hello.txt</li><li>mv itcast&#x2F; it&#x2F;      如果it目录不存在，将itcast目录改名为it</li><li>mv itcast&#x2F; itheima&#x2F;   如果itheima目录存在，将itcast目录移动到itheima目录中</li></ul><h2 id="tar-zxcvf-fileName-files"><a href="#tar-zxcvf-fileName-files" class="headerlink" title="tar [-zxcvf] fileName [files]"></a>tar [-zxcvf] fileName [files]</h2><p><strong>对文件进行打包，解包，压缩，解压</strong></p><p>说明:</p><ul><li>-z：z代表的是gzip，通过gzip命令处理文件，gzip可以对文件压缩或者解压</li><li>-c：c代表的是create，即创建新的包文件</li><li>-x：x代表的是extract，实现从包文件中还原文件</li><li>-V：v代表的是verbose，显示命令的执行过程</li><li>-f：f代表的是file，用于指定包文件的名称</li></ul><p>举例:</p><ul><li>打包<ul><li>tar-cvf hello.tar .&#x2F;*   将当前目录下所有文件打包，打包后的文件名为hello.tar</li><li>tar -zcvf hello.tar.gz .&#x2F;*   将当前目录下所有文件打包并压缩，打包后的文件名为hello.tar.gz</li></ul></li><li>解包<ul><li>tar -xvf hello.tar  将hello.tar文件进行解包，并将解包后的文件放在当前目录</li><li>tar -zxvf hello.tar.gz     将hello.tar.gz文件进行解压，并将解压后的文件放在当前目录</li><li>tar -zxvf hello.tar.gz -C &#x2F;usr&#x2F;local        将hello.tar.gz文件进行解压，并将解压后的文件放在&#x2F;usr&#x2F;local目录</li></ul></li></ul><h2 id="文本编辑命令vi-x2F-vim"><a href="#文本编辑命令vi-x2F-vim" class="headerlink" title="文本编辑命令vi&#x2F;vim"></a>文本编辑命令vi&#x2F;vim</h2><p>vi fileName</p><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><ul><li>命令模式下可以查看文件内容、 移动光标(上下左右箭头、gg、G)</li><li>通过vim命令打开文件后， 默认进入命令模式</li><li>另外两种模式需要首 先进入命令模式,才能进入彼此</li></ul><h3 id="插入模式"><a href="#插入模式" class="headerlink" title="插入模式"></a>插入模式</h3><ul><li><p>插入模式可以对文件内容进行编辑</p></li><li><p>在命令模式下按[i, a,o]，进入插入模式，下方会出现[instert]</p></li><li><p>插入模式下按ESC回到命令模式</p></li></ul><h3 id="底行模式"><a href="#底行模式" class="headerlink" title="底行模式"></a>底行模式</h3><ul><li>底行模式下通过命令对文件内容进行查找，显示行号，退出等操作</li><li>在命令模式下按[:,&#x2F;]，进入底行模式</li><li>通过&#x2F;方式进入底行可以对文件内容进行查找</li><li>通过：方式进入底行模式后，可以输入wq(保存并退出)，q!(不保存退出)，set nu(显示行号)</li></ul><h2 id="查找命令"><a href="#查找命令" class="headerlink" title="查找命令"></a>查找命令</h2><p><strong>在指定目录下查找文件</strong> </p><p>find dirName -option fileName</p><p>举例:</p><ul><li>find . -name*.java”  在当前目录及其子目录下查找.java结尾文件</li><li>find &#x2F;itcast -name “*.java”  在&#x2F;itcast目录及其子目录下查找java结尾的文件</li></ul><h3 id="从指定文件中查找指定的文本内容"><a href="#从指定文件中查找指定的文本内容" class="headerlink" title="从指定文件中查找指定的文本内容"></a>从指定文件中查找指定的文本内容</h3><p>grep word fileName</p><p>举例:</p><ul><li>grep Hello HelloWorld.java   查找HelloWorldjava文件中出现的Hello字符串的位置</li><li>grep hello *.java    查找当前目录中所有.java结尾的文件中包含hello字符串的位置</li></ul><h2 id="查看已经启动的服务"><a href="#查看已经启动的服务" class="headerlink" title="查看已经启动的服务"></a>查看已经启动的服务</h2><p>netstat -tunlp | grep 服务名字</p><p>ps -ef | grep 进程名字</p><h2 id="top的使用方式"><a href="#top的使用方式" class="headerlink" title="top的使用方式"></a>top的使用方式</h2><p> <strong>top [-d number] | top [-bnp]</strong></p><p>-d：number代表秒数，表示top命令显示的页面更新一次的间隔。默认是5秒。-b：以批次的方式执行top。-n：与-b配合使用，表示需要进行几次top命令的输出结果。-p：指定特定的pid进程号进行观察。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql语法</title>
      <link href="/2022/mysql/"/>
      <url>/2022/mysql/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><h2 id="通用语法及分类"><a href="#通用语法及分类" class="headerlink" title="通用语法及分类"></a>通用语法及分类</h2><ul><li><p>DDL: 数据定义语言，用来定义数据库对象（数据库、表、字段）</p></li><li><p>DML: 数据操作语言，用来对数据库表中的数据进行增删改</p></li><li><p>DQL: 数据查询语言，用来查询数据库中表的记录</p></li><li><p>DCL: 数据控制语言，用来创建数据库用户、控制数据库的控制权限</p><span id="more"></span></li></ul><h3 id="DDL（数据定义语言）"><a href="#DDL（数据定义语言）" class="headerlink" title="DDL（数据定义语言）"></a>DDL（数据定义语言）</h3><p>数据定义语言</p><h4 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h4><p>查询所有数据库：<br><code>SHOW DATABASES;</code><br>查询当前数据库：<br><code>SELECT DATABASE();</code><br>创建数据库：<br><code>CREATE DATABASE [ IF NOT EXISTS ] 数据库名 [ DEFAULT CHARSET 字符集] [COLLATE 排序规则 ];</code><br>删除数据库：<br><code>DROP DATABASE [ IF EXISTS ] 数据库名;</code><br>使用数据库：<br><code>USE 数据库名;</code></p><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>UTF8字符集长度为3字节，有些符号占4字节，所以推荐用utf8mb4字符集</li></ul><h4 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h4><p>查询当前数据库所有表：<br><code>SHOW TABLES;</code><br>查询表结构：<br><code>DESC 表名;</code><br>查询指定表的建表语句：<br><code>SHOW CREATE TABLE 表名;</code></p><p>创建表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">字段1 字段1类型 [COMMENT 字段1注释],</span><br><span class="line">字段2 字段2类型 [COMMENT 字段2注释],</span><br><span class="line">字段3 字段3类型 [COMMENT 字段3注释],</span><br><span class="line">...</span><br><span class="line">字段n 字段n类型 [COMMENT 字段n注释]</span><br><span class="line">)[ COMMENT 表注释 ];</span><br></pre></td></tr></table></figure><p><strong>最后一个字段后面没有逗号</strong></p><p>添加字段：<br><code>ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];</code><br>例：<code>ALTER TABLE emp ADD nickname varchar(20) COMMENT &#39;昵称&#39;;</code></p><p>修改数据类型：<br><code>ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);</code><br>修改字段名和字段类型：<br><code>ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];</code><br>例：将emp表的nickname字段修改为username，类型为varchar(30)<br><code>ALTER TABLE emp CHANGE nickname username varchar(30) COMMENT &#39;昵称&#39;;</code></p><p>删除字段：<br><code>ALTER TABLE 表名 DROP 字段名;</code></p><p>修改表名：<br><code>ALTER TABLE 表名 RENAME TO 新表名</code></p><p>删除表：<br><code>DROP TABLE [IF EXISTS] 表名;</code><br>删除表，并重新创建该表：<br><code>TRUNCATE TABLE 表名;</code></p><h3 id="DML（数据操作语言）"><a href="#DML（数据操作语言）" class="headerlink" title="DML（数据操作语言）"></a>DML（数据操作语言）</h3><h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h4><p>指定字段：<br><code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...);</code><br>全部字段：<br><code>INSERT INTO 表名 VALUES (值1, 值2, ...);</code></p><p>批量添加数据：<br><code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code><br><code>INSERT INTO 表名 VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code></p><h5 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>字符串和日期类型数据应该包含在引号中</li><li>插入的数据大小应该在字段的规定范围内</li></ul><h4 id="更新和删除数据"><a href="#更新和删除数据" class="headerlink" title="更新和删除数据"></a>更新和删除数据</h4><p>修改数据：<br><code>UPDATE 表名 SET 字段名1 = 值1, 字段名2 = 值2, ... [ WHERE 条件 ];</code><br>例：<br><code>UPDATE emp SET name = &#39;Jack&#39; WHERE id = 1;</code></p><p>删除数据：<br><code>DELETE FROM 表名 [ WHERE 条件 ];</code></p><h3 id="DQL（数据查询语言）"><a href="#DQL（数据查询语言）" class="headerlink" title="DQL（数据查询语言）"></a>DQL（数据查询语言）</h3><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">字段列表</span><br><span class="line">FROM</span><br><span class="line">表名字段</span><br><span class="line">WHERE</span><br><span class="line">条件列表</span><br><span class="line">GROUP BY</span><br><span class="line">分组字段列表</span><br><span class="line">HAVING</span><br><span class="line">分组后的条件列表</span><br><span class="line">ORDER BY</span><br><span class="line">排序字段列表</span><br><span class="line">LIMIT</span><br><span class="line">分页参数</span><br></pre></td></tr></table></figure><h4 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h4><p>查询多个字段：<br><code>SELECT 字段1, 字段2, 字段3, ... FROM 表名;</code><br><code>SELECT * FROM 表名;</code></p><p>设置别名：<br><code>SELECT 字段1 [ AS 别名1 ], 字段2 [ AS 别名2 ], 字段3 [ AS 别名3 ], ... FROM 表名;</code><br><code>SELECT 字段1 [ 别名1 ], 字段2 [ 别名2 ], 字段3 [ 别名3 ], ... FROM 表名;</code></p><p>去除重复记录：<br><code>SELECT DISTINCT 字段列表 FROM 表名;</code></p><p>转义：<br><code>SELECT * FROM 表名 WHERE name LIKE &#39;/_张三&#39; ESCAPE &#39;/&#39;</code><br>&#x2F; 之后的_不作为通配符</p><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 WHERE 条件列表;</code></p><p>条件：</p><table><thead><tr><th>比较运算符</th><th>功能</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td></tr><tr><td>&#x3D;</td><td>等于</td></tr><tr><td>&lt;&gt; 或 !&#x3D;</td><td>不等于</td></tr><tr><td>BETWEEN … AND …</td><td>在某个范围内（含最小、最大值）</td></tr><tr><td>IN(…)</td><td>在in之后的列表中的值，多选一</td></tr><tr><td>LIKE 占位符</td><td>模糊匹配（_匹配单个字符，%匹配任意个字符）</td></tr><tr><td>IS NULL</td><td>是NULL</td></tr></tbody></table><table><thead><tr><th>逻辑运算符</th><th>功能</th></tr></thead><tbody><tr><td>AND 或 &amp;&amp;</td><td>并且（多个条件同时成立）</td></tr><tr><td>OR 或 &amp;#124;&amp;#124;</td><td>或者（多个条件任意一个成立）</td></tr><tr><td>NOT 或 !</td><td>非，不是</td></tr></tbody></table><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">-- 年龄等于30</span><br><span class="line">select * from employee where age = 30;</span><br><span class="line">-- 年龄小于30</span><br><span class="line">select * from employee where age &lt; 30;</span><br><span class="line">-- 小于等于</span><br><span class="line">select * from employee where age &lt;= 30;</span><br><span class="line">-- 没有身份证</span><br><span class="line">select * from employee where idcard is null or idcard = &#x27;&#x27;;</span><br><span class="line">-- 有身份证</span><br><span class="line">select * from employee where idcard;</span><br><span class="line">select * from employee where idcard is not null;</span><br><span class="line">-- 不等于</span><br><span class="line">select * from employee where age != 30;</span><br><span class="line">-- 年龄在20到30之间</span><br><span class="line">select * from employee where age between 20 and 30;</span><br><span class="line">select * from employee where age &gt;= 20 and age &lt;= 30;</span><br><span class="line">-- 下面语句不报错，但查不到任何信息</span><br><span class="line">select * from employee where age between 30 and 20;</span><br><span class="line">-- 性别为女且年龄小于30</span><br><span class="line">select * from employee where age &lt; 30 and gender = &#x27;女&#x27;;</span><br><span class="line">-- 年龄等于25或30或35</span><br><span class="line">select * from employee where age = 25 or age = 30 or age = 35;</span><br><span class="line">select * from employee where age in (25, 30, 35);</span><br><span class="line">-- 姓名为两个字</span><br><span class="line">select * from employee where name like &#x27;__&#x27;;</span><br><span class="line">-- 身份证最后为X</span><br><span class="line">select * from employee where idcard like &#x27;%X&#x27;;</span><br></pre></td></tr></table></figure><h4 id="聚合查询（聚合函数）"><a href="#聚合查询（聚合函数）" class="headerlink" title="聚合查询（聚合函数）"></a>聚合查询（聚合函数）</h4><p>常见聚合函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>count</td><td>统计数量</td></tr><tr><td>max</td><td>最大值</td></tr><tr><td>min</td><td>最小值</td></tr><tr><td>avg</td><td>平均值</td></tr><tr><td>sum</td><td>求和</td></tr></tbody></table><p>语法：<br><code>SELECT 聚合函数(字段列表) FROM 表名;</code><br>例：<br><code>SELECT count(id) from employee where workaddress = &quot;广东省&quot;;</code></p><h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 [ WHERE 条件 ] GROUP BY 分组字段名 [ HAVING 分组后的过滤条件 ];</code></p><p>where 和 having 的区别：</p><ul><li>执行时机不同：where是分组之前进行过滤，不满足where条件不参与分组；having是分组后对结果进行过滤。</li><li>判断条件不同：where不能对聚合函数进行判断，而having可以。</li></ul><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 根据性别分组，统计男性和女性数量（只显示分组数量，不显示哪个是男哪个是女）</span><br><span class="line">select count(*) from employee group by gender;</span><br><span class="line">-- 根据性别分组，统计男性和女性数量</span><br><span class="line">select gender, count(*) from employee group by gender;</span><br><span class="line">-- 根据性别分组，统计男性和女性的平均年龄</span><br><span class="line">select gender, avg(age) from employee group by gender;</span><br><span class="line">-- 年龄小于45，并根据工作地址分组</span><br><span class="line">select workaddress, count(*) from employee where age &lt; 45 group by workaddress;</span><br><span class="line">-- 年龄小于45，并根据工作地址分组，获取员工数量大于等于3的工作地址</span><br><span class="line">select workaddress, count(*) address_count from employee where age &lt; 45 group by workaddress having address_count &gt;= 3;</span><br></pre></td></tr></table></figure><h5 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>执行顺序：where &gt; 聚合函数 &gt; having</li><li>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义</li></ul><h4 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1, 字段2 排序方式2;</code></p><p>排序方式：</p><ul><li>ASC: 升序（默认）</li><li>DESC: 降序</li></ul><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 根据年龄升序排序</span><br><span class="line">SELECT * FROM employee ORDER BY age ASC;</span><br><span class="line">SELECT * FROM employee ORDER BY age;</span><br><span class="line">-- 两字段排序，根据年龄升序排序，入职时间降序排序</span><br><span class="line">SELECT * FROM employee ORDER BY age ASC, entrydate DESC;</span><br></pre></td></tr></table></figure><h5 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h5><p>如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序</p><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 LIMIT 起始索引, 查询记录数;</code></p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 查询第一页数据，展示10条</span><br><span class="line">SELECT * FROM employee LIMIT 0, 10;</span><br><span class="line">-- 查询第二页</span><br><span class="line">SELECT * FROM employee LIMIT 10, 10;</span><br></pre></td></tr></table></figure><h5 id="注意事项-4"><a href="#注意事项-4" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>起始索引从0开始，起始索引 &#x3D; （查询页码 - 1） * 每页显示记录数</li><li>分页查询是数据库的方言，不同数据库有不同实现，MySQL是LIMIT</li><li>如果查询的是第一页数据，起始索引可以省略，直接简写 LIMIT 10</li></ul><h4 id="DQL执行顺序"><a href="#DQL执行顺序" class="headerlink" title="DQL执行顺序"></a>DQL执行顺序</h4><p>FROM -&gt; WHERE -&gt; GROUP BY -&gt; SELECT -&gt; ORDER BY -&gt; LIMIT</p><h3 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h3><h4 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h4><p>查询用户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USE mysql;</span><br><span class="line">SELECT * FROM user;</span><br></pre></td></tr></table></figure><p>创建用户:<br><code>CREATE USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED BY &#39;密码&#39;;</code></p><p>修改用户密码：<br><code>ALTER USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED WITH mysql_native_password BY &#39;新密码&#39;;</code></p><p>删除用户：<br><code>DROP USER &#39;用户名&#39;@&#39;主机名&#39;;</code></p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 创建用户test，只能在当前主机localhost访问</span><br><span class="line">create user &#x27;test&#x27;@&#x27;localhost&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">-- 创建用户test，能在任意主机访问</span><br><span class="line">create user &#x27;test&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">create user &#x27;test&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">-- 修改密码</span><br><span class="line">alter user &#x27;test&#x27;@&#x27;localhost&#x27; identified with mysql_native_password by &#x27;1234&#x27;;</span><br><span class="line">-- 删除用户</span><br><span class="line">drop user &#x27;test&#x27;@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure><h5 id="注意事项-5"><a href="#注意事项-5" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>主机名可以使用 % 通配</li></ul><h4 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h4><p>常用权限：</p><table><thead><tr><th>权限</th><th>说明</th></tr></thead><tbody><tr><td>ALL, ALL PRIVILEGES</td><td>所有权限</td></tr><tr><td>SELECT</td><td>查询数据</td></tr><tr><td>INSERT</td><td>插入数据</td></tr><tr><td>UPDATE</td><td>修改数据</td></tr><tr><td>DELETE</td><td>删除数据</td></tr><tr><td>ALTER</td><td>修改表</td></tr><tr><td>DROP</td><td>删除数据库&#x2F;表&#x2F;视图</td></tr><tr><td>CREATE</td><td>创建数据库&#x2F;表</td></tr></tbody></table><p>更多权限请看<a href="#%E6%9D%83%E9%99%90%E4%B8%80%E8%A7%88%E8%A1%A8" title="权限一览表">权限一览表</a></p><p>查询权限：<br><code>SHOW GRANTS FOR &#39;用户名&#39;@&#39;主机名&#39;;</code></p><p>授予权限：<br><code>GRANT 权限列表 ON 数据库名.表名 TO &#39;用户名&#39;@&#39;主机名&#39;;</code></p><p>撤销权限：<br><code>REVOKE 权限列表 ON 数据库名.表名 FROM &#39;用户名&#39;@&#39;主机名&#39;;</code></p><h5 id="注意事项-6"><a href="#注意事项-6" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>多个权限用逗号分隔</li><li>授权时，数据库名和表名可以用 * 进行通配，代表所有</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li>字符串函数</li><li>数值函数</li><li>日期函数</li><li>流程函数</li></ul><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><p>常用函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CONCAT(s1, s2, …, sn)</td><td>字符串拼接，将s1, s2, …, sn拼接成一个字符串</td></tr><tr><td>LOWER(str)</td><td>将字符串全部转为小写</td></tr><tr><td>UPPER(str)</td><td>将字符串全部转为大写</td></tr><tr><td>LPAD(str, n, pad)</td><td>左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</td></tr><tr><td>RPAD(str, n, pad)</td><td>右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</td></tr><tr><td>TRIM(str)</td><td>去掉字符串头部和尾部的空格</td></tr><tr><td>SUBSTRING(str, start, len)</td><td>返回从字符串str从start位置起的len个长度的字符串</td></tr><tr><td>REPLACE(column, source, replace)</td><td>替换字符串</td></tr></tbody></table><p>使用示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-- 拼接</span><br><span class="line">SELECT CONCAT(&#x27;Hello&#x27;, &#x27;World&#x27;);</span><br><span class="line">-- 小写</span><br><span class="line">SELECT LOWER(&#x27;Hello&#x27;);</span><br><span class="line">-- 大写</span><br><span class="line">SELECT UPPER(&#x27;Hello&#x27;);</span><br><span class="line">-- 左填充</span><br><span class="line">SELECT LPAD(&#x27;01&#x27;, 5, &#x27;-&#x27;);</span><br><span class="line">-- 右填充</span><br><span class="line">SELECT RPAD(&#x27;01&#x27;, 5, &#x27;-&#x27;);</span><br><span class="line">-- 去除空格</span><br><span class="line">SELECT TRIM(&#x27; Hello World &#x27;);</span><br><span class="line">-- 切片（起始索引为1）</span><br><span class="line">SELECT SUBSTRING(&#x27;Hello World&#x27;, 1, 5);</span><br></pre></td></tr></table></figure><h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><p>常见函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CEIL(x)</td><td>向上取整</td></tr><tr><td>FLOOR(x)</td><td>向下取整</td></tr><tr><td>MOD(x, y)</td><td>返回x&#x2F;y的模</td></tr><tr><td>RAND()</td><td>返回0~1内的随机数</td></tr><tr><td>ROUND(x, y)</td><td>求参数x的四舍五入值，保留y位小数</td></tr></tbody></table><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><p>常用函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CURDATE()</td><td>返回当前日期</td></tr><tr><td>CURTIME()</td><td>返回当前时间</td></tr><tr><td>NOW()</td><td>返回当前日期和时间</td></tr><tr><td>YEAR(date)</td><td>获取指定date的年份</td></tr><tr><td>MONTH(date)</td><td>获取指定date的月份</td></tr><tr><td>DAY(date)</td><td>获取指定date的日期</td></tr><tr><td>DATE_ADD(date, INTERVAL expr type)</td><td>返回一个日期&#x2F;时间值加上一个时间间隔expr后的时间值</td></tr><tr><td>DATEDIFF(date1, date2)</td><td>返回起始时间date1和结束时间date2之间的天数</td></tr></tbody></table><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- DATE_ADD</span><br><span class="line">SELECT DATE_ADD(NOW(), INTERVAL 70 YEAR);</span><br></pre></td></tr></table></figure><h3 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h3><p>常用函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>IF(value, t, f)</td><td>如果value为true，则返回t，否则返回f</td></tr><tr><td>IFNULL(value1, value2)</td><td>如果value1不为空，返回value1，否则返回value2</td></tr><tr><td>CASE WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td><td>如果val1为true，返回res1，… 否则返回default默认值</td></tr><tr><td>CASE [ expr ] WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td><td>如果expr的值等于val1，返回res1，… 否则返回default默认值</td></tr></tbody></table><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">name,</span><br><span class="line">(case when age &gt; 30 then &#x27;中年&#x27; else &#x27;青年&#x27; end)</span><br><span class="line">from employee;</span><br><span class="line">select</span><br><span class="line">name,</span><br><span class="line">(case workaddress when &#x27;北京市&#x27; then &#x27;一线城市&#x27; when &#x27;上海市&#x27; then &#x27;一线城市&#x27; else &#x27;二线城市&#x27; end) as &#x27;工作地址&#x27;</span><br><span class="line">from employee;</span><br></pre></td></tr></table></figure><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>分类：</p><table><thead><tr><th>约束</th><th>描述</th><th>关键字</th></tr></thead><tbody><tr><td>非空约束</td><td>限制该字段的数据不能为null</td><td>NOT NULL</td></tr><tr><td>唯一约束</td><td>保证该字段的所有数据都是唯一、不重复的</td><td>UNIQUE</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一标识，要求非空且唯一</td><td>PRIMARY KEY</td></tr><tr><td>默认约束</td><td>保存数据时，如果未指定该字段的值，则采用默认值</td><td>DEFAULT</td></tr><tr><td>检查约束（8.0.1版本后）</td><td>保证字段值满足某一个条件</td><td>CHECK</td></tr><tr><td>外键约束</td><td>用来让两张图的数据之间建立连接，保证数据的一致性和完整性</td><td>FOREIGN KEY</td></tr></tbody></table><p>约束是作用于表中字段上的，可以再创建表&#x2F;修改表的时候添加约束。</p><h3 id="常用约束"><a href="#常用约束" class="headerlink" title="常用约束"></a>常用约束</h3><table><thead><tr><th>约束条件</th><th>关键字</th></tr></thead><tbody><tr><td>主键</td><td>PRIMARY KEY</td></tr><tr><td>自动增长</td><td>AUTO_INCREMENT</td></tr><tr><td>不为空</td><td>NOT NULL</td></tr><tr><td>唯一</td><td>UNIQUE</td></tr><tr><td>逻辑条件</td><td>CHECK</td></tr><tr><td>默认值</td><td>DEFAULT</td></tr></tbody></table><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table user(</span><br><span class="line">id int primary key auto_increment,</span><br><span class="line">name varchar(10) not null unique,</span><br><span class="line">age int check(age &gt; 0 and age &lt; 120),</span><br><span class="line">status char(1) default &#x27;1&#x27;,</span><br><span class="line">gender char(1)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p>添加外键：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">字段名 字段类型,</span><br><span class="line">...</span><br><span class="line">[CONSTRAINT] [外键名称] FOREIGN KEY(外键字段名) REFERENCES 主表(主表列名)</span><br><span class="line">);</span><br><span class="line">ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名) REFERENCES 主表(主表列名);</span><br><span class="line"></span><br><span class="line">-- 例子</span><br><span class="line">alter table emp add constraint fk_emp_dept_id foreign key(dept_id) references dept(id);</span><br></pre></td></tr></table></figure><p>删除外键：<br><code>ALTER TABLE 表名 DROP FOREIGN KEY 外键名;</code></p><h4 id="删除-x2F-更新行为"><a href="#删除-x2F-更新行为" class="headerlink" title="删除&#x2F;更新行为"></a>删除&#x2F;更新行为</h4><table><thead><tr><th>行为</th><th>说明</th></tr></thead><tbody><tr><td>NO ACTION</td><td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新（与RESTRICT一致）</td></tr><tr><td>RESTRICT</td><td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新（与NO ACTION一致）</td></tr><tr><td>CASCADE</td><td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则也删除&#x2F;更新外键在子表中的记录</td></tr><tr><td>SET NULL</td><td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null（要求该外键允许为null）</td></tr><tr><td>SET DEFAULT</td><td>父表有变更时，子表将外键设为一个默认值（Innodb不支持）</td></tr></tbody></table><p>更改删除&#x2F;更新行为：<br><code>ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段) REFERENCES 主表名(主表字段名) ON UPDATE 行为 ON DELETE 行为;</code></p><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h3><ul><li>一对多（多对一）</li><li>多对多</li><li>一对一</li></ul><h4 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h4><p>案例：部门与员工<br>关系：一个部门对应多个员工，一个员工对应一个部门<br>实现：在多的一方建立外键，指向一的一方的主键</p><h4 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h4><p>案例：学生与课程<br>关系：一个学生可以选多门课程，一门课程也可以供多个学生选修<br>实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</p><h4 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h4><p>案例：用户与用户详情<br>关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率<br>实现：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的（UNIQUE）</p><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>合并查询（笛卡尔积，会展示所有组合结果）：<br><code>select * from employee, dept;</code></p><blockquote><p>笛卡尔积：两个集合A集合和B集合的所有组合情况（在多表查询时，需要消除无效的笛卡尔积）</p></blockquote><p>消除无效笛卡尔积：<br><code>select * from employee, dept where employee.dept = dept.id;</code></p><h3 id="内连接查询"><a href="#内连接查询" class="headerlink" title="内连接查询"></a>内连接查询</h3><p>内连接查询的是两张表交集的部分</p><p>隐式内连接：<br><code>SELECT 字段列表 FROM 表1, 表2 WHERE 条件 ...;</code></p><p>显式内连接：<br><code>SELECT 字段列表 FROM 表1 [ INNER ] JOIN 表2 ON 连接条件 ...;</code></p><p>显式性能比隐式高</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 查询员工姓名，及关联的部门的名称</span><br><span class="line">-- 隐式</span><br><span class="line">select e.name, d.name from employee as e, dept as d where e.dept = d.id;</span><br><span class="line">-- 显式</span><br><span class="line">select e.name, d.name from employee as e inner join dept as d on e.dept = d.id;</span><br></pre></td></tr></table></figure><h3 id="外连接查询"><a href="#外连接查询" class="headerlink" title="外连接查询"></a>外连接查询</h3><p>左外连接：<br>查询左表所有数据，以及两张表交集部分数据<br><code>SELECT 字段列表 FROM 表1 LEFT [ OUTER ] JOIN 表2 ON 条件 ...;</code><br>相当于查询表1的所有数据，包含表1和表2交集部分数据</p><p>右外连接：<br>查询右表所有数据，以及两张表交集部分数据<br><code>SELECT 字段列表 FROM 表1 RIGHT [ OUTER ] JOIN 表2 ON 条件 ...;</code></p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 左</span><br><span class="line">select e.*, d.name from employee as e left outer join dept as d on e.dept = d.id;</span><br><span class="line">select d.name, e.* from dept d left outer join emp e on e.dept = d.id;  -- 这条语句与下面的语句效果一样</span><br><span class="line">-- 右</span><br><span class="line">select d.name, e.* from employee as e right outer join dept as d on e.dept = d.id;</span><br></pre></td></tr></table></figure><p>左连接可以查询到没有dept的employee，右连接可以查询到没有employee的dept</p><h3 id="自连接查询"><a href="#自连接查询" class="headerlink" title="自连接查询"></a>自连接查询</h3><p>当前表与自身的连接查询，自连接必须使用表别名</p><p>语法：<br><code>SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件 ...;</code></p><p>自连接查询，可以是内连接查询，也可以是外连接查询</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 查询员工及其所属领导的名字</span><br><span class="line">select a.name, b.name from employee a, employee b where a.manager = b.id;</span><br><span class="line">-- 没有领导的也查询出来</span><br><span class="line">select a.name, b.name from employee a left join employee b on a.manager = b.id;</span><br></pre></td></tr></table></figure><h3 id="联合查询-union-union-all"><a href="#联合查询-union-union-all" class="headerlink" title="联合查询 union, union all"></a>联合查询 union, union all</h3><p>把多次查询的结果合并，形成一个新的查询集</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表A ...</span><br><span class="line">UNION [ALL]</span><br><span class="line">SELECT 字段列表 FROM 表B ...</span><br></pre></td></tr></table></figure><h4 id="注意事项-7"><a href="#注意事项-7" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>UNION ALL 会有重复结果，UNION 不会</li><li>联合查询比使用or效率高，不会使索引失效</li></ul><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>SQL语句中嵌套SELECT语句，称谓嵌套查询，又称子查询。<br><code>SELECT * FROM t1 WHERE column1 = ( SELECT column1 FROM t2);</code><br><strong>子查询外部的语句可以是 INSERT &#x2F; UPDATE &#x2F; DELETE &#x2F; SELECT 的任何一个</strong></p><p>根据子查询结果可以分为：</p><ul><li>标量子查询（子查询结果为单个值）</li><li>列子查询（子查询结果为一列）</li><li>行子查询（子查询结果为一行）</li><li>表子查询（子查询结果为多行多列）</li></ul><p>根据子查询位置可分为：</p><ul><li>WHERE 之后</li><li>FROM 之后</li><li>SELECT 之后</li></ul><h4 id="标量子查询"><a href="#标量子查询" class="headerlink" title="标量子查询"></a>标量子查询</h4><p>子查询返回的结果是单个值（数字、字符串、日期等）。<br>常用操作符：- &lt; &gt; &gt; &gt;&#x3D; &lt; &lt;&#x3D;</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 查询销售部所有员工</span><br><span class="line">select id from dept where name = &#x27;销售部&#x27;;</span><br><span class="line">-- 根据销售部部门ID，查询员工信息</span><br><span class="line">select * from employee where dept = 4;</span><br><span class="line">-- 合并（子查询）</span><br><span class="line">select * from employee where dept = (select id from dept where name = &#x27;销售部&#x27;);</span><br><span class="line"></span><br><span class="line">-- 查询xxx入职之后的员工信息</span><br><span class="line">select * from employee where entrydate &gt; (select entrydate from employee where name = &#x27;xxx&#x27;);</span><br></pre></td></tr></table></figure><h4 id="列子查询"><a href="#列子查询" class="headerlink" title="列子查询"></a>列子查询</h4><p>返回的结果是一列（可以是多行）。</p><p>常用操作符：</p><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>IN</td><td>在指定的集合范围内，多选一</td></tr><tr><td>NOT IN</td><td>不在指定的集合范围内</td></tr><tr><td>ANY</td><td>子查询返回列表中，有任意一个满足即可</td></tr><tr><td>SOME</td><td>与ANY等同，使用SOME的地方都可以使用ANY</td></tr><tr><td>ALL</td><td>子查询返回列表的所有值都必须满足</td></tr></tbody></table><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 查询销售部和市场部的所有员工信息</span><br><span class="line">select * from employee where dept in (select id from dept where name = &#x27;销售部&#x27; or name = &#x27;市场部&#x27;);</span><br><span class="line">-- 查询比财务部所有人工资都高的员工信息</span><br><span class="line">select * from employee where salary &gt; all(select salary from employee where dept = (select id from dept where name = &#x27;财务部&#x27;));</span><br><span class="line">-- 查询比研发部任意一人工资高的员工信息</span><br><span class="line">select * from employee where salary &gt; any (select salary from employee where dept = (select id from dept where name = &#x27;研发部&#x27;));</span><br></pre></td></tr></table></figure><h4 id="行子查询"><a href="#行子查询" class="headerlink" title="行子查询"></a>行子查询</h4><p>返回的结果是一行（可以是多列）。<br>常用操作符：&#x3D;, &lt;, &gt;, IN, NOT IN</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 查询与xxx的薪资及直属领导相同的员工信息</span><br><span class="line">select * from employee where (salary, manager) = (12500, 1);</span><br><span class="line">select * from employee where (salary, manager) = (select salary, manager from employee where name = &#x27;xxx&#x27;);</span><br></pre></td></tr></table></figure><h4 id="表子查询"><a href="#表子查询" class="headerlink" title="表子查询"></a>表子查询</h4><p>返回的结果是多行多列<br>常用操作符：IN</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 查询与xxx1，xxx2的职位和薪资相同的员工</span><br><span class="line">select * from employee where (job, salary) in (select job, salary from employee where name = &#x27;xxx1&#x27; or name = &#x27;xxx2&#x27;);</span><br><span class="line">-- 查询入职日期是2006-01-01之后的员工，及其部门信息</span><br><span class="line">select e.*, d.* from (select * from employee where entrydate &gt; &#x27;2006-01-01&#x27;) as e left join dept as d on e.dept = d.id;</span><br></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务是一组操作的集合，事务会把所有操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p><p>基本操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">-- 1. 查询张三账户余额</span><br><span class="line">select * from account where name = &#x27;张三&#x27;;</span><br><span class="line">-- 2. 将张三账户余额-1000</span><br><span class="line">update account set money = money - 1000 where name = &#x27;张三&#x27;;</span><br><span class="line">-- 此语句出错后张三钱减少但是李四钱没有增加</span><br><span class="line">模拟sql语句错误</span><br><span class="line">-- 3. 将李四账户余额+1000</span><br><span class="line">update account set money = money + 1000 where name = &#x27;李四&#x27;;</span><br><span class="line"></span><br><span class="line">-- 查看事务提交方式</span><br><span class="line">SELECT @@AUTOCOMMIT;</span><br><span class="line">-- 设置事务提交方式，1为自动提交，0为手动提交，该设置只对当前会话有效</span><br><span class="line">SET @@AUTOCOMMIT = 0;</span><br><span class="line">-- 提交事务</span><br><span class="line">COMMIT;</span><br><span class="line">-- 回滚事务</span><br><span class="line">ROLLBACK;</span><br><span class="line"></span><br><span class="line">-- 设置手动提交后上面代码改为：</span><br><span class="line">select * from account where name = &#x27;张三&#x27;;</span><br><span class="line">update account set money = money - 1000 where name = &#x27;张三&#x27;;</span><br><span class="line">update account set money = money + 1000 where name = &#x27;李四&#x27;;</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><p>操作方式二：</p><p>开启事务：<br><code>START TRANSACTION 或 BEGIN TRANSACTION;</code><br>提交事务：<br><code>COMMIT;</code><br>回滚事务：<br><code>ROLLBACK;</code></p><p>操作实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">start transaction;</span><br><span class="line">select * from account where name = &#x27;张三&#x27;;</span><br><span class="line">update account set money = money - 1000 where name = &#x27;张三&#x27;;</span><br><span class="line">update account set money = money + 1000 where name = &#x27;李四&#x27;;</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><h3 id="四大特性ACID"><a href="#四大特性ACID" class="headerlink" title="四大特性ACID"></a>四大特性ACID</h3><ul><li>原子性(Atomicity)：事务是不可分割的最小操作但愿，要么全部成功，要么全部失败</li><li>一致性(Consistency)：事务完成时，必须使所有数据都保持一致状态</li><li>隔离性(Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li><li>持久性(Durability)：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</li></ul><h3 id="并发事务"><a href="#并发事务" class="headerlink" title="并发事务"></a>并发事务</h3><table><thead><tr><th>问题</th><th>描述</th></tr></thead><tbody><tr><td>脏读</td><td>一个事务读到另一个事务还没提交的数据</td></tr><tr><td>不可重复读</td><td>一个事务先后读取同一条记录，但两次读取的数据不同</td></tr><tr><td>幻读</td><td>一个事务按照条件查询数据时，没有对应的数据行，但是再插入数据时，又发现这行数据已经存在</td></tr></tbody></table><blockquote><p>这三个问题的详细演示：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd</a> </p></blockquote><p>并发事务隔离级别：</p><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>Read uncommitted</td><td>√</td><td>√</td><td>√</td></tr><tr><td>Read committed</td><td>×</td><td>√</td><td>√</td></tr><tr><td>Repeatable Read(默认)</td><td>×</td><td>×</td><td>√</td></tr><tr><td>Serializable</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><ul><li>√表示在当前隔离级别下该问题会出现</li><li>Serializable 性能最低；Read uncommitted 性能最高，数据安全性最差</li></ul><p>查看事务隔离级别：<br><code>SELECT @@TRANSACTION_ISOLATION;</code><br>设置事务隔离级别：<br><code>SET [ SESSION | GLOBAL ] TRANSACTION ISOLATION LEVEL &#123;READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE &#125;;</code><br>SESSION 是会话级别，表示只针对当前会话有效，GLOBAL 表示对所有会话有效</p><h1 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h1><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><p>MySQL体系结构：</p><p><img src="https://dhc.pythonanywhere.com/media/editor/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84_20220315034329549927.png" alt="结构图" title="结构图"><br><img src="https://dhc.pythonanywhere.com/media/editor/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%B1%82%E7%BA%A7%E5%90%AB%E4%B9%89_20220315034359342837.png" alt="层级描述" title="层级描述"></p><p>存储引擎就是存储数据、建立索引、更新&#x2F;查询数据等技术的实现方式。存储引擎是基于表而不是基于库的，所以存储引擎也可以被称为表引擎。<br>默认存储引擎是InnoDB。</p><p>相关操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 查询建表语句</span><br><span class="line">show create table account;</span><br><span class="line">-- 建表时指定存储引擎</span><br><span class="line">CREATE TABLE 表名(</span><br><span class="line">...</span><br><span class="line">) ENGINE=INNODB;</span><br><span class="line">-- 查看当前数据库支持的存储引擎</span><br><span class="line">show engines;</span><br></pre></td></tr></table></figure><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><p>InnoDB 是一种兼顾高可靠性和高性能的通用存储引擎，在 MySQL 5.5 之后，InnoDB 是默认的 MySQL 引擎。</p><p>特点：</p><ul><li>DML 操作遵循 ACID 模型，支持<strong>事务</strong></li><li><strong>行级锁</strong>，提高并发访问性能</li><li>支持<strong>外键</strong>约束，保证数据的完整性和正确性</li></ul><p>文件：</p><ul><li>xxx.ibd: xxx代表表名，InnoDB 引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm、sdi）、数据和索引。</li></ul><p>参数：innodb_file_per_table，决定多张表共享一个表空间还是每张表对应一个表空间</p><p>知识点：</p><p>查看 Mysql 变量：<br><code>show variables like &#39;innodb_file_per_table&#39;;</code></p><p>从idb文件提取表结构数据：<br>（在cmd运行）<br><code>ibd2sdi xxx.ibd</code></p><p>InnoDB 逻辑存储结构：<br><img src="https://dhc.pythonanywhere.com/media/editor/%E9%80%BB%E8%BE%91%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84_20220316030616590001.png" alt="InnoDB逻辑存储结构" title="InnoDB逻辑存储结构"></p><h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><p>MyISAM 是 MySQL 早期的默认存储引擎。</p><p>特点：</p><ul><li>不支持事务，不支持外键</li><li>支持表锁，不支持行锁</li><li>访问速度快</li></ul><p>文件：</p><ul><li>xxx.sdi: 存储表结构信息</li><li>xxx.MYD: 存储数据</li><li>xxx.MYI: 存储索引</li></ul><h3 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h3><p>Memory 引擎的表数据是存储在内存中的，受硬件问题、断电问题的影响，只能将这些表作为临时表或缓存使用。</p><p>特点：</p><ul><li>存放在内存中，速度快</li><li>hash索引（默认）</li></ul><p>文件：</p><ul><li>xxx.sdi: 存储表结构信息</li></ul><h3 id="存储引擎特点"><a href="#存储引擎特点" class="headerlink" title="存储引擎特点"></a>存储引擎特点</h3><table><thead><tr><th>特点</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>存储限制</td><td>64TB</td><td>有</td><td>有</td></tr><tr><td>事务安全</td><td>支持</td><td>-</td><td>-</td></tr><tr><td>锁机制</td><td>行锁</td><td>表锁</td><td>表锁</td></tr><tr><td>B+tree索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Hash索引</td><td>-</td><td>-</td><td>支持</td></tr><tr><td>全文索引</td><td>支持（5.6版本之后）</td><td>支持</td><td>-</td></tr><tr><td>空间使用</td><td>高</td><td>低</td><td>N&#x2F;A</td></tr><tr><td>内存使用</td><td>高</td><td>低</td><td>中等</td></tr><tr><td>批量插入速度</td><td>低</td><td>高</td><td>高</td></tr><tr><td>支持外键</td><td>支持</td><td>-</td><td>-</td></tr></tbody></table><h3 id="存储引擎的选择"><a href="#存储引擎的选择" class="headerlink" title="存储引擎的选择"></a>存储引擎的选择</h3><p>在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。</p><ul><li>InnoDB: 如果应用对事物的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，则 InnoDB 是比较合适的选择</li><li>MyISAM: 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不高，那这个存储引擎是非常合适的。</li><li>Memory: 将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。Memory 的缺陷是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性</li></ul><p>电商中的足迹和评论适合使用 MyISAM 引擎，缓存适合使用 Memory 引擎。</p><h2 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h2><h3 id="查看执行频次"><a href="#查看执行频次" class="headerlink" title="查看执行频次"></a>查看执行频次</h3><p>查看当前数据库的 INSERT, UPDATE, DELETE, SELECT 访问频次：<br><code>SHOW GLOBAL STATUS LIKE &#39;Com_______&#39;;</code> 或者 <code>SHOW SESSION STATUS LIKE &#39;Com_______&#39;;</code><br>例：<code>show global status like &#39;Com_______&#39;</code></p><h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h3><p>慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认10秒）的所有SQL语句的日志。<br>MySQL的慢查询日志默认没有开启，需要在MySQL的配置文件（&#x2F;etc&#x2F;my.cnf）中配置如下信息：<br>    # 开启慢查询日志开关<br>    slow_query_log&#x3D;1<br>    # 设置慢查询日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志<br>    long_query_time&#x3D;2<br>更改后记得重启MySQL服务，日志文件位置：&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;localhost-slow.log</p><p>查看慢查询日志开关状态：<br><code>show variables like &#39;slow_query_log&#39;;</code></p><h3 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h3><p>show profile 能在做SQL优化时帮我们了解时间都耗费在哪里。通过 have_profiling 参数，能看到当前 MySQL 是否支持 profile 操作：<br><code>SELECT @@have_profiling;</code><br>profiling 默认关闭，可以通过set语句在session&#x2F;global级别开启 profiling：<br><code>SET profiling = 1;</code><br>查看所有语句的耗时：<br><code>show profiles;</code><br>查看指定query_id的SQL语句各个阶段的耗时：<br><code>show profile for query query_id;</code><br>查看指定query_id的SQL语句CPU的使用情况<br><code>show profile cpu for query query_id;</code></p><h3 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h3><p>EXPLAIN 或者 DESC 命令获取 MySQL 如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。<br>语法：<br>    # 直接在select语句之前加上关键字 explain &#x2F; desc<br>    EXPLAIN SELECT 字段列表 FROM 表名 HWERE 条件;</p><p>EXPLAIN 各字段含义：</p><ul><li>id：select 查询的序列号，表示查询中执行 select 子句或者操作表的顺序（id相同，执行顺序从上到下；id不同，值越大越先执行）</li><li>select_type：表示 SELECT 的类型，常见取值有 SIMPLE（简单表，即不适用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION中的第二个或者后面的查询语句）、SUBQUERY（SELECT&#x2F;WHERE之后包含了子查询）等</li><li>type：表示连接类型，性能由好到差的连接类型为 NULL、system、const、eq_ref、ref、range、index、all</li><li>possible_key：可能应用在这张表上的索引，一个或多个</li><li>Key：实际使用的索引，如果为 NULL，则没有使用索引</li><li>Key_len：表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好</li><li>rows：MySQL认为必须要执行的行数，在InnoDB引擎的表中，是一个估计值，可能并不总是准确的</li><li>filtered：表示返回结果的行数占需读取行数的百分比，filtered的值越大越好</li></ul><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>索引是帮助 MySQL <strong>高效获取数据</strong>的<strong>数据结构（有序）</strong>。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查询算法，这种数据结构就是索引。</p><p>优缺点：</p><p>优点：</p><ul><li>提高数据检索效率，降低数据库的IO成本</li><li>通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗</li></ul><p>缺点：</p><ul><li>索引列也是要占用空间的</li><li>索引大大提高了查询效率，但降低了更新的速度，比如 INSERT、UPDATE、DELETE</li></ul><h3 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h3><table><thead><tr><th>索引结构</th><th>描述</th></tr></thead><tbody><tr><td>B+Tree</td><td>最常见的索引类型，大部分引擎都支持B+树索引</td></tr><tr><td>Hash</td><td>底层数据结构是用哈希表实现，只有精确匹配索引列的查询才有效，不支持范围查询</td></tr><tr><td>R-Tree(空间索引)</td><td>空间索引是 MyISAM 引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少</td></tr><tr><td>Full-Text(全文索引)</td><td>是一种通过建立倒排索引，快速匹配文档的方式，类似于 Lucene, Solr, ES</td></tr></tbody></table><table><thead><tr><th>索引</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>B+Tree索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Hash索引</td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td>R-Tree索引</td><td>不支持</td><td>支持</td><td>不支持</td></tr><tr><td>Full-text</td><td>5.6版本后支持</td><td>支持</td><td>不支持</td></tr></tbody></table><h4 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B-Tree"></a>B-Tree</h4><p><img src="https://dhc.pythonanywhere.com/media/editor/%E4%BA%8C%E5%8F%89%E6%A0%91_20220316153214227108.png" alt="二叉树" title="二叉树"></p><p>二叉树的缺点可以用红黑树来解决：<br><img src="https://dhc.pythonanywhere.com/media/editor/%E7%BA%A2%E9%BB%91%E6%A0%91_20220316163142686602.png" alt="红黑树" title="红黑树"><br>红黑树也存在大数据量情况下，层级较深，检索速度慢的问题。</p><p>为了解决上述问题，可以使用 B-Tree 结构。<br>B-Tree (多路平衡查找树) 以一棵最大度数（max-degree，指一个节点的子节点个数）为5（5阶）的 b-tree 为例（每个节点最多存储4个key，5个指针）</p><p><img src="https://dhc.pythonanywhere.com/media/editor/B-Tree%E7%BB%93%E6%9E%84_20220316163813441163.png" alt="B-Tree结构" title="B-Tree结构"></p><blockquote><p>B-Tree 的数据插入过程动画参照：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68</a><br>演示地址：<a href="https://www.cs.usfca.edu/~galles/visualization/BTree.html">https://www.cs.usfca.edu/~galles/visualization/BTree.html</a></p></blockquote><h4 id="B-Tree-1"><a href="#B-Tree-1" class="headerlink" title="B+Tree"></a>B+Tree</h4><p>结构图：</p><p><img src="https://dhc.pythonanywhere.com/media/editor/B+Tree%E7%BB%93%E6%9E%84%E5%9B%BE_20220316170700591277.png" alt="B+Tree结构图" title="B+Tree结构图"></p><blockquote><p>演示地址：<a href="https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html">https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html</a></p></blockquote><p>与 B-Tree 的区别：</p><ul><li>所有的数据都会出现在叶子节点</li><li>叶子节点形成一个单向链表</li></ul><p>MySQL 索引数据结构对经典的 B+Tree 进行了优化。在原 B+Tree 的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的 B+Tree，提高区间访问的性能。</p><p><img src="https://dhc.pythonanywhere.com/media/editor/%E7%BB%93%E6%9E%84%E5%9B%BE_20220316171730865611.png" alt="MySQL B+Tree 结构图" title="MySQL B+Tree 结构图"></p><h4 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h4><p>哈希索引就是采用一定的hash算法，将键值换算成新的hash值，映射到对应的槽位上，然后存储在hash表中。<br>如果两个（或多个）键值，映射到一个相同的槽位上，他们就产生了hash冲突（也称为hash碰撞），可以通过链表来解决。</p><p><img src="https://dhc.pythonanywhere.com/media/editor/Hash%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86%E5%9B%BE_20220317143226150679.png" alt="Hash索引原理图" title="Hash索引原理图"></p><p>特点：</p><ul><li>Hash索引只能用于对等比较（&#x3D;、in），不支持范围查询（betwwn、&gt;、&lt;、…）</li><li>无法利用索引完成排序操作</li><li>查询效率高，通常只需要一次检索就可以了，效率通常要高于 B+Tree 索引</li></ul><p>存储引擎支持：</p><ul><li>Memory</li><li>InnoDB: 具有自适应hash功能，hash索引是存储引擎根据 B+Tree 索引在指定条件下自动构建的</li></ul><h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><ol><li>为什么 InnoDB 存储引擎选择使用 B+Tree 索引结构？</li></ol><ul><li>相对于二叉树，层级更少，搜索效率高</li><li>对于 B-Tree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储的键值减少，指针也跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低</li><li>相对于 Hash 索引，B+Tree 支持范围匹配及排序操作</li></ul><h3 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h3><table><thead><tr><th>分类</th><th>含义</th><th>特点</th><th>关键字</th></tr></thead><tbody><tr><td>主键索引</td><td>针对于表中主键创建的索引</td><td>默认自动创建，只能有一个</td><td>PRIMARY</td></tr><tr><td>唯一索引</td><td>避免同一个表中某数据列中的值重复</td><td>可以有多个</td><td>UNIQUE</td></tr><tr><td>常规索引</td><td>快速定位特定数据</td><td>可以有多个</td><td></td></tr><tr><td>全文索引</td><td>全文索引查找的是文本中的关键词，而不是比较索引中的值</td><td>可以有多个</td><td>FULLTEXT</td></tr></tbody></table><p>在 InnoDB 存储引擎中，根据索引的存储形式，又可以分为以下两种：</p><table><thead><tr><th>分类</th><th>含义</th><th>特点</th></tr></thead><tbody><tr><td>聚集索引(Clustered Index)</td><td>将数据存储与索引放一块，索引结构的叶子节点保存了行数据</td><td>必须有，而且只有一个</td></tr><tr><td>二级索引(Secondary Index)</td><td>将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键</td><td>可以存在多个</td></tr></tbody></table><p>演示图：</p><p><img src="https://dhc.pythonanywhere.com/media/editor/%E5%8E%9F%E7%90%86%E5%9B%BE_20220318194454880073.png" alt="大致原理" title="大致原理"><br><img src="https://dhc.pythonanywhere.com/media/editor/%E6%BC%94%E7%A4%BA%E5%9B%BE_20220319215403721066.png" alt="演示图" title="演示图"></p><p>聚集索引选取规则：</p><ul><li>如果存在主键，主键索引就是聚集索引</li><li>如果不存在主键，将使用第一个唯一(UNIQUE)索引作为聚集索引</li><li>如果表没有主键或没有合适的唯一索引，则 InnoDB 会自动生成一个 rowid 作为隐藏的聚集索引</li></ul><h4 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h4><p>1. 以下 SQL 语句，哪个执行效率高？为什么？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from user where id = 10;</span><br><span class="line">select * from user where name = &#x27;Arm&#x27;;</span><br><span class="line">-- 备注：id为主键，name字段创建的有索引</span><br></pre></td></tr></table></figure><p>答：第一条语句，因为第二条需要回表查询，相当于两个步骤。</p><p>2. InnoDB 主键索引的 B+Tree 高度为多少？</p><p>答：假设一行数据大小为1k，一页中可以存储16行这样的数据。InnoDB 的指针占用6个字节的空间，主键假设为bigint，占用字节数为8.<br>可得公式：<code>n * 8 + (n + 1) * 6 = 16 * 1024</code>，其中 8 表示 bigint 占用的字节数，n 表示当前节点存储的key的数量，(n + 1) 表示指针数量（比key多一个）。算出n约为1170。</p><p>如果树的高度为2，那么他能存储的数据量大概为：<code>1171 * 16 = 18736</code>；<br>如果树的高度为3，那么他能存储的数据量大概为：<code>1171 * 1171 * 16 = 21939856</code>。</p><p>另外，如果有成千上万的数据，那么就要考虑分表，涉及运维篇知识。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>创建索引：<br><code>CREATE [ UNIQUE | FULLTEXT ] INDEX index_name ON table_name (index_col_name, ...);</code><br>如果不加 CREATE 后面不加索引类型参数，则创建的是常规索引</p><p>查看索引：<br><code>SHOW INDEX FROM table_name;</code></p><p>删除索引：<br><code>DROP INDEX index_name ON table_name;</code></p><p>案例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- name字段为姓名字段，该字段的值可能会重复，为该字段创建索引</span><br><span class="line">create index idx_user_name on tb_user(name);</span><br><span class="line">-- phone手机号字段的值非空，且唯一，为该字段创建唯一索引</span><br><span class="line">create unique index idx_user_phone on tb_user (phone);</span><br><span class="line">-- 为profession, age, status创建联合索引</span><br><span class="line">create index idx_user_pro_age_stat on tb_user(profession, age, status);</span><br><span class="line">-- 为email建立合适的索引来提升查询效率</span><br><span class="line">create index idx_user_email on tb_user(email);</span><br><span class="line"></span><br><span class="line">-- 删除索引</span><br><span class="line">drop index idx_user_email on tb_user;</span><br></pre></td></tr></table></figure><h3 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h3><h4 id="最左前缀法则"><a href="#最左前缀法则" class="headerlink" title="最左前缀法则"></a>最左前缀法则</h4><p>如果索引关联了多列（联合索引），要遵守最左前缀法则，最左前缀法则指的是查询从索引的最左列开始，并且不跳过索引中的列。<br>如果跳跃某一列，索引将部分失效（后面的字段索引失效）。</p><p>联合索引中，出现范围查询（&lt;, &gt;），范围查询右侧的列索引失效。可以用&gt;&#x3D;或者&lt;&#x3D;来规避索引失效问题。</p><h4 id="索引失效情况"><a href="#索引失效情况" class="headerlink" title="索引失效情况"></a>索引失效情况</h4><ol><li>在索引列上进行运算操作，索引将失效。如：<code>explain select * from tb_user where substring(phone, 10, 2) = &#39;15&#39;;</code></li><li>字符串类型字段使用时，不加引号，索引将失效。如：<code>explain select * from tb_user where phone = 17799990015;</code>，此处phone的值没有加引号</li><li>模糊查询中，如果仅仅是尾部模糊匹配，索引不会是失效；如果是头部模糊匹配，索引失效。如：<code>explain select * from tb_user where profession like &#39;%工程&#39;;</code>，前后都有 % 也会失效。</li><li>用 or 分割开的条件，如果 or 其中一个条件的列没有索引，那么涉及的索引都不会被用到。</li><li>如果 MySQL 评估使用索引比全表更慢，则不使用索引。</li></ol><h4 id="SQL-提示"><a href="#SQL-提示" class="headerlink" title="SQL 提示"></a>SQL 提示</h4><p>是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的。</p><p>例如，使用索引：<br><code>explain select * from tb_user use index(idx_user_pro) where profession=&quot;软件工程&quot;;</code><br>不使用哪个索引：<br><code>explain select * from tb_user ignore index(idx_user_pro) where profession=&quot;软件工程&quot;;</code><br>必须使用哪个索引：<br><code>explain select * from tb_user force index(idx_user_pro) where profession=&quot;软件工程&quot;;</code></p><p>use 是建议，实际使用哪个索引 MySQL 还会自己权衡运行速度去更改，force就是无论如何都强制使用该索引。</p><h4 id="覆盖索引-amp-回表查询"><a href="#覆盖索引-amp-回表查询" class="headerlink" title="覆盖索引&amp;回表查询"></a>覆盖索引&amp;回表查询</h4><p>尽量使用覆盖索引（查询使用了索引，并且需要返回的列，在该索引中已经全部能找到），减少 select *。</p><p>explain 中 extra 字段含义：<br><code>using index condition</code>：查找使用了索引，但是需要回表查询数据<br><code>using where; using index;</code>：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询</p><p>如果在聚集索引中直接能找到对应的行，则直接返回行数据，只需要一次查询，哪怕是select *；如果在辅助索引中找聚集索引，如<code>select id, name from xxx where name=&#39;xxx&#39;;</code>，也只需要通过辅助索引(name)查找到对应的id，返回name和name索引对应的id即可，只需要一次查询；如果是通过辅助索引查找其他字段，则需要回表查询，如<code>select id, name, gender from xxx where name=&#39;xxx&#39;;</code></p><p>所以尽量不要用<code>select *</code>，容易出现回表查询，降低效率，除非有联合索引包含了所有字段</p><p>面试题：一张表，有四个字段（id, username, password, status），由于数据量大，需要对以下SQL语句进行优化，该如何进行才是最优方案：<br><code>select id, username, password from tb_user where username=&#39;itcast&#39;;</code></p><p>解：给username和password字段建立联合索引，则不需要回表查询，直接覆盖索引</p><h4 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h4><p>当字段类型为字符串（varchar, text等）时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘IO，影响查询效率，此时可以只降字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率。</p><p>语法：<code>create index idx_xxxx on table_name(columnn(n));</code><br>前缀长度：可以根据索引的选择性来决定，而选择性是指不重复的索引值（基数）和数据表的记录总数的比值，索引选择性越高则查询效率越高，唯一索引的选择性是1，这是最好的索引选择性，性能也是最好的。<br>求选择性公式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select count(distinct email) / count(*) from tb_user;</span><br><span class="line">select count(distinct substring(email, 1, 5)) / count(*) from tb_user;</span><br></pre></td></tr></table></figure><p>show index 里面的sub_part可以看到接取的长度</p><h4 id="单列索引-amp-联合索引"><a href="#单列索引-amp-联合索引" class="headerlink" title="单列索引&amp;联合索引"></a>单列索引&amp;联合索引</h4><p>单列索引：即一个索引只包含单个列<br>联合索引：即一个索引包含了多个列<br>在业务场景中，如果存在多个查询条件，考虑针对于查询字段建立索引时，建议建立联合索引，而非单列索引。</p><p>单列索引情况：<br><code>explain select id, phone, name from tb_user where phone = &#39;17799990010&#39; and name = &#39;韩信&#39;;</code><br>这句只会用到phone索引字段</p><h5 id="注意事项-8"><a href="#注意事项-8" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>多条件联合查询时，MySQL优化器会评估哪个字段的索引效率更高，会选择该索引完成本次查询</li></ul><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><ol><li>针对于数据量较大，且查询比较频繁的表建立索引</li><li>针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引</li><li>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高</li><li>如果是字符串类型的字段，字段长度较长，可以针对于字段的特点，建立前缀索引</li><li>尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率</li><li>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价就越大，会影响增删改的效率</li><li>如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询</li></ol><h2 id="SQL-优化"><a href="#SQL-优化" class="headerlink" title="SQL 优化"></a>SQL 优化</h2><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p>普通插入：</p><ol><li>采用批量插入（一次插入的数据不建议超过1000条）</li><li>手动提交事务</li><li>主键顺序插入</li></ol><p>大批量插入：<br>如果一次性需要插入大批量数据，使用insert语句插入性能较低，此时可以使用MySQL数据库提供的load指令插入。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 客户端连接服务端时，加上参数 --local-infile（这一行在bash/cmd界面输入）</span><br><span class="line">mysql --local-infile -u root -p</span><br><span class="line"># 设置全局参数local_infile为1，开启从本地加载文件导入数据的开关</span><br><span class="line">set global local_infile = 1;</span><br><span class="line">select @@local_infile;</span><br><span class="line"># 执行load指令将准备好的数据，加载到表结构中</span><br><span class="line">load data local infile &#x27;/root/sql1.log&#x27; into table &#x27;tb_user&#x27; fields terminated by &#x27;,&#x27; lines terminated by &#x27;\n&#x27;;</span><br></pre></td></tr></table></figure><h3 id="主键优化"><a href="#主键优化" class="headerlink" title="主键优化"></a>主键优化</h3><p>数据组织方式：在InnoDB存储引擎中，表数据都是根据主键顺序组织存放的，这种存储方式的表称为索引组织表（Index organized table, IOT）</p><p>页分裂：页可以为空，也可以填充一般，也可以填充100%，每个页包含了2-N行数据（如果一行数据过大，会行溢出），根据主键排列。<br>页合并：当删除一行记录时，实际上记录并没有被物理删除，只是记录被标记（flaged）为删除并且它的空间变得允许被其他记录声明使用。当页中删除的记录到达 MERGE_THRESHOLD（默认为页的50%），InnoDB会开始寻找最靠近的页（前后）看看是否可以将这两个页合并以优化空间使用。</p><p>MERGE_THRESHOLD：合并页的阈值，可以自己设置，在创建表或创建索引时指定</p><blockquote><p>文字说明不够清晰明了，具体可以看视频里的PPT演示过程：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=90">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=90</a></p></blockquote><p>主键设计原则：</p><ul><li>满足业务需求的情况下，尽量降低主键的长度</li><li>插入数据时，尽量选择顺序插入，选择使用 AUTO_INCREMENT 自增主键</li><li>尽量不要使用 UUID 做主键或者是其他的自然主键，如身份证号</li><li>业务操作时，避免对主键的修改</li></ul><h3 id="order-by优化"><a href="#order-by优化" class="headerlink" title="order by优化"></a>order by优化</h3><ol><li>Using filesort：通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区 sort buffer 中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序</li><li>Using index：通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高</li></ol><p>如果order by字段全部使用升序排序或者降序排序，则都会走索引，但是如果一个字段升序排序，另一个字段降序排序，则不会走索引，explain的extra信息显示的是<code>Using index, Using filesort</code>，如果要优化掉Using filesort，则需要另外再创建一个索引，如：<code>create index idx_user_age_phone_ad on tb_user(age asc, phone desc);</code>，此时使用<code>select id, age, phone from tb_user order by age asc, phone desc;</code>会全部走索引</p><p>总结：</p><ul><li>根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则</li><li>尽量使用覆盖索引</li><li>多字段排序，一个升序一个降序，此时需要注意联合索引在创建时的规则（ASC&#x2F;DESC）</li><li>如果不可避免出现filesort，大数据量排序时，可以适当增大排序缓冲区大小 sort_buffer_size（默认256k）</li></ul><h3 id="group-by优化"><a href="#group-by优化" class="headerlink" title="group by优化"></a>group by优化</h3><ul><li>在分组操作时，可以通过索引来提高效率</li><li>分组操作时，索引的使用也是满足最左前缀法则的</li></ul><p>如索引为<code>idx_user_pro_age_stat</code>，则句式可以是<code>select ... where profession order by age</code>，这样也符合最左前缀法则</p><h3 id="limit优化"><a href="#limit优化" class="headerlink" title="limit优化"></a>limit优化</h3><p>常见的问题如<code>limit 2000000, 10</code>，此时需要 MySQL 排序前2000000条记录，但仅仅返回2000000 - 2000010的记录，其他记录丢弃，查询排序的代价非常大。<br>优化方案：一般分页查询时，通过创建覆盖索引能够比较好地提高性能，可以通过覆盖索引加子查询形式进行优化</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 此语句耗时很长</span><br><span class="line">select * from tb_sku limit 9000000, 10;</span><br><span class="line">-- 通过覆盖索引加快速度，直接通过主键索引进行排序及查询</span><br><span class="line">select id from tb_sku order by id limit 9000000, 10;</span><br><span class="line">-- 下面的语句是错误的，因为 MySQL 不支持 in 里面使用 limit</span><br><span class="line">-- select * from tb_sku where id in (select id from tb_sku order by id limit 9000000, 10);</span><br><span class="line">-- 通过连表查询即可实现第一句的效果，并且能达到第二句的速度</span><br><span class="line">select * from tb_sku as s, (select id from tb_sku order by id limit 9000000, 10) as a where s.id = a.id;</span><br></pre></td></tr></table></figure><h3 id="count优化"><a href="#count优化" class="headerlink" title="count优化"></a>count优化</h3><p>MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count(*) 的时候会直接返回这个数，效率很高（前提是不适用where）；<br>InnoDB 在执行 count(*) 时，需要把数据一行一行地从引擎里面读出来，然后累计计数。<br>优化方案：自己计数，如创建key-value表存储在内存或硬盘，或者是用redis</p><p>count的几种用法：</p><ul><li>如果count函数的参数（count里面写的那个字段）不是NULL（字段值不为NULL），累计值就加一，最后返回累计值</li><li>用法：count(*)、count(主键)、count(字段)、count(1)</li><li>count(主键)跟count(*)一样，因为主键不能为空；count(字段)只计算字段值不为NULL的行；count(1)引擎会为每行添加一个1，然后就count这个1，返回结果也跟count(*)一样；count(null)返回0</li></ul><p>各种用法的性能：</p><ul><li>count(主键)：InnoDB引擎会遍历整张表，把每行的主键id值都取出来，返回给服务层，服务层拿到主键后，直接按行进行累加（主键不可能为空）</li><li>count(字段)：没有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，服务层判断是否为null，不为null，计数累加；有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，直接按行进行累加</li><li>count(1)：InnoDB 引擎遍历整张表，但不取值。服务层对于返回的每一层，放一个数字 1 进去，直接按行进行累加</li><li>count(*)：InnoDB 引擎并不会把全部字段取出来，而是专门做了优化，不取值，服务层直接按行进行累加</li></ul><p>按效率排序：count(字段) &lt; count(主键) &lt; count(1) &lt; count(*)，所以尽量使用 count(*)</p><h3 id="update优化（避免行锁升级为表锁）"><a href="#update优化（避免行锁升级为表锁）" class="headerlink" title="update优化（避免行锁升级为表锁）"></a>update优化（避免行锁升级为表锁）</h3><p>InnoDB 的行锁是针对索引加的锁，不是针对记录加的锁，并且该索引不能失效，否则会从行锁升级为表锁。</p><p>如以下两条语句：<br><code>update student set no = &#39;123&#39; where id = 1;</code>，这句由于id有主键索引，所以只会锁这一行；<br><code>update student set no = &#39;123&#39; where name = &#39;test&#39;;</code>，这句由于name没有索引，所以会把整张表都锁住进行数据更新，解决方法是给name字段添加索引</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><table><thead><tr><th>类型名称</th><th>取值范围</th><th>大小</th></tr></thead><tbody><tr><td>TINYINT</td><td>-128〜127</td><td>1个字节</td></tr><tr><td>SMALLINT</td><td>-32768〜32767</td><td>2个宇节</td></tr><tr><td>MEDIUMINT</td><td>-8388608〜8388607</td><td>3个字节</td></tr><tr><td>INT (INTEGHR)</td><td>-2147483648〜2147483647</td><td>4个字节</td></tr><tr><td>BIGINT</td><td>-9223372036854775808〜9223372036854775807</td><td>8个字节</td></tr></tbody></table><p>无符号在数据类型后加 unsigned 关键字。</p><h2 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h2><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td>FLOAT</td><td>单精度浮点数</td><td>4 个字节</td></tr><tr><td>DOUBLE</td><td>双精度浮点数</td><td>8 个字节</td></tr><tr><td>DECIMAL (M, D)，DEC</td><td>压缩的“严格”定点数</td><td>M+2 个字节</td></tr></tbody></table><h2 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h2><table><thead><tr><th>类型名称</th><th>日期格式</th><th>日期范围</th><th>存储需求</th></tr></thead><tbody><tr><td>YEAR</td><td>YYYY</td><td>1901 ~ 2155</td><td>1 个字节</td></tr><tr><td>TIME</td><td>HH:MM:SS</td><td>-838:59:59 ~ 838:59:59</td><td>3 个字节</td></tr><tr><td>DATE</td><td>YYYY-MM-DD</td><td>1000-01-01 ~ 9999-12-3</td><td>3 个字节</td></tr><tr><td>DATETIME</td><td>YYYY-MM-DD HH:MM:SS</td><td>1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</td><td>8 个字节</td></tr><tr><td>TIMESTAMP</td><td>YYYY-MM-DD HH:MM:SS</td><td>1980-01-01 00:00:01 UTC ~ 2040-01-19 03:14:07 UTC</td><td>4 个字节</td></tr></tbody></table><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td>CHAR(M)</td><td>固定长度非二进制字符串</td><td>M 字节，1&lt;&#x3D;M&lt;&#x3D;255</td></tr><tr><td>VARCHAR(M)</td><td>变长非二进制字符串</td><td>L+1字节，在此，L&lt; &#x3D; M和 1&lt;&#x3D;M&lt;&#x3D;255</td></tr><tr><td>TINYTEXT</td><td>非常小的非二进制字符串</td><td>L+1字节，在此，L&lt;2^8</td></tr><tr><td>TEXT</td><td>小的非二进制字符串</td><td>L+2字节，在此，L&lt;2^16</td></tr><tr><td>MEDIUMTEXT</td><td>中等大小的非二进制字符串</td><td>L+3字节，在此，L&lt;2^24</td></tr><tr><td>LONGTEXT</td><td>大的非二进制字符串</td><td>L+4字节，在此，L&lt;2^32</td></tr><tr><td>ENUM</td><td>枚举类型，只能有一个枚举字符串值</td><td>1或2个字节，取决于枚举值的数目 (最大值为65535)</td></tr><tr><td>SET</td><td>一个设置，字符串对象可以有零个或 多个SET成员</td><td>1、2、3、4或8个字节，取决于集合 成员的数量（最多64个成员）</td></tr></tbody></table><h2 id="二进制类型"><a href="#二进制类型" class="headerlink" title="二进制类型"></a>二进制类型</h2><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td>BIT(M)</td><td>位字段类型</td><td>大约 (M+7)&#x2F;8 字节</td></tr><tr><td>BINARY(M)</td><td>固定长度二进制字符串</td><td>M 字节</td></tr><tr><td>VARBINARY (M)</td><td>可变长度二进制字符串</td><td>M+1 字节</td></tr><tr><td>TINYBLOB (M)</td><td>非常小的BLOB</td><td>L+1 字节，在此，L&lt;2^8</td></tr><tr><td>BLOB (M)</td><td>小 BLOB</td><td>L+2 字节，在此，L&lt;2^16</td></tr><tr><td>MEDIUMBLOB (M)</td><td>中等大小的BLOB</td><td>L+3 字节，在此，L&lt;2^24</td></tr><tr><td>LONGBLOB (M)</td><td>非常大的BLOB</td><td>L+4 字节，在此，L&lt;2^32</td></tr></tbody></table><h1 id="权限一览表"><a href="#权限一览表" class="headerlink" title="权限一览表"></a>权限一览表</h1><blockquote><p>具体权限的作用详见<a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html" title="官方文档">官方文档</a></p></blockquote><p>GRANT 和 REVOKE 允许的静态权限</p><table><thead><tr><th align="left">Privilege</th><th align="left">Grant Table Column</th><th align="left">Context</th></tr></thead><tbody><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_all"><code>ALL [PRIVILEGES]</code></a></td><td align="left">Synonym for “all privileges”</td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter"><code>ALTER</code></a></td><td align="left"><code>Alter_priv</code></td><td align="left">Tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter-routine"><code>ALTER ROUTINE</code></a></td><td align="left"><code>Alter_routine_priv</code></td><td align="left">Stored routines</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create"><code>CREATE</code></a></td><td align="left"><code>Create_priv</code></td><td align="left">Databases, tables, or indexes</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-role"><code>CREATE ROLE</code></a></td><td align="left"><code>Create_role_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-routine"><code>CREATE ROUTINE</code></a></td><td align="left"><code>Create_routine_priv</code></td><td align="left">Stored routines</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-tablespace"><code>CREATE TABLESPACE</code></a></td><td align="left"><code>Create_tablespace_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-temporary-tables"><code>CREATE TEMPORARY TABLES</code></a></td><td align="left"><code>Create_tmp_table_priv</code></td><td align="left">Tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-user"><code>CREATE USER</code></a></td><td align="left"><code>Create_user_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-view"><code>CREATE VIEW</code></a></td><td align="left"><code>Create_view_priv</code></td><td align="left">Views</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_delete"><code>DELETE</code></a></td><td align="left"><code>Delete_priv</code></td><td align="left">Tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop"><code>DROP</code></a></td><td align="left"><code>Drop_priv</code></td><td align="left">Databases, tables, or views</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop-role"><code>DROP ROLE</code></a></td><td align="left"><code>Drop_role_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_event"><code>EVENT</code></a></td><td align="left"><code>Event_priv</code></td><td align="left">Databases</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_execute"><code>EXECUTE</code></a></td><td align="left"><code>Execute_priv</code></td><td align="left">Stored routines</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_file"><code>FILE</code></a></td><td align="left"><code>File_priv</code></td><td align="left">File access on server host</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_grant-option"><code>GRANT OPTION</code></a></td><td align="left"><code>Grant_priv</code></td><td align="left">Databases, tables, or stored routines</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_index"><code>INDEX</code></a></td><td align="left"><code>Index_priv</code></td><td align="left">Tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_insert"><code>INSERT</code></a></td><td align="left"><code>Insert_priv</code></td><td align="left">Tables or columns</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_lock-tables"><code>LOCK TABLES</code></a></td><td align="left"><code>Lock_tables_priv</code></td><td align="left">Databases</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_process"><code>PROCESS</code></a></td><td align="left"><code>Process_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_proxy"><code>PROXY</code></a></td><td align="left">See <code>proxies_priv</code> table</td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_references"><code>REFERENCES</code></a></td><td align="left"><code>References_priv</code></td><td align="left">Databases or tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_reload"><code>RELOAD</code></a></td><td align="left"><code>Reload_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-client"><code>REPLICATION CLIENT</code></a></td><td align="left"><code>Repl_client_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave"><code>REPLICATION SLAVE</code></a></td><td align="left"><code>Repl_slave_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_select"><code>SELECT</code></a></td><td align="left"><code>Select_priv</code></td><td align="left">Tables or columns</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-databases"><code>SHOW DATABASES</code></a></td><td align="left"><code>Show_db_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-view"><code>SHOW VIEW</code></a></td><td align="left"><code>Show_view_priv</code></td><td align="left">Views</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_shutdown"><code>SHUTDOWN</code></a></td><td align="left"><code>Shutdown_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_super"><code>SUPER</code></a></td><td align="left"><code>Super_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_trigger"><code>TRIGGER</code></a></td><td align="left"><code>Trigger_priv</code></td><td align="left">Tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_update"><code>UPDATE</code></a></td><td align="left"><code>Update_priv</code></td><td align="left">Tables or columns</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_usage"><code>USAGE</code></a></td><td align="left">Synonym for “no privileges”</td><td align="left">Server administration</td></tr></tbody></table><p>GRANT 和 REVOKE 允许的动态权限</p><table><thead><tr><th align="left">Privilege</th><th align="left">Context</th></tr></thead><tbody><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_application-password-admin"><code>APPLICATION_PASSWORD_ADMIN</code></a></td><td align="left">Dual password administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-abort-exempt"><code>AUDIT_ABORT_EXEMPT</code></a></td><td align="left">Allow queries blocked by audit log filter</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-admin"><code>AUDIT_ADMIN</code></a></td><td align="left">Audit log administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_authentication-policy-admin"><code>AUTHENTICATION_POLICY_ADMIN</code></a></td><td align="left">Authentication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_backup-admin"><code>BACKUP_ADMIN</code></a></td><td align="left">Backup administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-admin"><code>BINLOG_ADMIN</code></a></td><td align="left">Backup and Replication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-encryption-admin"><code>BINLOG_ENCRYPTION_ADMIN</code></a></td><td align="left">Backup and Replication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_clone-admin"><code>CLONE_ADMIN</code></a></td><td align="left">Clone administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_connection-admin"><code>CONNECTION_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_encryption-key-admin"><code>ENCRYPTION_KEY_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-admin"><code>FIREWALL_ADMIN</code></a></td><td align="left">Firewall administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-exempt"><code>FIREWALL_EXEMPT</code></a></td><td align="left">Firewall administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-user"><code>FIREWALL_USER</code></a></td><td align="left">Firewall administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-optimizer-costs"><code>FLUSH_OPTIMIZER_COSTS</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-status"><code>FLUSH_STATUS</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-tables"><code>FLUSH_TABLES</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-user-resources"><code>FLUSH_USER_RESOURCES</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-admin"><code>GROUP_REPLICATION_ADMIN</code></a></td><td align="left">Replication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-stream"><code>GROUP_REPLICATION_STREAM</code></a></td><td align="left">Replication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_innodb-redo-log-archive"><code>INNODB_REDO_LOG_ARCHIVE</code></a></td><td align="left">Redo log archiving administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_ndb-stored-user"><code>NDB_STORED_USER</code></a></td><td align="left">NDB Cluster</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_passwordless-user-admin"><code>PASSWORDLESS_USER_ADMIN</code></a></td><td align="left">Authentication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_persist-ro-variables-admin"><code>PERSIST_RO_VARIABLES_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-applier"><code>REPLICATION_APPLIER</code></a></td><td align="left"><code>PRIVILEGE_CHECKS_USER</code> for a replication channel</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave-admin"><code>REPLICATION_SLAVE_ADMIN</code></a></td><td align="left">Replication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-admin"><code>RESOURCE_GROUP_ADMIN</code></a></td><td align="left">Resource group administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-user"><code>RESOURCE_GROUP_USER</code></a></td><td align="left">Resource group administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_role-admin"><code>ROLE_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_session-variables-admin"><code>SESSION_VARIABLES_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_set-user-id"><code>SET_USER_ID</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-routine"><code>SHOW_ROUTINE</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-user"><code>SYSTEM_USER</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-variables-admin"><code>SYSTEM_VARIABLES_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_table-encryption-admin"><code>TABLE_ENCRYPTION_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_version-token-admin"><code>VERSION_TOKEN_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_xa-recover-admin"><code>XA_RECOVER_ADMIN</code></a></td><td align="left">Server administration</td></tr></tbody></table><h1 id="图形化界面工具"><a href="#图形化界面工具" class="headerlink" title="图形化界面工具"></a>图形化界面工具</h1><ul><li>Workbench(免费): <a href="http://dev.mysql.com/downloads/workbench/">http://dev.mysql.com/downloads/workbench/</a></li><li>navicat(收费，试用版30天): <a href="https://www.navicat.com/en/download/navicat-for-mysql">https://www.navicat.com/en/download/navicat-for-mysql</a></li><li>Sequel Pro(开源免费，仅支持Mac OS): <a href="http://www.sequelpro.com/">http://www.sequelpro.com/</a></li><li>HeidiSQL(免费): <a href="http://www.heidisql.com/">http://www.heidisql.com/</a></li><li>phpMyAdmin(免费): <a href="https://www.phpmyadmin.net/">https://www.phpmyadmin.net/</a></li><li>SQLyog: <a href="https://sqlyog.en.softonic.com/">https://sqlyog.en.softonic.com/</a></li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h1><ol><li>在SQL语句之后加上<code>\G</code>会将结果的表格形式转换成行文本形式</li><li>查看Mysql数据库占用空间：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT table_schema &quot;Database Name&quot;</span><br><span class="line">     , SUM(data_length + index_length) / (1024 * 1024) &quot;Database Size in MB&quot;</span><br><span class="line">FROM information_schema.TABLES</span><br><span class="line">GROUP BY table_schema;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MybatisPlus语法</title>
      <link href="/2022/mybatisplus/"/>
      <url>/2022/mybatisplus/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="MyBatisPlus入门案例与简介"><a href="#MyBatisPlus入门案例与简介" class="headerlink" title="MyBatisPlus入门案例与简介"></a>MyBatisPlus入门案例与简介</h1><ul><li><p>MyBatisPlus（简称MP）是基于MyBatis框架基础上开发的增强型工具，旨在简化开发，提高效率</p></li><li><p>开发方式</p><ul><li><p>基于MyBatis使用MyBatisPlus</p></li><li><p>基于Spring使用MyBatisPlus</p></li><li><p>基于SpringBoot使用MyBatisPlus(重点)</p><span id="more"></span></li></ul></li></ul><p><code>步骤一：</code>创建数据库和表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</span><br><span class="line">    id <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    password  <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    age <span class="type">int</span>(<span class="number">3</span>) <span class="keyword">not</span> <span class="keyword">null</span> ,</span><br><span class="line">    tel <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;tom&#x27;</span>,<span class="number">3</span>,<span class="string">&#x27;18866668888&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;Jerry&#x27;</span>,<span class="string">&#x27;jerry&#x27;</span>,<span class="number">4</span>,<span class="string">&#x27;16688886666&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;Jock&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="number">41</span>,<span class="string">&#x27;18812345678&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;略略略&#x27;</span>,<span class="string">&#x27;nigger&#x27;</span>,<span class="number">15</span>,<span class="string">&#x27;4006184000&#x27;</span>);</span><br></pre></td></tr></table></figure><p> <code>步骤二：</code>创建SpringBoot工程</p><p>只需要勾选MySQL，不用勾选MyBatis了</p><p> <code>步骤三：</code>补全依赖</p><p>导入德鲁伊和MyBatisPlus的坐标</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">XML</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.4</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.1</span><span class="number">.16</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><code>步骤四：</code>编写数据库连接四要素</p><p>还是将application的后缀名改为yml，以后配置都是用yml来配置</p><p>注意要设置一下时区，不然可能会报错（指高版本的mysql）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">YML</span><br><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql://localhost:3306/springboot_db?serverTimezone=UTC</span><br><span class="line">    username: root</span><br><span class="line">    password: YOUSONOFABTICH.</span><br><span class="line"></span><br><span class="line"># mybatis的日志信息</span><br><span class="line">mybatis-plus:</span><br><span class="line">  configuration:</span><br><span class="line">    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl步骤五：</span><br></pre></td></tr></table></figure><p>  <code>步骤五：</code>根据数据表来创建对应的模型类</p><p>  注意id是Long类型，至于为什么是Long，接着往下看</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, tel=&#x27;&quot;</span> + tel + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTel</span><span class="params">(String tel)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tel = tel;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <code>步骤六：</code>创建dao接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt;&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MyBatisPlus简介"><a href="#MyBatisPlus简介" class="headerlink" title="MyBatisPlus简介"></a>MyBatisPlus简介</h2><p>MyBatisPlus的官网为:<a href="https://mp.baomidou.com/">https://mp.baomidou.com/</a> ，没错就是个拼音，苞米豆，因为域名被抢注了，但是粉丝也捐赠了一个 <a href="https://mybatis.plus/">https://mybatis.plus</a> 域名</p><p>MP旨在成为MyBatis的最好搭档，而不是替换掉MyBatis，从名称上来看也是这个意思，一个MyBatis的plus版本，在原有的MyBatis上做增强，其底层仍然是MyBatis的东西，所以我们当然也可以在MP中写MyBatis的内容</p><p>对于MP的深入学习，可以多看看官方文档，锻炼自己自学的能力，毕竟不是所有知识都有像这样的网课，更多的还是自己看文档，挖源码。</p><p>MP的特性：</p><ul><li><code>无侵入：</code>只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li><code>损耗小：</code>启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li><code>强大的 CRUD 操作：</code>内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li><code>支持 Lambda 形式调用</code>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><code>支持主键自动生成：</code>支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><code>支持 ActiveRecord 模式：</code>支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li><code>支持自定义全局通用操作：</code>支持全局通用方法注入（ Write once, use anywhere ）</li><li><code>内置代码生成器：</code>采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li><code>内置分页插件：</code>基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><code>分页插件支持多种数据库：</code>支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li><code>内置性能分析插件：</code>可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><code>内置全局拦截插件：</code>提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>SpringBoot集成MyBatisPlus非常的简单，只需要导入<code>MyBatisPlus</code>的坐标，然后令dao类继承<code>BaseMapper</code>，写上泛型，类上方加<code>@Mapper</code>注解</p><p>可能存在的疑问：</p><ul><li><p>我甚至都没写在哪个表里查，为什么能自动识别是在我刚刚创建的表里查？</p><ul><li>注意我们创建的表，和对应的模型类，是同一个名，默认情况是在同名的表中查找</li></ul></li><li><p>那我要是表明和模型类的名不一样，那咋整？</p><ul><li><p>在模型类的上方加上</p><p><code>@TableName</code>注解</p><ul><li>例如数据表叫<code>tb_user</code>但数据类叫<code>User</code>，那么就在User类上加<code>@TableName(&quot;tb_user&quot;)</code>注解</li></ul></li></ul></li></ul><h1 id="标准数据层开发"><a href="#标准数据层开发" class="headerlink" title="标准数据层开发"></a>标准数据层开发</h1><h2 id="标准的CRUD使用"><a href="#标准的CRUD使用" class="headerlink" title="标准的CRUD使用"></a>标准的CRUD使用</h2><p>先来看看MP给我们提供了哪些方法</p><table><thead><tr><th align="center">功能</th><th align="center">自定义接口</th><th align="center">MP接口</th></tr></thead><tbody><tr><td align="center">新增</td><td align="center">boolean save(T t)</td><td align="center">int insert(T t)</td></tr><tr><td align="center">删除</td><td align="center">boolean delete(int id)</td><td align="center">int deleteById(Serializable id)</td></tr><tr><td align="center">修改</td><td align="center">boolean update(T t)</td><td align="center">int updateById(T t)</td></tr><tr><td align="center">根据id查询</td><td align="center">T getById(int id)</td><td align="center">T selectById(Serializable id)</td></tr><tr><td align="center">查询全部</td><td align="center">List<T> getAll()</td><td align="center">List<T> selectList()</td></tr><tr><td align="center">分页查询</td><td align="center">PageInfo<T> getAll(int page,int size)</td><td align="center">IPage<T> selectPage(IPage<T> page)</td></tr><tr><td align="center">按条件查询</td><td align="center">List<T> getAll(Condition condition)</td><td align="center">IPage<T> selectPage(Wrapper<T>queryWrapper)</td></tr></tbody></table><h2 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">insert</span><span class="params">(T t)</span></span><br></pre></td></tr></table></figure><p>参数类型是泛型，也就是我们当初继承BaseMapper的时候，填的泛型，返回值是int类型，0代表添加失败，1代表添加成功</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;Seto&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">23</span>);</span><br><span class="line">    user.setTel(<span class="string">&quot;4005129421&quot;</span>);</span><br><span class="line">    user.setPassword(<span class="string">&quot;MUSICIAN&quot;</span>);</span><br><span class="line">    userDao.insert(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">deleteByIds</span><span class="params">(Serializable id)</span></span><br></pre></td></tr></table></figure><ul><li><p>参数类型为什么是一个序列化类<code>Serializable</code></p><ul><li>通过查看String的源码，你会发现String实现了Serializable接口，而且Number类也实现了Serializable接口</li><li>Number类又是Float，Double，Long等类的父类</li><li>那现在能作为主键的数据类型，都已经是Serializable类型的子类了</li><li>MP使用Serializable类型当做参数类型，就好比我们用Object类型来接收所有类型一样</li></ul></li><li><p>返回值类型是int</p><ul><li>数据删除成功返回1</li><li>未删除数据返回0。</li></ul></li><li><p>那下面我们就来删除刚刚添加的数据，注意末尾加个L</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span>&#123;</span><br><span class="line">    userDao.deleteById(<span class="number">1572364408896622593L</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">updateById</span><span class="params">(T t)</span>;</span><br></pre></td></tr></table></figure><ul><li><p>T:泛型，需要修改的数据内容，注意因为是根据ID进行修改，所以传入的对象中需要有ID属性值</p></li><li><p>int:返回值</p><ul><li><p>修改成功后返回1</p></li><li><p>未修改数据返回0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;Alen&quot;</span>);</span><br><span class="line">    userDao.updateById(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>修改功能只修改指定的字段，未指定的字段保持原样</p><h2 id="根据ID查询"><a href="#根据ID查询" class="headerlink" title="根据ID查询"></a>根据ID查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T <span class="title function_">selectById</span> <span class="params">(Serializable id)</span></span><br></pre></td></tr></table></figure><ul><li><p>Serializable：参数类型,主键ID的值</p></li><li><p>T:根据ID查询只会返回一条数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSelectById</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDao.selectById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出如下</p><blockquote><p>User(id&#x3D;1, name&#x3D;Alen, password&#x3D;tom, age&#x3D;3, tel&#x3D;18866668888)</p></blockquote></li></ul><h2 id="查询全部"><a href="#查询全部" class="headerlink" title="查询全部"></a>查询全部</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;T&gt; <span class="title function_">selectList</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span></span><br></pre></td></tr></table></figure><ul><li><p>Wrapper：用来构建条件查询的条件，目前我们没有可直接传为Null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSelectAll</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;User&gt; users = userDao.selectList(<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">for</span> (User u : users) &#123;</span><br><span class="line">        System.out.println(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出如下</p><blockquote><p>User(id&#x3D;1, name&#x3D;Alen, password&#x3D;tom, age&#x3D;3, tel&#x3D;18866668888)<br>User(id&#x3D;2, name&#x3D;Jerry, password&#x3D;jerry, age&#x3D;4, tel&#x3D;16688886666)<br>User(id&#x3D;3, name&#x3D;Jock, password&#x3D;123456, age&#x3D;41, tel&#x3D;18812345678)<br>User(id&#x3D;4, name&#x3D;传智播客, password&#x3D;itcast, age&#x3D;15, tel&#x3D;4006184000)</p></blockquote></li><li><p>方法都测试完了，那你们有没有想过，这些方法都是谁提供的呢？</p><ul><li>想都不用想，肯定是我们当初继承的<code>BaseMapper</code>，里面的方法还有很多，后面我们再慢慢学习</li></ul></li></ul><h2 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h2><ul><li>代码写到这，我们发现之前的dao接口，都不用我们自己写了，只需要继承BaseMapper，用他提供的方法就好了</li><li>但是现在我还想偷点懒，毕竟懒是第一生产力，之前我们手写模型类的时候，创建好对应的属性，然后用IDEA的Alt+Insert快捷键，快速生成get和set方法，toSring，各种构造器（有需要的话）等</li><li>U1S1项目做这么久，写模型类都给我写烦了，有没有更简单的方式呢？<ul><li>答案当然是有的，可以使用Lombok，一个Java类库，提供了一组注解，来简化我们的POJO模型类开发</li></ul></li></ul><p>具体步骤如下</p><ul><li><p><code>步骤一：</code>添加Lombok依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;version&gt;1.18.12&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>版本不用设置，SpringBoot中已经管理了lombok的版本，</p></li><li><p><code>步骤二：</code>在模型类上添加注解</p><p>Lombok常见的注解有:</p><ul><li><p><code>@Setter:</code>为模型类的属性提供setter方法</p></li><li><p><code>@Getter:</code>为模型类的属性提供getter方法</p></li><li><p><code>@ToString:</code>为模型类的属性提供toString方法</p></li><li><p><code>@EqualsAndHashCode:</code>为模型类的属性提供equals和hashcode方法</p></li><li><p><code>@Data:</code>是个组合注解，包含上面的注解的功能</p></li><li><p><code>@NoArgsConstructor:</code>提供一个无参构造函数</p></li><li><p><code>@AllArgsConstructor:</code></p><p>提供一个包含所有参数的构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明:Lombok只是简化模型类的编写，我们之前的方法也能用<br>例如你有特殊的构造器需求，只想要name和password这两个参数，那么可以手写一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, String password)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.password = password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="分页功能"><a href="#分页功能" class="headerlink" title="分页功能"></a>分页功能</h2><p>基础的增删改查功能就完成了，现在我们来进行分页功能的学习</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IPage&lt;T&gt; <span class="title function_">selectPage</span><span class="params">(IPage&lt;T&gt; page, Wrapper&lt;T&gt; queryWrapper)</span></span><br></pre></td></tr></table></figure><ul><li>IPage用来构建分页查询条件</li><li>Wrapper：用来构建条件查询的条件，暂时没有条件可以传一个null</li><li>返回值IPage是什么意思，后面我们会说明</li></ul><p>具体的使用步骤如下</p><ul><li><p><code>步骤一：</code>调用方法传入参数获取返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSelectPage</span><span class="params">()</span> &#123;</span><br><span class="line">    IPage&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">    userDao.selectPage(page, <span class="literal">null</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;当前页码&quot;</span> + page.getCurrent());</span><br><span class="line">    System.out.println(<span class="string">&quot;本页条数&quot;</span> + page.getSize());</span><br><span class="line">    System.out.println(<span class="string">&quot;总页数&quot;</span> + page.getPages());</span><br><span class="line">    System.out.println(<span class="string">&quot;总条数&quot;</span> + page.getTotal());</span><br><span class="line">    System.out.println(page.getRecords());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>步骤二：</code>设置分页拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">myInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        myInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> myInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>步骤三：</code>运行测试程序</p><p>运行程序，结果如下，符合我们的预期</p><blockquote><p>当前页码1<br>本页条数3<br>总页数2<br>总条数5<br>[User(id&#x3D;1, name&#x3D;Alen, password&#x3D;tom, age&#x3D;3, tel&#x3D;18866668888), User(id&#x3D;2, name&#x3D;Jerry, password&#x3D;jerry, age&#x3D;4, tel&#x3D;16688886666), User(id&#x3D;3, name&#x3D;Jock, password&#x3D;123456, age&#x3D;41, tel&#x3D;18812345678)]</p></blockquote></li></ul><h1 id="DQL编程控制"><a href="#DQL编程控制" class="headerlink" title="DQL编程控制"></a>DQL编程控制</h1><p>增删改查四个操作中，查询是非常重要的也是非常复杂的操作，这部分我们主要学习的内容有:</p><ul><li>条件查询方式</li><li>查询投影</li><li>查询条件设定</li><li>字段映射与表名映射</li></ul><h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><h3 id="条件查询的类"><a href="#条件查询的类" class="headerlink" title="条件查询的类"></a>条件查询的类</h3><ul><li>MP将复杂的SQL查询语句都做了封装，使用编程的方式来完成查询条件的组合</li><li>之前我们在写CRUD时，都看到了一个Wrapper类，我们当初都是赋一个null值，但其实这个类就是用来查询的</li></ul><h3 id="构建条件查询"><a href="#构建条件查询" class="headerlink" title="构建条件查询"></a>构建条件查询</h3><ul><li><code>QueryWrapper</code>小于用lt，大于用gt回想之前我们在html页面中，如果需要用到小于号或者大于号，需要用对应的html实体来替换小于号的实体是<code>&amp;lt;</code>，大于号的实体是<code>&amp;gt;</code></li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testQueryWrapper</span><span class="params">()</span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; qw = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//条件为 age字段小于18</span></span><br><span class="line">    qw.lt(<span class="string">&quot;age&quot;</span>,<span class="number">18</span>);</span><br><span class="line">    List&lt;User&gt; userList = userDao.selectList(qw);</span><br><span class="line">    System.out.println(userList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  运行测试方法，结果如下</p><blockquote><p>[User(id&#x3D;1, name&#x3D;Alen, password&#x3D;tom, age&#x3D;3, tel&#x3D;18866668888), User(id&#x3D;2, name&#x3D;Jerry, password&#x3D;jerry, age&#x3D;4, tel&#x3D;16688886666), User(id&#x3D;4, name&#x3D;kyle, password&#x3D;cyan, age&#x3D;15, tel&#x3D;4006184000)]</p></blockquote><p>这种方法有个弊端，那就是字段名是字符串类型，没有提示信息和自动补全，如果写错了，那就查不出来</p><ul><li><code>QueryWrapper</code>的基础上，使用<code>lambda</code></li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testQueryWrapper</span><span class="params">()</span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; qw = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    qw.lambda().lt(User::getAge,<span class="number">18</span>);</span><br><span class="line">    List&lt;User&gt; userList = userDao.selectList(qw);</span><br><span class="line">    System.out.println(userList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <code>ser::getAget</code>,为lambda表达式中的，<code>类名::方法名</code></p><ul><li><p><code>LambdaQueryWrapper</code><br>方式二解决了方式一的弊端，但是要多些一个lambda()，那方式三就来解决方式二的弊端，使用LambdaQueryWrapper，就可以不写lambda()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testQueryWrapper</span><span class="params">()</span>&#123;</span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    lqw.lt(User::getAge,<span class="number">18</span>);</span><br><span class="line">    List&lt;User&gt; userList = userDao.selectList(lqw);</span><br><span class="line">    System.out.println(userList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="多条件查询"><a href="#多条件查询" class="headerlink" title="多条件查询"></a>多条件查询</h3><p>上面三种都是单条件的查询，那我们现在想进行多条件的查询，该如何编写代码呢？</p><p>需求：查询表中年龄在10~30岁的用户信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testQueryWrapper</span><span class="params">()</span>&#123;</span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//大于10</span></span><br><span class="line">    lqw.gt(User::getAge,<span class="number">10</span>);</span><br><span class="line">    <span class="comment">//小于30</span></span><br><span class="line">    lqw.lt(User::getAge,<span class="number">30</span>);</span><br><span class="line">    List&lt;User&gt; userList = userDao.selectList(lqw);</span><br><span class="line">    System.out.println(userList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构建多条件的时候，我们还可以使用链式编程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testQueryWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    lqw.gt(User::getAge, <span class="number">10</span>).lt(User::getAge, <span class="number">30</span>);</span><br><span class="line">    List&lt;User&gt; userList = userDao.selectList(lqw);</span><br><span class="line">    System.out.println(userList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>可能存在的疑问</p><ul><li>MP怎么就知道你这俩条件是AND的关系呢，那我要是想用OR的关系，该咋整</li></ul></li><li><p>解答</p><ul><li><p>默认就是AND的关系，如果需要OR关系，用or()链接就可以了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lqw.gt(User::getAge, <span class="number">10</span>).or().lt(User::getAge, <span class="number">30</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>需求：查询年龄小于10，或者年龄大于30的用户信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testQueryWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    lqw.lt(User::getAge, <span class="number">10</span>).or().gt(User::getAge, <span class="number">30</span>);</span><br><span class="line">    List&lt;User&gt; userList = userDao.selectList(lqw);</span><br><span class="line">    System.out.println(userList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查询投影"><a href="#查询投影" class="headerlink" title="查询投影"></a>查询投影</h2><h3 id="查询指定字段"><a href="#查询指定字段" class="headerlink" title="查询指定字段"></a>查询指定字段</h3><p>目前我们在查询数据的时候，什么都没有做默认就是查询表中所有字段的内容，我们所说的查询投影即不查询所有字段，只查询出指定内容的数据。</p><p>具体如何来实现?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testQueryWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    lqw.select(User::getName,User::getName);</span><br><span class="line">    <span class="keyword">for</span> (User user : userDao.selectList(lqw)) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>select(…)方法用来设置查询的字段列，可以设置多个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lqw.select(User::getName,User::getName);</span><br></pre></td></tr></table></figure><p>控制台输出如下</p><blockquote><p>User(id&#x3D;null, name&#x3D;Alen, password&#x3D;null, age&#x3D;null, tel&#x3D;null)<br>User(id&#x3D;null, name&#x3D;Jerry, password&#x3D;null, age&#x3D;null, tel&#x3D;null)<br>User(id&#x3D;null, name&#x3D;Jock, password&#x3D;null, age&#x3D;null, tel&#x3D;null)<br>User(id&#x3D;null, name&#x3D;kyle, password&#x3D;null, age&#x3D;null, tel&#x3D;null)<br>User(id&#x3D;null, name&#x3D;Seto, password&#x3D;null, age&#x3D;null, tel&#x3D;null)</p></blockquote><p>如果使用的不是lambda，就需要手动指定字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testQueryWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; qw = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    qw.select(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (User user : userDao.selectList(qw)) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h3><p>需求:聚合函数查询，完成count、max、min、avg、sum的使用</p><ul><li>count:总记录数</li><li>max:最大值</li><li>min:最小值</li><li>avg:平均值</li><li>sum:求和</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testQueryWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; qw = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    qw.select(<span class="string">&quot;count(*) as count&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (Map&lt;String, Object&gt; selectMap : userDao.selectMaps(qw)) &#123;</span><br><span class="line">        System.out.println(selectMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testQueryWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; qw = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    qw.select(<span class="string">&quot;max(age) as maxAge&quot;</span>);</span><br><span class="line">    qw.groupBy(<span class="string">&quot;tel&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (Map&lt;String, Object&gt; selectMap : userDao.selectMaps(qw)) &#123;</span><br><span class="line">        System.out.println(selectMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出如下</p><blockquote><p>{maxAge&#x3D;3}<br>{maxAge&#x3D;4}<br>{maxAge&#x3D;41}<br>{maxAge&#x3D;15}<br>{maxAge&#x3D;23}</p></blockquote><p>注意：</p><ul><li>聚合与分组查询，无法使用lambda表达式来完成</li><li>MP只是对MyBatis的增强，如果MP实现不了，我们可以直接在DAO接口中使用MyBatis的方式实现</li></ul><h2 id="查询条件"><a href="#查询条件" class="headerlink" title="查询条件"></a>查询条件</h2><p>前面我们只使用了lt()和gt(),除了这两个方法外，MP还封装了很多条件对应的方法</p><ul><li>范围匹配（&gt; 、 &#x3D; 、between）</li><li>模糊匹配（like）</li><li>空判定（null）</li><li>包含性匹配（in）</li><li>分组（group）</li><li>排序（order）</li><li>……</li></ul><h3 id="等值查询"><a href="#等值查询" class="headerlink" title="等值查询"></a>等值查询</h3><p>需求:根据用户名和密码查询用户信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testQueryWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; qw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    qw.eq(User::getName,<span class="string">&quot;Seto&quot;</span>).eq(User::getPassword,<span class="string">&quot;MUSICIAN&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDao.selectOne(qw);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出如下</p><blockquote><p>User(id&#x3D;1572385590169579521, name&#x3D;Seto, password&#x3D;MUSICIAN, age&#x3D;23, tel&#x3D;4005129421)</p></blockquote><ul><li><p>eq()： 相当于<code>=</code> ,对应的sql语句为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_user <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;seto&#x27;</span> <span class="keyword">AND</span> password <span class="operator">=</span> <span class="string">&#x27;MUSICIAN&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>selectList：查询结果为多个或者单个</p></li><li><p>selectOne:查询结果为单个</p></li></ul><h3 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h3><p>需求:对年龄进行范围查询，使用lt()、le()、gt()、ge()、between()进行范围查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testQueryWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; qw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    qw.between(User::getAge,<span class="number">10</span>,<span class="number">30</span>);</span><br><span class="line">    List&lt;User&gt; users = userDao.selectList(qw);</span><br><span class="line">    <span class="keyword">for</span> (User u : users) &#123;</span><br><span class="line">        System.out.println(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出如下</p><blockquote><p>User(id&#x3D;4, name&#x3D;kyle, password&#x3D;cyan, age&#x3D;15, tel&#x3D;4006184000)<br>User(id&#x3D;1572385590169579521, name&#x3D;Seto, password&#x3D;MUSICIAN, age&#x3D;23, tel&#x3D;4005129421)</p></blockquote><ul><li>gt():大于(&gt;)</li><li>ge():大于等于(&gt;&#x3D;)</li><li>lt():小于(&lt;)</li><li>lte():小于等于(&lt;&#x3D;)</li><li>between():between ? and ?</li></ul><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><p>需求:查询表中name属性的值以<code>J</code>开头的用户信息,使用like进行模糊查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testQueryWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; qw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    qw.likeRight(User::getName,<span class="string">&quot;J&quot;</span>);</span><br><span class="line">    List&lt;User&gt; users = userDao.selectList(qw);</span><br><span class="line">    <span class="keyword">for</span> (User u : users) &#123;</span><br><span class="line">        System.out.println(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出如下</p><blockquote><p>User(id&#x3D;2, name&#x3D;Jerry, password&#x3D;jerry, age&#x3D;4, tel&#x3D;16688886666)<br>User(id&#x3D;3, name&#x3D;Jock, password&#x3D;123456, age&#x3D;41, tel&#x3D;18812345678)</p></blockquote><ul><li>like():前后加百分号,如 %J%，相当于包含J的name</li><li>likeLeft():前面加百分号,如 %J，相当于J结尾的name</li><li>likeRight():后面加百分号,如 J%，相当于J开头的name</li></ul><p>需求:查询表中name属性的值包含<code>e</code>的用户信息,使用like进行模糊查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testQueryWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; qw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    qw.like(User::getName,<span class="string">&quot;e&quot;</span>);</span><br><span class="line">    List&lt;User&gt; users = userDao.selectList(qw);</span><br><span class="line">    <span class="keyword">for</span> (User u : users) &#123;</span><br><span class="line">        System.out.println(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出如下</p><blockquote><p>User(id&#x3D;1, name&#x3D;Alen, password&#x3D;tom, age&#x3D;3, tel&#x3D;18866668888)<br>User(id&#x3D;2, name&#x3D;Jerry, password&#x3D;jerry, age&#x3D;4, tel&#x3D;16688886666)<br>User(id&#x3D;4, name&#x3D;kyle, password&#x3D;cyan, age&#x3D;15, tel&#x3D;4006184000)<br>User(id&#x3D;1572385590169579521, name&#x3D;Seto, password&#x3D;MUSICIAN, age&#x3D;23, tel&#x3D;4005129421)</p></blockquote><h3 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h3><p>需求:查询所有数据，然后按照age降序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testQueryWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; qw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * condition ：条件，返回boolean，</span></span><br><span class="line"><span class="comment">            当condition为true，进行排序，如果为false，则不排序</span></span><br><span class="line"><span class="comment">        * isAsc:是否为升序，true为升序，false为降序</span></span><br><span class="line"><span class="comment">        * columns：需要操作的列</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    qw.orderBy(<span class="literal">true</span>,<span class="literal">false</span>,User::getAge);</span><br><span class="line">    List&lt;User&gt; users = userDao.selectList(qw);</span><br><span class="line">    <span class="keyword">for</span> (User u : users) &#123;</span><br><span class="line">        System.out.println(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出如下</p><blockquote><p>User(id&#x3D;3, name&#x3D;Jock, password&#x3D;123456, age&#x3D;41, tel&#x3D;18812345678)<br>User(id&#x3D;1572385590169579521, name&#x3D;Seto, password&#x3D;MUSICIAN, age&#x3D;23, tel&#x3D;4005129421)<br>User(id&#x3D;4, name&#x3D;kyle, password&#x3D;cyan, age&#x3D;15, tel&#x3D;4006184000)<br>User(id&#x3D;2, name&#x3D;Jerry, password&#x3D;jerry, age&#x3D;4, tel&#x3D;16688886666)<br>User(id&#x3D;1, name&#x3D;Alen, password&#x3D;tom, age&#x3D;3, tel&#x3D;18866668888)</p></blockquote><p>遇到想用的功能，先自己用一个试试，方法名和形参名都很见名知意，遇到不确定的用法，再去官方文档查阅资料</p><h2 id="映射匹配兼容性"><a href="#映射匹配兼容性" class="headerlink" title="映射匹配兼容性"></a>映射匹配兼容性</h2><p>在上面的案例中，我们做查询的时候，数据表中的字段名与模型类中的属性名一致，查询的时候没有问题，那么问题就来了</p><ul><li><p><code>问题一：</code>表字段与模型类编码属性不一致</p><ul><li><p>当表的列名和模型类的属性名发生不一致，就会导致数据封装不到模型对象，这个时候就需要其中一方做出修改，那如果前提是两边都不能改又该如何解决?</p></li><li><p>MP给我们提供了一个注解<code>@TableField</code>,使用该注解可以实现模型类属性名和表的列名之间的映射关系</p></li><li><p>例如表中密码字段为<code>pwd</code>，而模型类属性名为<code>password</code> ，那我们就可以用<code>@TableField</code>注解来实现他们之间的映射关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;tb_user&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@TableField(&quot;pwd&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>问题二：</code>编码中添加了数据库中未定义的属性</p><ul><li><p>当模型类中多了一个数据库表不存在的字段，就会导致生成的sql语句中在select的时候查询了数据库不存在的字段，程序运行就会报错，错误信息为:<code>Unknown column &#39;多出来的字段名称&#39; in &#39;field list&#39;</code></p></li><li><p>具体的解决方案用到的还是<code>@TableField</code>注解，它有一个属性叫<code>exist</code>，设置该字段是否在数据库表中存在，如果设置为false则不存在，生成sql语句查询的时候，就不会再查询该字段了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;tb_user&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@TableField(&quot;pwd&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> Integer online;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>问题三：</code>采用默认查询开放了更多的字段查看权限</p><ul><li><p>查询表中所有的列的数据，就可能把一些敏感数据查询到返回给前端，这个时候我们就需要限制哪些字段默认不要进行查询。解决方案是<code>@TableField</code>注解的一个属性叫<code>select</code>，该属性设置默认是否需要查询该字段的值，true(默认值)表示默认查询该字段，false表示默认不查询该字段。</p></li><li><p>例如像密码这种的敏感字段，不应该查询出来作为JSON返回给前端，不安全</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;tb_user&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@TableField(value = &quot;pwd&quot;,select = false)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> Integer online;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>知识点：<code>@TableField</code></p><table><thead><tr><th align="center">名称</th><th align="center">@TableField</th></tr></thead><tbody><tr><td align="center">类型</td><td align="center">属性注解</td></tr><tr><td align="center">位置</td><td align="center">模型类属性定义上方</td></tr><tr><td align="center">作用</td><td align="center">设置当前属性对应的数据库表中的字段关系</td></tr><tr><td align="center">相关属性</td><td align="center">value(默认)：设置数据库表字段名称 exist:设置属性在数据库表字段中是否存在，默认为true，此属性不能与value合并使用 select:设置属性是否参与查询，此属性与select()映射配置不冲突</td></tr></tbody></table><ul><li><p><code>问题四：</code>表名与编码开发设计不同步</p><ul><li>这个问题其实我们在一开始就解决过了，现在再来回顾一遍</li><li>该问题主要是表的名称和模型类的名称不一致，导致查询失败，这个时候通常会报如下错误信息<code>Table &#39;databaseName.tableNaem&#39; doesn&#39;t exist</code></li><li>解决方案是使用MP提供的另外一个注解<code>@TableName</code>来设置表与模型类之间的对应关系。</li></ul></li></ul><p>知识点：<code>@TableName</code></p><table><thead><tr><th align="center">名称</th><th align="center">@TableName</th></tr></thead><tbody><tr><td align="center">类型</td><td align="center">类注解</td></tr><tr><td align="center">位置</td><td align="center">模型类定义上方</td></tr><tr><td align="center">作用</td><td align="center">设置当前类对应于数据库表关系</td></tr><tr><td align="center">相关属性</td><td align="center">value(默认)：设置数据库表名称</td></tr></tbody></table><h1 id="DML编程控制"><a href="#DML编程控制" class="headerlink" title="DML编程控制"></a>DML编程控制</h1><p>查询相关的操作我们已经介绍完了，紧接着我们需要对另外三个，增删改进行内容的讲解。挨个来说明下，首先是新增(insert)中的内容。</p><h2 id="id生成策略控制"><a href="#id生成策略控制" class="headerlink" title="id生成策略控制"></a>id生成策略控制</h2><p>前面我们在新增数据的时候，主键ID是一个很长的Long类型，我们现在想要主键按照数据表字段进行自增长，在解决这个问题之前，我们先来分析一下ID的生成策略</p><ul><li>不同的表，应用不同的id生成策略<ul><li>日志：自增（1 2 3 4）</li><li>购物订单：特殊规则（线下购物发票，下次可以留意一下）</li><li>外卖订单：关联地区日期等信息（这个我熟，举个例子10 04 20220921 13 14，例如10表示北京市，04表示朝阳区，20220921表示日期等）</li><li>关系表：可以省略ID</li><li>……</li></ul></li><li>不同的业务采用的ID生成方式应该是不一样的，那么在MP中都提供了哪些主键生成策略，以及我们该如何进行选择?<ul><li>在这里我们又需要用到MP的一个注解叫<code>@TableId</code></li></ul></li></ul><p>知识点：<code>@TableId</code></p><table><thead><tr><th align="center">名称</th><th align="center">@TableId</th></tr></thead><tbody><tr><td align="center">类型</td><td align="center">属性注解</td></tr><tr><td align="center">位置</td><td align="center">模型类中用于表示主键的属性定义上方</td></tr><tr><td align="center">作用</td><td align="center">设置当前类中主键属性的生成策略</td></tr><tr><td align="center">相关属性</td><td align="center">value(默认)：设置数据库表主键名称 type:设置主键属性的生成策略，值查照IdType的枚举值</td></tr></tbody></table><h3 id="AUTO策略"><a href="#AUTO策略" class="headerlink" title="AUTO策略"></a>AUTO策略</h3><ul><li><code>步骤一：</code>设置生成策略为AUTO</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;tb_user&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> Integer online;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>步骤二：</code>设置自动增量为5，将4之后的数据都删掉，防止影响我们的结果</p></li><li><p><code>步骤三：</code>运行新增方法</p></li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;Helsing&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">531</span>);</span><br><span class="line">    user.setPassword(<span class="string">&quot;HELL_SING&quot;</span>);</span><br><span class="line">    user.setTel(<span class="string">&quot;4006669999&quot;</span>);</span><br><span class="line">    userDao.insert(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  会发现，新增成功，并且主键id也是从5开始</p><p>我们进入源码来看看还有什么生成策略<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">IdType</span> &#123;</span><br><span class="line">    AUTO(<span class="number">0</span>),</span><br><span class="line">    NONE(<span class="number">1</span>),</span><br><span class="line">    INPUT(<span class="number">2</span>),</span><br><span class="line">    ASSIGN_ID(<span class="number">3</span>),</span><br><span class="line">    ASSIGN_UUID(<span class="number">4</span>),</span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    ID_WORKER(<span class="number">3</span>),</span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    ID_WORKER_STR(<span class="number">3</span>),</span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    UUID(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> key;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">IdType</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>NONE: 不设置id生成策略</li><li>INPUT:用户手工输入id</li><li>ASSIGN_ID:雪花算法生成id(可兼容数值型与字符串型)</li><li>ASSIGN_UUID:以UUID生成算法作为id生成策略</li><li>其他的几个策略均已过时，都将被ASSIGN_ID和ASSIGN_UUID代替掉。</li></ul><p>拓展:<br>分布式ID是什么?</p><ul><li>当数据量足够大的时候，一台数据库服务器存储不下，这个时候就需要多台数据库服务器进行存储</li><li>比如订单表就有可能被存储在不同的服务器上</li><li>如果用数据库表的自增主键，因为在两台服务器上所以会出现冲突</li><li>这个时候就需要一个全局唯一ID,这个ID就是分布式ID。</li></ul><h3 id="INPUT策略"><a href="#INPUT策略" class="headerlink" title="INPUT策略"></a>INPUT策略</h3><ul><li><p><code> 步骤一：</code>将ID生成策略改为INPUT</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;tb_user&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.INPUT)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> Integer online;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>步骤二： </code>运行新增方法</p><p>注意这里需要手动设置ID了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setId(<span class="number">6L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;Helsing&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">531</span>);</span><br><span class="line">    user.setPassword(<span class="string">&quot;HELL_SING&quot;</span>);</span><br><span class="line">    user.setTel(<span class="string">&quot;4006669999&quot;</span>);</span><br><span class="line">    userDao.insert(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看数据库，ID确实是我们设置的值</p></li></ul><h3 id="ASSIGN-ID策略"><a href="#ASSIGN-ID策略" class="headerlink" title="ASSIGN_ID策略"></a>ASSIGN_ID策略</h3><ul><li><code>步骤一：</code>设置生成策略为<code>ASSIGN_ID</code></li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;tb_user&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.ASSIGN_ID)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> Integer online;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>步骤二：</code>运行新增方法<br>这里就不要手动设置ID了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;Helsing&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">531</span>);</span><br><span class="line">    user.setPassword(<span class="string">&quot;HELL_SING&quot;</span>);</span><br><span class="line">    user.setTel(<span class="string">&quot;4006669999&quot;</span>);</span><br><span class="line">    userDao.insert(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看结果，生成的ID就是一个Long类型的数据，生成ID时，使用的是雪花算法</p><p>雪花算法(SnowFlake),是Twitter官方给出的算法实现 是用Scala写的。其生成的结果是一个64bit大小整数</p><p><img src="https://pic.imgdb.cn/item/632af17116f2c2beb119ec90.jpg" alt="img"></p></li></ul><ol><li>1bit,不用,因为二进制中最高位是符号位，1表示负数，0表示正数。生成的id一般都是用整数，所以最高位固定为0。</li><li>41bit-时间戳，用来记录时间戳，毫秒级</li><li>10bit-工作机器id，用来记录工作机器id,其中高位5bit是数据中心ID其取值范围0-31，低位5bit是工作节点ID其取值范围0-31，两个组合起来最多可以容纳1024个节点</li><li>序列号占用12bit，每个节点每毫秒0开始不断累加，最多可以累加到4095，一共可以产生4096个ID</li></ol><h3 id="ASSIGN-UUID策略"><a href="#ASSIGN-UUID策略" class="headerlink" title="ASSIGN_UUID策略"></a>ASSIGN_UUID策略</h3><ul><li><code>步骤一:</code> 设置生成策略为ASSIGN_UUID</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;tb_user&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.ASSIGN_UUID)</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> Integer online;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>步骤二：</code>修改表的主键类型<br>主键类型设置为varchar，长度要大于32，因为UUID生成的主键为32位，如果长度小的话就会导致插入失败。</p></li><li><p><code>步骤三:</code>运行新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;Helsing&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">531</span>);</span><br><span class="line">    user.setPassword(<span class="string">&quot;HELL_SING&quot;</span>);</span><br><span class="line">    user.setTel(<span class="string">&quot;4006669999&quot;</span>);</span><br><span class="line">    userDao.insert(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="ID生成策略对比"><a href="#ID生成策略对比" class="headerlink" title="ID生成策略对比"></a>ID生成策略对比</h3><p>介绍完了这些主键ID的生成策略，那么以后我们开发用哪个呢？</p><ul><li>NONE：不设置ID生成策略，MP不自动生成，约定于INPUT，所以这两种方式都需要用户手动设置（SET方法），但是手动设置的第一个问题就是容易出错，加了相同的ID造成主键冲突，为了保证主键不冲突就得做很多判定，实现起来较为复杂</li><li>AUTO：数据库ID自增，这种策略适合在数据库服务器只有一台的情况下使用，不可作为分布式ID使用</li><li>ASSIGN_UUID：可以在分布式的情况下使用，而且能够保证ID唯一，但是声称的主键是32位的字符串，长度过长占用空间，而且不能排序，查询性能也慢</li><li>ASSIGN_ID：可以在分布式的情况下使用，生成的是Long类型的数字，可以排序，性能也高，但是生成的策略与服务器时间有关，如果修改了系统时间，也有可能出现重复的主键</li><li>综上所述，每一种主键的策略都有自己的优缺点，根据自己的项目业务需求的实际情况来使用，才是最明智的选择</li></ul><h3 id="简化配置"><a href="#简化配置" class="headerlink" title="简化配置"></a>简化配置</h3><ul><li><p>模型类主键策略设置<br>如果要在项目中的每一个模型类上都需要使用相同的生成策略，比如你有Book表，User表，Student表，Score表等好多个表，如果你每一个表的主键生成策略都是ASSIGN_ID，那我们就可以用yml配置文件来简化开发，不用在每一个表的id上都加上<code>@TableId(type = IdType.ASSIGN_ID)</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">assign_id</span></span><br></pre></td></tr></table></figure></li><li><p>数据库表与模型类的映射关系<br>MP会默认将模型类的类名名首字母小写作为表名使用，假如数据库表的名称都以<code>tb_</code>开头，那么我们就需要将所有的模型类上添加<code>@TableName(&quot;tb_TABLENAME&quot;)</code>，这样做很繁琐，有没有更简单的方式呢？</p><ul><li><p>我们可以在配置文件中设置表的前缀</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line"><span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">    <span class="attr">id-type:</span> <span class="string">assign_id</span></span><br><span class="line">    <span class="attr">table-prefix:</span> <span class="string">tb_</span></span><br></pre></td></tr></table></figure><p>设置表的前缀内容，这样MP就会拿<code>tb_</code> 加上模型类的首字母小写，就刚好组装成数据库的表名（前提是你的表名得规范命名，别瞎起花里胡哨的名）。将User类的<code>@TableName</code>注解去掉，再次运行新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.ASSIGN_ID)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h2><p>逻辑删除是删除操作中比较重要的一部分，先来讲个案例<br><a href="https://pic.imgdb.cn/item/632b01a716f2c2beb12b5ef9.jpg"><img src="https://pic.imgdb.cn/item/632b01a716f2c2beb12b5ef9.jpg" alt="img"></a></p><ul><li>这是一个员工和其所办理的合同表，一个员工可以办理多张合同表</li><li>员工ID为1的张业绩，办理了三个合同，但是她现在想离职跳槽了，我们需要将员工表中的数据进行删除，执行DELETE操作</li><li>如果表在设计的时候有主外键关系，那么同时也要将合同表中的张业绩的数据删掉<br><a href="https://pic.imgdb.cn/item/632b024516f2c2beb12c1dec.jpg"><img src="https://pic.imgdb.cn/item/632b024516f2c2beb12c1dec.jpg" alt="img"></a></li><li>后来公司要统计今年的总业绩，发现这数据咋对不上呢，业绩这么少，原因是张业绩办理的合同信息被删掉了</li><li>如果只删除员工，却不删除员工对应的合同表数据，那么合同的员工编号对应的员工信息不存在，那么就会产生垃圾数据，出现无主合同，根本不知道有张业绩这个人的存在</li><li>经过我们的分析之后，我们不应该将表中的数据删除掉，得留着，但是又得把离职的人和在职的人区分开，这样就解决了上述问题<br><a href="https://pic.imgdb.cn/item/632b025316f2c2beb12c2d45.jpg"><img src="https://pic.imgdb.cn/item/632b025316f2c2beb12c2d45.jpg" alt="img"></a></li><li>区分的方式，就是在员工表中添加一列数据<code>deleted</code>，如果为0说明在职员工，如果离职则将其改完1，（0和1所代表的含义是可以自定义的）</li></ul><p>所以对于删除操作业务问题来说有:</p><ul><li>物理删除:业务数据从数据库中丢弃，执行的是delete操作</li><li>逻辑删除:为数据设置是否可用状态字段，删除时设置状态字段为不可用状态，数据保留在数据库中，执行的是update操作</li></ul><p>MP中逻辑删除具体该如何实现?</p><ul><li><p><code>步骤一：</code>修改数据库表，添加<code>deleted</code>列<br>字段名任意，类型int，长度1，默认值0（个人习惯，你随便）</p></li><li><p><code>步骤二：</code>实体类添加属性<br>还得修改对应的pojo类，增加delete属性（属性名也任意，对不上用<code>@TableField</code>来添加映射关系<br>标识新增的字段为逻辑删除字段，使用 <code>@TableLogic</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//表名前缀和id生成策略在yml配置文件写了</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">    <span class="comment">//新增delete属性</span></span><br><span class="line">    <span class="comment">//value为正常数据的值（在职），delval为删除数据的值（离职）</span></span><br><span class="line">    <span class="meta">@TableLogic(value = &quot;0&quot;,delval = &quot;1&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer deleted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>步骤三：</code>运行删除方法<br>没有就自己写一个呗</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testLogicDelete</span><span class="params">()</span>&#123;</span><br><span class="line">    userDao.deleteById(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从测试结果来看，逻辑删除最后走的是update操作，执行的是<code>UPDATE tb_user SET deleted=1 WHERE id=? AND deleted=0</code>，会将指定的字段修改成删除状态对应的值。</p></li><li><p>思考：逻辑删除，对查询有没有影响呢?</p><ul><li><p>执行查询操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSelectAll</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (User user : userDao.selectList(<span class="literal">null</span>)) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从日志中可以看到执行的SQL语句如下，WHERE条件中，规定只查询deleted字段为0的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id,name,password,age,tel,deleted <span class="keyword">FROM</span> tb_user <span class="keyword">WHERE</span> deleted<span class="operator">=</span><span class="number">0</span></span><br></pre></td></tr></table></figure><p>输出结果当然也没有ID为1的数据了</p><blockquote><p>User(id&#x3D;2, name&#x3D;Jerry, password&#x3D;jerry, age&#x3D;4, tel&#x3D;16688886666, deleted&#x3D;0)<br>User(id&#x3D;3, name&#x3D;Jock, password&#x3D;123456, age&#x3D;41, tel&#x3D;18812345678, deleted&#x3D;0)<br>User(id&#x3D;4, name&#x3D;kyle, password&#x3D;cyan, age&#x3D;15, tel&#x3D;4006184000, deleted&#x3D;0)<br>User(id&#x3D;6, name&#x3D;Helsing, password&#x3D;HELL_SING, age&#x3D;531, tel&#x3D;4006669999, deleted&#x3D;0)</p></blockquote></li><li><p>如果还是想把已经删除的数据都查询出来该如何实现呢?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="comment">//查询所有数据包含已经被删除的数据</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tb_user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果每个表都要有逻辑删除，那么就需要在每个模型类的属性上<code>@TableLogic</code>注解，如何优化?</p><ul><li><p>在配置文件中添加全局配置，如下:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">    <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">        <span class="comment"># 逻辑删除字段名</span></span><br><span class="line">        <span class="attr">logic-delete-field:</span> <span class="string">deleted</span></span><br><span class="line">        <span class="comment"># 逻辑删除字面值：未删除为0</span></span><br><span class="line">        <span class="attr">logic-not-delete-value:</span> <span class="number">0</span></span><br><span class="line">        <span class="comment"># 逻辑删除字面值：删除为1</span></span><br><span class="line">        <span class="attr">logic-delete-value:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><p>使用yml配置文件配置了之后，就不需要在模型类上用<code>@TableLogic</code>注解了</p><p>介绍完逻辑删除，逻辑删除的本质为修改操作。如果加了逻辑删除字段，查询数据时也会自动带上逻辑删除字段。<br>执行的SQL语句为:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> tb_user <span class="keyword">SET</span> deleted<span class="operator">=</span><span class="number">1</span> <span class="keyword">WHERE</span> id<span class="operator">=</span>? <span class="keyword">AND</span> deleted<span class="operator">=</span><span class="number">0</span></span><br></pre></td></tr></table></figure><p>知识点：<code>@TableLogic</code></p><table><thead><tr><th align="center">名称</th><th align="center">@TableLogic</th></tr></thead><tbody><tr><td align="center">类型</td><td align="center">属性注解</td></tr><tr><td align="center">位置</td><td align="center">模型类中用于表示删除字段的属性定义上方</td></tr><tr><td align="center">作用</td><td align="center">标识该字段为进行逻辑删除的字段</td></tr><tr><td align="center">相关属性</td><td align="center">value：逻辑未删除值 delval:逻辑删除值</td></tr></tbody></table><h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>在学乐观锁之前，我们还是先由一个案例来引入</p><ul><li>业务并发现象带来的问题：秒杀<ul><li>加入有100个商品在售，为了保证每个商品只能被一个人购买，如何保证不会超买或者重复卖</li><li>对于这一类的问题，其实有很多的解决方案可以使用</li><li>第一个最先想到的就是锁，锁在一台服务器中是可以解决的，但是如果在多台服务器下就没办法控制，比如12306有两台服务器，再进行卖票，在两台服务器上都添加锁的话，那也有可能会在同一时刻有两个线程在卖票，还是会出现并发问题</li><li>我们接下来介绍的这种方式就是针对于小型企业的解决方案，因为数据库本身的性能就是个瓶颈，如果对其并发超过2000以上的就需要考虑其他解决方案了</li></ul></li></ul><p>简单来说，乐观锁主要解决的问题是，当要更新一条记录的时候，希望这条记录没有被别人更新</p><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><ul><li>数据库表中添加<code>version</code>字段，比如默认值给个1</li><li>第一个线程要修改数据之前，取出记录时，获取当前的version&#x3D;1</li><li>第二个线程要修改数据之前，取出记录时，获取当前的version&#x3D;1</li><li>第一个线程执行更新时<ul><li>set version &#x3D; newVersion where version &#x3D; oldVersion<ul><li>newVersion &#x3D; version + 1</li><li>oldVersion &#x3D; version</li></ul></li></ul></li><li>第二个线程执行更新时<ul><li>set version &#x3D; newVersion where version &#x3D; oldVersion<ul><li>newVersion &#x3D; version + 1</li><li>oldVersion &#x3D; version</li></ul></li></ul></li><li>假如这两个线程都来更新数据，第一个和第二个线程都可能先执行<ul><li>假如第一个线程先执行更新，会将version改为2<ul><li>那么第二个线程再更新的时候，set version &#x3D; 2 where version &#x3D; 1，此时数据库表的version已经是2了，所以第二个线程修改失败</li></ul></li><li>假如第二个线程先执行更新，会将version改为2<ul><li>那么第一个线程再更新的时候，set version &#x3D; 2 where version &#x3D; 1，此时数据库表的version已经是2了，所以第一个线程修改失败</li></ul></li></ul></li></ul><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ul><li><p><code>步骤一：</code>数据库表添加列<br>加一列version，长度给个11，默认值设为1</p></li><li><p><code>步骤二：</code>在模型类中添加对应的属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">    <span class="meta">@TableLogic(value = &quot;0&quot;, delval = &quot;1&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer deleted;</span><br><span class="line">    <span class="meta">@Version</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>步骤三：</code>添加乐观锁拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MpConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mpInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.定义Mp拦截器</span></span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">mpInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">//2.添加乐观锁拦截器</span></span><br><span class="line">        mpInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">OptimisticLockerInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> mpInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>步骤四：</code>执行更新操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1. 先通过要修改的数据id将当前数据查询出来</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDao.selectById(<span class="number">1L</span>);</span><br><span class="line">    <span class="comment">//2. 修改属性</span></span><br><span class="line">    user.setName(<span class="string">&quot;Person&quot;</span>);</span><br><span class="line">    userDao.updateById(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看日志的SQL语句</p><blockquote><p>&#x3D;&#x3D;&gt; Preparing: UPDATE tb_user SET name&#x3D;?, password&#x3D;?, age&#x3D;?, tel&#x3D;?, version&#x3D;? WHERE id&#x3D;? AND version&#x3D;?<br>&#x3D;&#x3D;&gt; Parameters: Person(String), tom(String), 3(Integer), 18866668888(String), 2(Integer), 1(Long), 1(Integer)</p></blockquote></li></ul><p>我们传递的是1(oldVersion)，MP会将1进行加1，变成2，然后更新回到数据库中(newVersion)</p><p>大概分析完乐观锁的实现步骤以后，我们来模拟一种加锁的情况，看看能不能实现多个人修改同一个数据的时候，只能有一个人修改成功。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">userA</span> <span class="operator">=</span> userDao.selectById(<span class="number">1L</span>); <span class="comment">//version=1</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">userB</span> <span class="operator">=</span> userDao.selectById(<span class="number">1L</span>); <span class="comment">//version=1</span></span><br><span class="line">    userB.setName(<span class="string">&quot;Jackson&quot;</span>);</span><br><span class="line">    userDao.updateById(userB);  <span class="comment">//B修改完了之后，version=2</span></span><br><span class="line">    userA.setName(<span class="string">&quot;Person&quot;</span>);</span><br><span class="line">    <span class="comment">//A拿到的version是1，但现在的version已经是2了，那么A在执行 UPDATE ... WHERE version = 1时，就必然会失败</span></span><br><span class="line">    userDao.updateById(userA);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，乐观锁的实现就已经完成了</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> springBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>巫师3：狂猎</title>
      <link href="/2022/thewitcher3/"/>
      <url>/2022/thewitcher3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr><blockquote class="blockquote-center"><p>命运之剑有两把剑锋<br>其中一道是你</p></blockquote><hr><img src="https://fmphoto.oss-cn-chengdu.aliyuncs.com/Photo/Qidian.jpg" style="zoom:50%;" /><span id="more"></span><p>《巫师3：狂猎》是由CD Projekt RED制作，游戏改编自小说《猎魔人》系列，为《<a href="https://baike.baidu.com/item/%E5%B7%AB%E5%B8%88/3816318?fromModule=lemma_inlink">巫师</a>》系列的第三部作品，同时也是杰洛特冒险的终曲。该作承接《<a href="https://baike.baidu.com/item/%E5%B7%AB%E5%B8%882%EF%BC%9A%E5%9B%BD%E7%8E%8B%E5%88%BA%E5%AE%A2/10427943?fromModule=lemma_inlink">巫师2：国王刺客</a>》的剧情，那些想要利用杰洛特的人已经不在了。杰洛特寻求改变自己的生活，着手于新的个人使命，而世界的秩序也在悄然改变。</p><p>游戏延承了《<a href="https://baike.baidu.com/item/%E7%8C%8E%E9%AD%94%E4%BA%BA/7252589?fromModule=lemma_inlink">猎魔人</a>》系列小说的世界观。在小说故事发生前1500年前发生的一场灾难，不同的维度之间的世界发生了碰撞，世界直接被连接并互相渗透。这场灾难被称为“天球交汇”，它让很多来自各式各样来自不同世界中的生物被困在这个世界中，例如，食尸鬼和血棘尸魔和高阶吸血鬼，它们就是天球交汇所留下的残物。这些生物带有自己独特的生态，是过去时代的遗种。根据精灵的传说，人类因为自己之前的世界被毁灭，来到了这个世界。</p><p>人类的祖先学会了如何驾驭混沌之力，最早的人类法师从此诞生，并对抗着其他来自不同世界的生物。但由于怪物四处散布且难以击败，在普通人不具备与怪物对抗的情况下，猎魔人由此孕育而生，他们是专门被普通人雇佣来猎杀怪物的变种人类，并以此维持生计，保护人们不受怪物威胁。</p><p><img src="https://fmphoto.oss-cn-chengdu.aliyuncs.com/Photo/QQ%E5%9B%BE%E7%89%8720230116204559.png"></p><p>游戏主人公，利维亚的杰洛特是一名猎魔人，在上古语中，他被称为“格温布雷德”，意为“白狼”。他身手敏捷，但同时又深不可测。在他冷漠寡言的外表下，隐藏着如海洋一般辽阔的善良和幽默感。像所有猎魔人一样，杰洛特是职业怪物猎手。他拥有超乎常人的力量和速度，杰洛特在猎魔人的青草试炼中展示出不寻常的忍受能力并存活了下来，从而获得了这些能力。</p><p><img src="https://fmphoto.oss-cn-chengdu.aliyuncs.com/Photo/XiLi.png"></p><p>希里全名希里雅·欧菲娜·伊伦·雷安伦，她是一位技艺精湛的猎魔人，好几个皇位的继承人，上古之血的最后传承者，无与伦比的魔法之源。她是杰洛特通过意外律获得的养女，同时也是他的天命，他的意外之女，他们两人被命运的枷锁紧紧羁绊在一起。</p><p><img src="https://fmphoto.oss-cn-chengdu.aliyuncs.com/Photo/YeNai.png"></p><p>叶奈法是一位来自亚甸首都温格堡的女术士，她是术士评议会以及其后的女术士集会所成员。她是杰洛特的挚爱，也担当了希瑞养母的角色。叶奈法与杰洛特的感情始于一场关于迪精的冒险，随着这场冒险，他们二人的命运纠缠在了一起。他们的感情经历了许多风暴，他们仍然互相吸引彼此。</p><p><img src="https://fmphoto.oss-cn-chengdu.aliyuncs.com/Photo/End.png"></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=33735522&auto=1&height=66"></iframe>]]></content>
      
      
      <categories>
          
          <category> Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Game </tag>
            
            <tag> TheWitcher3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot启动过程</title>
      <link href="/2022/springboot/"/>
      <url>/2022/springboot/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="https://www.processon.com/view/link/59812124e4b0de2518b32b6e">SpringBoot启动结构图</a></p><h4 id="springboot启动分为构造器部分和run部分"><a href="#springboot启动分为构造器部分和run部分" class="headerlink" title="springboot启动分为构造器部分和run部分"></a>springboot启动分为构造器部分和run部分</h4><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> &#123;</span><br><span class="line">    <span class="comment">//初始化资源加载器</span></span><br><span class="line">   <span class="built_in">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">    <span class="comment">//断言资源加载器不为null，否则报错</span></span><br><span class="line">   Assert.notNull(primarySources, <span class="string">&quot;PrimarySources must not be null&quot;</span>);</span><br><span class="line">    <span class="comment">//初始化资源</span></span><br><span class="line">   <span class="built_in">this</span>.primarySources = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;(Arrays.asList(primarySources));</span><br><span class="line">    <span class="comment">//推断当前的web应用类型（非WEB / SERVLET / REACTIVE）</span></span><br><span class="line">   <span class="built_in">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class="line">    <span class="comment">//初始化bootstrap启动器，将所有pom中的start加载进来</span></span><br><span class="line">   <span class="built_in">this</span>.bootstrapRegistryInitializers = getBootstrapRegistryInitializersFromSpringFactories();</span><br><span class="line">    <span class="comment">//初始化spring.factories文件的所有组件信息，并放入缓存中</span></span><br><span class="line">   setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));</span><br><span class="line">    <span class="comment">//初始化应用监听器</span></span><br><span class="line">   setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class="line">    <span class="comment">//推断主程序类</span></span><br><span class="line">   <span class="built_in">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行SpringApplication"><a href="#运行SpringApplication" class="headerlink" title="运行SpringApplication"></a>运行SpringApplication</h4><p>创建上下文—启动监听器—创建IOC容器—准备环境—刷新IOC容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title function_">run</span><span class="params">(String... args)</span> &#123;</span><br><span class="line">    <span class="comment">//记录应用启动时间</span></span><br><span class="line">    <span class="type">StopWatch</span> <span class="variable">stopWatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StopWatch</span>();</span><br><span class="line">    stopWatch.start();</span><br><span class="line">    <span class="comment">//创建引导上下文，获得所有的bootstraps逐个执行</span></span><br><span class="line">    <span class="type">DefaultBootstrapContext</span> <span class="variable">bootstrapContext</span> <span class="operator">=</span> createBootstrapContext();</span><br><span class="line">    <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//进入自力更生模式（Headless模式）</span></span><br><span class="line">    configureHeadlessProperty();</span><br><span class="line">    <span class="comment">//获取到所有的listener</span></span><br><span class="line">    <span class="type">SpringApplicationRunListeners</span> <span class="variable">listeners</span> <span class="operator">=</span> getRunListeners(args);</span><br><span class="line">    <span class="comment">//遍历所有的listener调用starting方法，通知当前项目正在启动</span></span><br><span class="line">    listeners.starting(bootstrapContext, <span class="built_in">this</span>.mainApplicationClass);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//保存命令行参数</span></span><br><span class="line">        <span class="type">ApplicationArguments</span> <span class="variable">applicationArguments</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultApplicationArguments</span>(args);</span><br><span class="line">        <span class="comment">//准备环境</span></span><br><span class="line">        <span class="type">ConfigurableEnvironment</span> <span class="variable">environment</span> <span class="operator">=</span> prepareEnvironment(listeners, bootstrapContext, applicationArguments);</span><br><span class="line">        <span class="comment">//配置忽略信息</span></span><br><span class="line">        configureIgnoreBeanInfo(environment);</span><br><span class="line">        <span class="comment">//打印bannner</span></span><br><span class="line">        <span class="type">Banner</span> <span class="variable">printedBanner</span> <span class="operator">=</span> printBanner(environment);</span><br><span class="line">        <span class="comment">//创建IOC容器</span></span><br><span class="line">        context = createApplicationContext();</span><br><span class="line">        <span class="comment">//设置start</span></span><br><span class="line">        context.setApplicationStartup(<span class="built_in">this</span>.applicationStartup);</span><br><span class="line">        <span class="comment">//准备环境信息</span></span><br><span class="line">        prepareContext(bootstrapContext, context, environment, listeners, applicationArguments, printedBanner);</span><br><span class="line">        <span class="comment">//刷新IOC容器，创建容器中的所有组件</span></span><br><span class="line">        refreshContext(context);</span><br><span class="line">        <span class="comment">//刷新后需要完成的工作</span></span><br><span class="line">        afterRefresh(context, applicationArguments);</span><br><span class="line">        <span class="comment">//记录停止时间</span></span><br><span class="line">        stopWatch.stop();</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.logStartupInfo) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">StartupInfoLogger</span>(<span class="built_in">this</span>.mainApplicationClass).logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//向观察者发布上下文已启动</span></span><br><span class="line">        listeners.started(context);</span><br><span class="line">        <span class="comment">//调用所有runners</span></span><br><span class="line">        callRunners(context, applicationArguments);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        handleRunFailure(context, ex, listeners);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//向观察者发布上下文已就绪</span></span><br><span class="line">        listeners.running(context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        handleRunFailure(context, ex, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回应用上下文</span></span><br><span class="line">    <span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="springboot如何实现自动装配"><a href="#springboot如何实现自动装配" class="headerlink" title="springboot如何实现自动装配"></a>springboot如何实现自动装配</h4><p>归功于springboot强大的注解功能，也是springboot的一大特点</p><p>举例：在springboot主运行程序中，下面是常见的springboot启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringbootSrcApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringbootSrcApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>spring会在启动的时候new自己—&gt;new SpringApplication(primarySources).run(args)这时候就会初始化，并加载扫描到所有的组件进入缓存</p><p><img src="https://fmphoto.oss-cn-chengdu.aliyuncs.com/Photo/20210812175255.png"></p><p>真正发挥作用的是@Import()，它导什么，容器实例化什么</p><p>先来从@SpringBootApplication这个注解说起</p><p><img src="https://fmphoto.oss-cn-chengdu.aliyuncs.com/Photo/20210810114704.png"></p><p>主要的注解为@SpringBootConfiguration+@ComponentScan+@EnableAutoConfiguration</p><p>前两个没什么好说的，@SpringBootConfiguration就是封装了@Configuration注解，表示他是一个配置类</p><p><img src="https://fmphoto.oss-cn-chengdu.aliyuncs.com/Photo/20210810114947.png"></p><p>@ComponentScan：扫描注解，表示哪些会被spring扫描到</p><p>那么重要的就是@EnableAutoConfiguration，见名知意拥有自动配置的能力，点进去看下</p><p><img src="https://fmphoto.oss-cn-chengdu.aliyuncs.com/Photo/20210812181648.png"></p><p>主要注解为@AutoConfigurationPackage+@Import，而@AutoConfigurationPackage其中也是@Import，所以起到主要作用的就是@Import这个注解了</p><p>@Import：给容器中导入一个组件，前提是必须作用于spring的组件下，可以自动调用组件的无参构造器创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Import &#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> Configuration <span class="doctag">@Configuration</span>&#125;, &#123;<span class="doctag">@link</span> ImportSelector&#125;,</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> ImportBeanDefinitionRegistrar&#125;, or regular component classes to import.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   Class&lt;?&gt;[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由上图可知import导入了AutoConfigurationImportSelector.class这个组件，那么程序中是什么时候导入的？</p><p>spring容器启动会刷新IOC容器（refreshContext(context)）执行invokeBeanFactoryPostProcessors方法，最终调用到getImports()这个方法，这个方法会将标有@Import的组件进行实例化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Iterable&lt;Group.Entry&gt; getImports() &#123;</span><br><span class="line">   <span class="keyword">for</span> (DeferredImportSelectorHolder deferredImport : <span class="built_in">this</span>.deferredImports) &#123;</span><br><span class="line">       <span class="comment">//核心process</span></span><br><span class="line">      <span class="built_in">this</span>.group.process(deferredImport.getConfigurationClass().getMetadata(),</span><br><span class="line">            deferredImport.getImportSelector());</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">this</span>.group.selectImports();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述方法会执行AutoConfigurationImportSelector类的process方法</p><p>调用核心方法SpringFactoriesLoader.loadFactoryNames导入一系列组件</p><p><img src="https://fmphoto.oss-cn-chengdu.aliyuncs.com/Photo/20210810150103.png"></p><p>拓展部分，怎么导入的？<br>接上段程序，调用关键语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),</span><br><span class="line">      getBeanClassLoader());</span><br></pre></td></tr></table></figure><p>其中getSpringFactoriesLoaderFactoryClass()返回的正是@EnableAutoConfiguration这个注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; getSpringFactoriesLoaderFactoryClass() &#123;</span><br><span class="line">   <span class="keyword">return</span> EnableAutoConfiguration.class;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点进去loadFactoryNames</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">loadFactoryNames</span><span class="params">(Class&lt;?&gt; factoryType, <span class="meta">@Nullable</span> ClassLoader classLoader)</span> &#123;</span><br><span class="line">   <span class="type">ClassLoader</span> <span class="variable">classLoaderToUse</span> <span class="operator">=</span> classLoader;</span><br><span class="line">   <span class="keyword">if</span> (classLoaderToUse == <span class="literal">null</span>) &#123;</span><br><span class="line">      classLoaderToUse = SpringFactoriesLoader.class.getClassLoader();</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">//根据上面代码获得EnableAutoConfiguration的完整类名（全类名，包括包名）</span></span><br><span class="line">    <span class="comment">//org.springframework.boot.autoconfigure.EnableAutoConfiguration</span></span><br><span class="line">   <span class="type">String</span> <span class="variable">factoryTypeName</span> <span class="operator">=</span> factoryType.getName();</span><br><span class="line">    <span class="comment">//loadSpringFactories(classLoaderToUse)就是刚开始初始化的18个结果集</span></span><br><span class="line">    <span class="comment">//后面的get方法就是Map的方法，根据这个全类名可以获取到自动配置包下的所有组件（类）</span></span><br><span class="line">    <span class="comment">//也就是上面截图中的131个组件</span></span><br><span class="line">   <span class="keyword">return</span> loadSpringFactories(classLoaderToUse).getOrDefault(factoryTypeName, Collections.emptyList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>怎么实例化的<br>spring在刷新IOC的最后一步会调用finishBeanFactoryInitialization(beanFactory)方法，来实例化剩余的非lazy的单例，在调用过程中beanFactory.preInstantiateSingletons()，该方法会遍历所有的bean</p><p>按需配置</p><p>注解有如下几项：</p><p>@ConditionalOnBean：当容器里有指定的bean的条件下</p><p>@ConditionalOnMissingBean：当容器里不存在指定bean的条件下</p><p>@ConditionalOnClass：当类路径下有指定类的条件下</p><p>@ConditionalOnMissingClass：当类路径下不存在指定类的条件下</p><p>@ConditionalOnProperty：指定的属性是否有指定的值，比如</p><p>@ConditionalOnProperties(prefix&#x3D;”xxx.xxx”, value&#x3D;”enable”, matchIfMissing&#x3D;true)，代表当xxx.xxx为enable时条件的布尔值为true，如果没有设置的情况下也为true</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 面试八股 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> springBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lombok依赖介绍</title>
      <link href="/2022/lombok/"/>
      <url>/2022/lombok/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Lombok能以简单的注解形式来简化java代码，提高开发人员的开发效率。例如开发中经常需要写的javabean，都需要花时间去添加相应的getter&#x2F;setter，也许还要去写构造器、equals等方法，而且需要维护，当属性多时会出现大量的getter&#x2F;setter方法，这些显得很冗长也没有太多技术含量，一旦修改属性，就容易出现忘记修改对应方法的失误。</p><p>Lombok能通过注解的方式，在编译时自动为属性生成构造器、getter&#x2F;setter、equals、hashcode、toString方法。出现的神奇就是在源码中没有getter和setter方法，但是在编译生成的字节码文件中有getter和setter方法。这样就省去了手动重建这些代码的麻烦，使代码看起来更简洁些。</p><span id="more"></span><h5 id="导入方式"><a href="#导入方式" class="headerlink" title="导入方式"></a>导入方式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.18</span><span class="number">.20</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>Lombok主要常用的注解有：@Data，@Getter，@Setter，@NoArgsConstructor，@AllArgsConstructor，@ToString，@EqualsAndHashCode，@Slf4j，@Log4j</p><p>@Data注解：在JavaBean中使用，这个注解包含范围最广，它包含getter、setter、toString、equals、hashCode方法，即当使用当前注解时，会自动生成@Data包含的所有方法；<br>@getter注解：在JavaBean中使用，使用此注解会生成对应的getter方法；<br>@setter注解：在JavaBean中使用，使用此注解会生成对应的setter方法；<br>@NoArgsConstructor注解：在JavaBean中使用，使用此注解会生成对应的无参构造方法；<br>@AllArgsConstructor注解：在JavaBean中使用，使用此注解会生成对应的有参构造方法；<br>@ToString注解：在JavaBean中使用，使用此注解会自动重写对应的toStirng方法；<br>@EqualsAndHashCode注解：在JavaBean中使用，使用此注解会自动重写对应的equals方法和hashCode方法；<br>@Slf4j：在需要打印日志的类中使用，当项目中使用了slf4j打印日志框架时使用该注解，会简化日志的打印流程，只需调用info方法即可；<br>@Log4j：在需要打印日志的类中使用，当项目中使用了log4j打印日志框架时使用该注解，会简化日志的打印流程，只需调用info方法即可；<br>在使用以上注解需要处理参数时，处理方法如下（以@ToString注解为例，其他注解同@ToString注解）：</p><p> @ToString(exclude&#x3D;“column”)<br> 意义：排除column列所对应的元素，即在生成toString方法时不包含column参数；</p><p> @ToString(exclude&#x3D;{“column1”,“column2”})<br> 意义：排除多个column列所对应的元素，其中间用英文状态下的逗号进行分割，即在生成toString方法时不包含多个column参数；</p><p> @ToString(of&#x3D;“column”)<br> 意义：只生成包含column列所对应的元素的参数的toString方法，即在生成toString方法时只包含column参数；</p><p> @ToString(of&#x3D;{“column1”,“column2”})<br> 意义：只生成包含多个column列所对应的元素的参数的toString方法，其中间用英文状态下的逗号进行分割，即在生成toString方法时只包含多个column参数；</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的注解</title>
      <link href="/2022/java-zhu-jie/"/>
      <url>/2022/java-zhu-jie/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>注解是干什么的</strong></p><p>注解本身不提供作用，注解只能是被看作元数据，它不包含任何业务逻辑。注解更像是一个标签，一个声明，表面被注释的这个地方，将具有某种特定的逻辑。</p><span id="more"></span><p><strong>注解常见的种类</strong></p><p>常见的注解有三大类：JDK的，自定义的，第三方的（比如框架）</p><p><strong>注解三板斧</strong></p><p>定义、使用、读取</p><p>定义：包括名字，能用到哪些地方，有效期，是否可以被继承</p><p>使用：定义好之后在允许的地方使用标注即可</p><p>光有前两步，没什么用，如最熟悉的@Override注解，为什么能验证重写是否有效，怎么不是验证重载？spring的@Autowired为什么是注入作用，而不是输出一句话？显然，他们在程序中做了实现，使得其注解具有各自的作用，也具有了意义，而赋予灵魂的一步就是读取</p><p>读取：让注解发挥作用，给注解注入灵魂</p><p><strong>注解前置知识</strong></p><p>首先是元注解，Java中提供了四个</p><p>@Documented | @Retention | @Target | @Inherited</p><p>分别解释下</p><p>@Documented</p><blockquote><p>代表着此注解会被javadoc工具提取成文档</p></blockquote><p>@Retention：</p><blockquote><p>代表该注解的有效期</p><p>SOURCE 表示编译期，如@Override，只做编译时的提示，不会写入字节码中。</p><p>CLASS表示类加载期，会保存在class文件中，但在运行class文件被丢弃，也是默认值</p><p>RUNTIME 表示运行期，也是最常用的，可以在代码运行时进行反射执行相关的操作</p></blockquote><p>@Target：</p><blockquote><p>表示这个注解可以放在哪</p><p>TYPE：接口、类、枚举、注解</p><p>FIELD：字段、枚举的常量</p><p>METHOD：方法</p><p>PARAMETER：参数</p><p>CONSTRUCTOR：构造函数</p><p>LOCAL_VARIABLE：局部变量</p><p>ANNOTATION_TYPE：注解</p><p>PACKAGE：包</p></blockquote><p>@Inherited：</p><blockquote><p>表示子类可以继承该类的注解</p></blockquote><p>举个例子<br>自己自定义个注解，并赋予它作用，模拟aop功能，在方法前后加入</p><p>定义注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法前执行</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyBefore &#123;&#125;</span><br><span class="line"><span class="comment">//主要方法</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyCore &#123;&#125;</span><br><span class="line"><span class="comment">//方法后执行</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAfter &#123;&#125;</span><br></pre></td></tr></table></figure><p>使用注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="meta">@MyBefore</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@MyAfter</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@MyCore</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">core</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;核心方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前两步简单，重要的是如何赋予注解作用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyWork</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//获得测试类</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Test.class;</span><br><span class="line">        <span class="comment">//获得一个实例</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line">        <span class="comment">//获得Test的所有public方法，将他们存入对应的集合中</span></span><br><span class="line">        List&lt;Method&gt; myBeforeList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Method&gt; myAfterList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Method&gt; myTestList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Method[] methods = clazz.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            <span class="keyword">if</span> (method.isAnnotationPresent(MyBefore.class)) &#123;</span><br><span class="line">                myBeforeList.add(method);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (method.isAnnotationPresent(MyCore.class)) &#123;</span><br><span class="line">                myTestList.add(method);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (method.isAnnotationPresent(MyAfter.class)) &#123;</span><br><span class="line">                myAfterList.add(method);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//调用标有MyTest注解的方法</span></span><br><span class="line">        <span class="keyword">for</span> (Method test : myTestList) &#123;</span><br><span class="line">            <span class="comment">//在测试方法前先执行标有MyBefore注解的方法</span></span><br><span class="line">            <span class="keyword">for</span> (Method method : myBeforeList) &#123;</span><br><span class="line">                method.invoke(obj);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//调用test方法</span></span><br><span class="line">            test.invoke(obj);</span><br><span class="line">            <span class="comment">//在测试方法后执行标有MyAfter注解的方法</span></span><br><span class="line">            <span class="keyword">for</span> (Method method : myAfterList) &#123;</span><br><span class="line">                method.invoke(obj);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><blockquote><p>初始化<br>核心方法<br>销毁</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 面试八股 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java---IO流</title>
      <link href="/2022/java-io-liu/"/>
      <url>/2022/java-io-liu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="File类的使用"><a href="#File类的使用" class="headerlink" title="File类的使用"></a>File类的使用</h1><h2 id="File类的实例化"><a href="#File类的实例化" class="headerlink" title="File类的实例化"></a>File类的实例化</h2><ul><li><p>java.io.File类：文件和文件目录路径的抽象表示形式，与平台无关</p></li><li><p>File 能新建、删除、重命名文件和目录，但File 不能访问文件内容本身。如果需要访问文件内容本身，则需要使用输入&#x2F;输出流。</p></li><li><p>想要在Java程序中表示一个真实存在的文件或目录，那么必须有一个File对象，但是Java程序中的一个File对象，可能没有一个真实存在的文件或目录。</p></li><li><p>File对象可以作为参数传递给流的构造器</p></li><li><p>File类提供了以下四种构造器，这里只说前三种</p><span id="more"></span></li></ul><table><thead><tr><th align="center">构造器</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">File(File parent, String child)</td><td align="center">从父抽象路径名和子路径名字符串创建新的 File实例。</td></tr><tr><td align="center">File(String pathname)</td><td align="center">通过将给定的路径名字符串转换为抽象路径名来创建新的 File实例。</td></tr><tr><td align="center">File(String parent, String child)</td><td align="center">从父路径名字符串和子路径名字符串创建新的 File实例。</td></tr><tr><td align="center">File(URI uri)</td><td align="center">通过将给定的 file: URI转换为抽象路径名来创建新的 File实例。</td></tr></tbody></table><p>首先，在当前目录下新建如下目录，并在hello.txt中写入hello</p><ul><li>IO<ul><li>IOTest<ul><li>hello.txt</li></ul></li></ul></li></ul><p>在D盘根目录下新建如下目录，并在world.txt中写入world</p><ul><li>IO<ul><li>IOTest<ul><li>world.txt</li></ul></li></ul></li></ul><p>下面演示三种构造器的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;IO&quot;</span>, <span class="string">&quot;IOTest&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">file2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;IO&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">file3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(file1, <span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(file1);</span><br><span class="line">    System.out.println(file2);</span><br><span class="line">    System.out.println(file3);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;****************&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">file4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\IO&quot;</span>, <span class="string">&quot;IOTest&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">file5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\IO&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">file6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(file4, <span class="string">&quot;world.txt&quot;</span>);</span><br><span class="line">    System.out.println(file4);</span><br><span class="line">    System.out.println(file5);</span><br><span class="line">    System.out.println(file6);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    IO\IOTest</span></span><br><span class="line"><span class="comment">    IO</span></span><br><span class="line"><span class="comment">    IO\IOTest\hello.txt</span></span><br><span class="line"><span class="comment">    ****************</span></span><br><span class="line"><span class="comment">    D:\IO\IOTest</span></span><br><span class="line"><span class="comment">    D:\IO</span></span><br><span class="line"><span class="comment">    D:\IO\IOTest\world.txt</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="File类的常用方法1"><a href="#File类的常用方法1" class="headerlink" title="File类的常用方法1"></a>File类的常用方法1</h2><table><thead><tr><th align="center">变量和类型</th><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">String</td><td align="center">getAbsolutePath()</td><td align="center">返回此抽象路径名的绝对路径名字符串。</td></tr><tr><td align="center">String</td><td align="center">getPath()</td><td align="center">将此抽象路径名转换为路径名字符串。</td></tr><tr><td align="center">String</td><td align="center">getName()</td><td align="center">返回此抽象路径名表示的文件或目录的名称。</td></tr><tr><td align="center">String</td><td align="center">getParent()</td><td align="center">返回此抽象路径名父项的路径名字符串，如果此路径名未指定父目录，则返回 null</td></tr><tr><td align="center">long</td><td align="center">length()</td><td align="center">返回此抽象路径名表示的文件的长度。</td></tr><tr><td align="center">long</td><td align="center">lastModified()</td><td align="center">返回上次修改此抽象路径名表示的文件的时间。(毫秒值)</td></tr><tr><td align="center">String[]</td><td align="center">list()</td><td align="center">返回一个字符串数组，用于命名此抽象路径名表示的目录中的文件和目录。</td></tr><tr><td align="center">File[]</td><td align="center">listFiles()</td><td align="center">返回一个抽象路径名数组，表示此抽象路径名表示的目录中的文件。</td></tr><tr><td align="center">boolean</td><td align="center">renameTo(File dest)</td><td align="center">重命名此抽象路径名表示的文件。</td></tr></tbody></table><h2 id="File类的常用方法2"><a href="#File类的常用方法2" class="headerlink" title="File类的常用方法2"></a>File类的常用方法2</h2><table><thead><tr><th align="center">变量和类型</th><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">boolean</td><td align="center">isDirectory()</td><td align="center">测试此抽象路径名表示的文件是否为目录。</td></tr><tr><td align="center">boolean</td><td align="center">isFile()</td><td align="center">测试此抽象路径名表示的文件是否为普通文件。</td></tr><tr><td align="center">boolean</td><td align="center">exists()</td><td align="center">测试此抽象路径名表示的文件或目录是否存在。</td></tr><tr><td align="center">boolean</td><td align="center">canRead()</td><td align="center">测试应用程序是否可以读取此抽象路径名表示的文件。</td></tr><tr><td align="center">boolean</td><td align="center">canWrite()</td><td align="center">测试应用程序是否可以修改此抽象路径名表示的文件。</td></tr><tr><td align="center">boolean</td><td align="center">isHidden()</td><td align="center">测试此抽象路径名指定的文件是否为隐藏文件。</td></tr><tr><td align="center">boolean</td><td align="center">createNewFile()</td><td align="center">当且仅当具有此名称的文件尚不存在时，以原子方式创建由此抽象路径名命名的新空文件。</td></tr><tr><td align="center">boolean</td><td align="center">mkdir()</td><td align="center">创建文件目录。如果此文件目录存在，就不创建了。如果此文件目录的上层目录不存在，也不创建。</td></tr><tr><td align="center">boolean</td><td align="center">mkdirs()</td><td align="center">创建文件目录。如果此文件目录存在，就不创建了。如果上层文件目录不存在，一并创建</td></tr><tr><td align="center">boolean</td><td align="center">delete()</td><td align="center">删除此抽象路径名表示的文件或目录。要想删除成功，文件目录下不能有子目录或文件</td></tr></tbody></table><h1 id="IO流原理及流的分类"><a href="#IO流原理及流的分类" class="headerlink" title="IO流原理及流的分类"></a>IO流原理及流的分类</h1><h2 id="IO流原理"><a href="#IO流原理" class="headerlink" title="IO流原理"></a>IO流原理</h2><ul><li>I&#x2F;O是Input&#x2F;Output的缩写，I&#x2F;O技术是非常实用的技术，用于处理设备之间的数据传输。如读&#x2F;写文件，网络通讯等。</li><li>Java程序中，对于数据的输入&#x2F;输出操作以“流(stream)”的方式进行。</li><li>java.io包下提供了各种“流”类和接口，用以获取不同种类的数据，并通过标准的方法输入或输出数据。</li><li>输入input：读取外部数据（磁盘、光盘等存储设备的数据）到程序（内存）中。</li><li>输出output：将程序（内存）数据输出到磁盘、光盘等存储设备中。</li></ul><p>所谓的输入和输出，我们都是站在程序(内存)的角度来说的</p><h2 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h2><ul><li>按操作数据单位不同分为：字节流(8 bit)，字符流(16 bit)</li><li>按数据流的流向不同分为：输入流，输出流</li><li>按流的角色的不同分为：节点流，处理流</li></ul><table><thead><tr><th align="center">抽象基类</th><th align="center">节点流（或文件流）</th><th align="center">缓冲流（处理流的一种）</th></tr></thead><tbody><tr><td align="center">InputStream</td><td align="center">FileInputStream</td><td align="center">(read(byte[] buffer))</td></tr><tr><td align="center">OutputStream</td><td align="center">FileOutputStream</td><td align="center">(write(byte[] buffer,0,len)</td></tr><tr><td align="center">Reader</td><td align="center">FileReader (read(char[] cbuf))</td><td align="center">BufferedReader (read(char[] cbuf) &#x2F; readLine())</td></tr><tr><td align="center">Writer</td><td align="center">FileWriter (write(char[] cbuf,0,len)</td><td align="center">BufferedWriter (write(char[] cbuf,0,len) &#x2F; flush()</td></tr></tbody></table><ul><li>Java的IO流共涉及40多个类，实际上非常规则，都是从上述4个抽象基类派生的。</li><li>由这四个类派生出来的子类名称都是以其父类名作为子类名后缀。</li></ul><h2 id="IO流体系"><a href="#IO流体系" class="headerlink" title="IO流体系"></a>IO流体系</h2><table><thead><tr><th align="center">分类</th><th align="center">字节输入流</th><th align="center">字节输出流</th><th align="center">字符输入流</th><th align="center">字符输出流</th></tr></thead><tbody><tr><td align="center">抽象基类</td><td align="center">InputStream</td><td align="center">OutputStream</td><td align="center">Reader</td><td align="center">Writer</td></tr><tr><td align="center">访问文件</td><td align="center">FilelnputStream</td><td align="center">FileOutputStream</td><td align="center">FileReader</td><td align="center">FileWriter</td></tr><tr><td align="center">访问数组</td><td align="center">ByteArrayInputStream</td><td align="center">ByteArrayOutputStream</td><td align="center">CharArrayReader</td><td align="center">CharArrayWriter</td></tr><tr><td align="center">访问管道</td><td align="center">PipedInputStream</td><td align="center">PipedOutputStream</td><td align="center">PipedReader</td><td align="center">PipedWriter</td></tr><tr><td align="center">访问字符串</td><td align="center"></td><td align="center"></td><td align="center">StringReader</td><td align="center">StringWriter</td></tr><tr><td align="center">缓冲流</td><td align="center">BufferedInputStream</td><td align="center">BufferedOuputStream</td><td align="center">BufferedReader</td><td align="center">BufferedWriter</td></tr><tr><td align="center">转换流</td><td align="center"></td><td align="center"></td><td align="center">InputStreamReader</td><td align="center">OutputStreamWriter</td></tr><tr><td align="center">对象流</td><td align="center">ObjectInputStream</td><td align="center">ObjectOutputStream</td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center">FilterlnputStream</td><td align="center">FilterOutputStream</td><td align="center">FilterReader</td><td align="center">FilterWriter</td></tr><tr><td align="center">打印流</td><td align="center"></td><td align="center">PrintStream</td><td align="center"></td><td align="center">PrintWriter</td></tr><tr><td align="center">推回输入流</td><td align="center">PushbacklnputStream</td><td align="center"></td><td align="center">PushbackReader</td><td align="center"></td></tr><tr><td align="center">特殊流</td><td align="center">DatalnputStream</td><td align="center">DataOutputStream</td><td align="center"></td><td align="center"></td></tr></tbody></table><h1 id="节点流-或文件流"><a href="#节点流-或文件流" class="headerlink" title="节点流(或文件流)"></a>节点流(或文件流)</h1><h2 id="FileReader读入数据的基本操作"><a href="#FileReader读入数据的基本操作" class="headerlink" title="FileReader读入数据的基本操作"></a>FileReader读入数据的基本操作</h2><ul><li>在当前module下新建一个hello.txt文件，随便写点东西进去。</li><li>读取文件四个步骤</li></ul><ol><li>实例化File对象，指明要操作的文件</li><li>提供具体的流</li><li>数据的读入过程</li><li>流的关闭操作</li></ol><p>后面的文件操作大体也都是这四个步骤</p><ul><li>完整代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">        fr = <span class="keyword">new</span> <span class="title class_">FileReader</span>(file);</span><br><span class="line">        <span class="type">int</span> a;</span><br><span class="line">        <span class="keyword">while</span> ((a = fr.read()) != -<span class="number">1</span>)</span><br><span class="line">            System.out.print((<span class="type">char</span>) a);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (fr != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fr.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>read()的理解：返回读入的一个字符。如果达到文件末尾，返回-1</li><li>异常的处理：为了保证流资源一定可以执行关闭操作。需要使用try-catch-finally处理</li><li>读入的文件一定要存在，否则就会报FileNotFoundException。</li></ol><p>看似代码乱七八糟没有规律，其实核心代码就下面这几行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">JAVA</span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hello.txt&quot;</span>);      <span class="comment">//1. 实例化File对象</span></span><br><span class="line"><span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(file);   <span class="comment">//2. 提供具体的流</span></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="keyword">while</span> ((a = fr.read()) != -<span class="number">1</span>)           <span class="comment">//3. 数据的读入操作</span></span><br><span class="line">    System.out.print((<span class="type">char</span>) a);</span><br><span class="line">fr.close();                             <span class="comment">//4. 流的关闭操作</span></span><br></pre></td></tr></table></figure><h1 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h1><h2 id="转换流概述与InputStreamReader的使用"><a href="#转换流概述与InputStreamReader的使用" class="headerlink" title="转换流概述与InputStreamReader的使用"></a>转换流概述与InputStreamReader的使用</h2><p>转换流提供了在字节流和字符流之间的转换<br>Java API提供了两个转换流：</p><ul><li>InputStreamReader：将InputStream转换为Reader<ul><li>实现将字节的输入流按指定字符集转换为字符的输入流。</li><li>需要和InputStream“套接”。</li><li>构造器<ul><li>public InputStreamReader(InputStreamin)</li><li>public InputSreamReader(InputStreamin,StringcharsetName)</li><li>如：Reader isr&#x3D; new InputStreamReader(System.in,”gbk”);</li></ul></li></ul></li><li>OutputStreamWriter：将Writer转换为OutputStream<ul><li>实现将字符的输出流按指定字符集转换为字节的输出流。</li><li>需要和OutputStream“套接”。</li><li>构造器<ul><li>public OutputStreamWriter(OutputStreamout)</li><li>public OutputSreamWriter(OutputStreamout,StringcharsetName)</li></ul></li></ul></li></ul><p>字节流中的数据都是字符时，转成字符流操作更高效。</p><p>很多时候我们使用转换流来处理文件乱码问题。实现编码和解码的功能。</p><h1 id="标准的输入流、输出流"><a href="#标准的输入流、输出流" class="headerlink" title="标准的输入流、输出流"></a>标准的输入流、输出流</h1><p>System.in和System.out分别代表了系统标准的输入和输出设备</p><p>默认输入设备是：键盘，输出设备是：显示器</p><p>System.in的类型是InputStream</p><p>System.out的类型是PrintStream，其是OutputStream的子类FilterOutputStream的子类</p><p>重定向：通过System类的setIn，setOut方法对默认设备进行改变。</p><ul><li>public static void setIn(InputStreamin)</li><li>public static void setOut(PrintStreamout)</li></ul><h1 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h1><p>实现将基本数据类型的数据格式转化为字符串输出</p><p>打印流：PrintStream和PrintWriter</p><ul><li>提供了一系列重载的print()和println()方法，用于多种数据类型的输出</li><li>PrintStream和PrintWriter的输出不会抛出IOException异常</li><li>PrintStream和PrintWriter有自动flush功能</li><li>PrintStream 打印的所有字符都使用平台的默认字符编码转换为字节。在需要写入字符而不是写入字节的情况下，应该使用PrintWriter 类。</li><li>System.out返回的是PrintStream的实例</li></ul><h1 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h1><p>为了方便地操作Java语言的基本数据类型和String的数据，可以使用数据流。</p><p>数据流有两个类：(用于读取和写出基本数据类型、String类的数据）</p><ul><li>DataInputStream和DataOutputStream</li><li>分别“套接”在InputStream和OutputStream子类的流上<br>DataInputStream中的方法</li></ul><h1 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h1><h2 id="对象序列化机制的理解"><a href="#对象序列化机制的理解" class="headerlink" title="对象序列化机制的理解"></a>对象序列化机制的理解</h2><ul><li>ObjectInputStream和OjbectOutputSteam</li><li>用于存储和读取基本数据类型数据或对象的处理流。它的强大之处就是可以把Java中的对象写入到数据源中，也能把对象从数据源中还原回来。</li><li>序列化：用ObjectOutputStream类保存基本类型数据或对象的机制</li><li>反序列化：用ObjectInputStream类读取基本类型数据或对象的机制</li><li>ObjectOutputStream和ObjectInputStream不能序列化static和transient修饰的成员变量</li><li>对象序列化机制允许把内存中的Java对象转换成平台无关的二进制流，从而允许把这种二进制流持久地保存在磁盘上，或通过网络将这种二进制流传输到另一个网络节点。当其它程序获取了这种二进制流，就可以恢复成原来的Java对象</li><li>序列化的好处在于可将任何实现了Serializable接口的对象转化为字节数据，使其在保存和传输时可被还原</li><li>序列化是RMI（Remote Method Invoke –远程方法调用）过程的参数和返回值都必须实现的机制，而RMI 是JavaEE的基础。因此序列化机制是JavaEE平台的基础</li><li>如果需要让某个对象支持序列化机制，则必须让对象所属的类及其属性是可序列化的，为了让某个类是可序列化的，该类必须实现如下两个接口之一。否则，会抛出NotSerializableException异常<ul><li>Serializable</li><li>Externalizable</li></ul></li></ul><h2 id="自定义类实现序列化与反序列化操作"><a href="#自定义类实现序列化与反序列化操作" class="headerlink" title="自定义类实现序列化与反序列化操作"></a>自定义类实现序列化与反序列化操作</h2><p>若某个类实现了Serializable接口，该类的对象就是可序列化的：</p><ul><li>创建一个ObjectOutputStream</li><li>调用ObjectOutputStream对象的writeObject(对象) 方法输出可序列化对象</li><li>注意写出一次，操作flush()一次</li></ul><p>反序列化</p><ul><li>创建一个ObjectInputStream对象调用readObject() 方法读取流中的对象</li></ul><p>注意：如果某个类的属性不是基本数据类型或String 类型，而是另一个引用类型，那么这个引用类型必须是可序列化的，否则拥有该类型的Field 的类也不能序列化</p><h2 id="自定义类可序列化的其它要求"><a href="#自定义类可序列化的其它要求" class="headerlink" title="自定义类可序列化的其它要求"></a>自定义类可序列化的其它要求</h2><ol><li>需要实现接口：Serializable</li><li>当前类提供一个全局常量：serialVersionUID</li><li>除了当前Person类需要实现Serializable接口之外，还必须保证其内部所有属性，也必须是可序列化的。（默认情况下，基本数据类型可序列化）</li></ol><p>注意：ObjectOutputStream和ObjectInputStream不能序列化static和transient修饰的成员变量</p><h2 id="serialVersionUID的理解"><a href="#serialVersionUID的理解" class="headerlink" title="serialVersionUID的理解"></a>serialVersionUID的理解</h2><p>凡是实现Serializable接口的类都有一个表示序列化版本标识符的静态变量：</p><ul><li>private static final long serialVersionUID;</li><li>serialVersionUID用来表明类的不同版本间的兼容性。简言之，其目的是以序列化对象进行版本控制，有关各版本反序列化时是否兼容。</li><li>如果类没有显示定义这个静态常量，它的值是Java运行时环境根据类的内部细节自动生成的。若类的实例变量做了修改，serialVersionUID可能发生变化。故建议，显式声明。</li></ul><p>简单来说，Java的序列化机制是通过在运行时判断类的serialVersionUID来验证版本一致性的。在进行反序列化时，JVM会把传来的字节流中的serialVersionUID与本地相应实体类的serialVersionUID进行比较，如果相同就认为是一致的，可以进行反序列化，否则就会出现序列化版本不一致的异常。(InvalidCastException)</p><h1 id="随机存储文件流"><a href="#随机存储文件流" class="headerlink" title="随机存储文件流"></a>随机存储文件流</h1><p>RandomAccessFile 声明在java.io包下，但直接继承于java.lang.Object类。并且它实现了DataInput、DataOutput这两个接口，也就意味着这个类既可以读也可以写。</p><p>RandomAccessFile 类支持“随机访问” 的方式，程序可以直接跳到文件的任意地方来读、写文件</p><ul><li>支持只访问文件的部分内容</li><li>可以向已存在的文件后追加内容</li></ul><p>RandomAccessFile 对象包含一个记录指针，用以标示当前读写处的位置。RandomAccessFile类对象可以自由移动记录指针：</p><ul><li>long getFilePointer()：获取文件记录指针的当前位置</li><li>void seek(long pos)：将文件记录指针定位到pos位置</li></ul><p>构造器</p><ul><li>public RandomAccessFile(Filefile, Stringmode)</li><li>public RandomAccessFile(Stringname, Stringmode)</li></ul><p>创建RandomAccessFile类实例需要指定一个mode 参数，该参数指定RandomAccessFile的访问模式：</p><ul><li>r: 以只读方式打开</li><li>rw：打开以便读取和写入</li><li>rwd:打开以便读取和写入；同步文件内容的更新</li><li>rws:打开以便读取和写入；同步文件内容和元数据的更新</li></ul><p>如果模式为只读r。则不会创建文件，而是会去读取一个已经存在的文件，如果读取的文件不存在则会出现异常。如果模式为rw读写。如果文件不存在则会去创建文件，如果存在则不会创建。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>王小波</title>
      <link href="/2022/wxiaobo/"/>
      <url>/2022/wxiaobo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr><blockquote class="blockquote-center"><p>  这本书原来是我的，这世界上原来还有属于我的东西——说起来平淡无奇，但我确实没想到。</p></blockquote><hr><p>王小波<em>（1952年5月13日—1997年4月11日）</em>，男，中国当代学者、作家。代表作品有《<a href="https://baike.baidu.com/item/%E9%BB%84%E9%87%91%E6%97%B6%E4%BB%A3/13130552?fromModule=lemma_inlink">黄金时代</a>》《<a href="https://baike.baidu.com/item/%E7%99%BD%E9%93%B6%E6%97%B6%E4%BB%A3/25278?fromModule=lemma_inlink">白银时代</a>》《<a href="https://baike.baidu.com/item/%E9%9D%92%E9%93%9C%E6%97%B6%E4%BB%A3/9023087?fromModule=lemma_inlink">青铜时代</a>》《<a href="https://baike.baidu.com/item/%E9%BB%91%E9%93%81%E6%97%B6%E4%BB%A3/1645748?fromModule=lemma_inlink">黑铁时代</a>》等。 </p><img src="https://fmphoto.oss-cn-chengdu.aliyuncs.com/Video/%E7%8E%8B%E5%B0%8F%E6%B3%A2.jpeg"  style="zoom: 66%;" /><center><font align="center" color=gray size=2>王小波与李银河</font></center><span id="more"></span><p>生于北京，先后当过知青、民办教师、工人。1978年考入中国人民大学，1980年王小波与<a href="https://baike.baidu.com/item/%E6%9D%8E%E9%93%B6%E6%B2%B3/648256?fromModule=lemma_inlink">李银河</a>结婚，同年发表处女作《地久天长》。1984年赴美匹兹堡大学东亚研究中心求学，2年后获得硕士学位。在美留学期间，游历了美国各地，并利用1986年暑假游历了西欧诸国。1988年回国，先后在北京大学，中国人民大学任教。1992年9月辞去教职，做自由撰稿人。他的唯一一部电影剧本《<a href="https://baike.baidu.com/item/%E4%B8%9C%E5%AE%AB%E8%A5%BF%E5%AE%AB/2540476?fromModule=lemma_inlink">东宫西宫</a>》获阿根廷国际电影节<strong>最佳编剧奖</strong>，使王小波成为在国际电影节为中国取得最佳编剧奖的第一人，并且入围1997年戛纳国际电影节。1997年4月11日病逝于北京，年仅45岁。</p><div class="douban-card-block">    <a class="douban-card" href="https://movie.douban.com/subject/1304609">        <div bg-lazy class="douban-card-bgimg" style="background-image: url('https://images.weserv.nl/?url=https://img9.doubanio.com/view/photo/s_ratio_poster/public/p944507896.jpg');"></div>        <div class="douban-card-left">            <div bg-lazy class="douban-card-img" style="background-image: url('https://images.weserv.nl/?url=https://img9.doubanio.com/view/photo/s_ratio_poster/public/p944507896.jpg');"></div>            <div class="douban-card-status">灯影绰约</div>        </div>        <div class="douban-card-right">            <div class="douban-card-item"><span>电影名: </span><strong>东宫西宫東宮西宮(1996)</strong></div>            <div class="douban-card-item"><span>导演: </span><span>张元</span></div>            <div class="douban-card-item"><span>主演: </span><span>司汗/胡军</span></div>            <div class="douban-card-item"><span>上映时间: </span><span>1996-11(马德普拉塔电影节)</span></div>            <div class="douban-card-item"><span>评分: </span><span>6.8</span></div>        </div>    </a></div><p>1977年，二十五岁的王小波与在《光明日报》做编辑的李银河相识并恋爱。当时在王小波朋友圈中传阅的小说手稿《绿毛水怪》是二人相识的契机。相识以后，他们开始了书信往来。</p><div class="douban-card-block">    <a class="douban-card" href="https://book.douban.com/subject/30163860">        <div bg-lazy class="douban-card-bgimg" style="background-image: url('https://images.weserv.nl/?url=https://img1.doubanio.com/view/subject/s/public/s29774838.jpg');">        </div>        <div class="douban-card-left">            <div bg-lazy class="douban-card-img" style="background-image: url('https://images.weserv.nl/?url=https://img1.doubanio.com/view/subject/s/public/s29774838.jpg');">            </div>            <div class="douban-card-status">见字如晤</div>        </div>        <div class="douban-card-right" style="line-height: 1.7;">            <div class="douban-card-item"><span>书名: </span><strong>绿毛水怪</strong></div>            <div class="douban-card-item"><span>作者: </span><span>王小波</span></div>            <div class="douban-card-item"><span>出版年份: </span><span>2018-6</span></div>            <div class="douban-card-item"><span>评分: </span><span>9.1</span></div>        </div>    </a></div><p>1980年1月21日，王小波和李银河登记结婚，因为那时王小波28岁，正在大学读二年级，学生有规定不准结婚，所以结婚是秘密的。没拍结婚照，也没婚礼，两家各请了一桌，不注重形式。王小波和李银河没有孩子，他们结婚前就商量好，两人的世界就已经很丰富很有趣了，不像有些夫妻需要孩子作为纽带。</p><h4 id="代表作品"><a href="#代表作品" class="headerlink" title="代表作品"></a>代表作品</h4><p>1980年9月　《唐人秘传故事》　山东文艺出版社。</p><p>1992年3月　《王二风流史》　香港繁荣出版社。</p><p>1992年8月　《黄金时代》　台湾联经出版社。</p><p>1992年1月　《他们的世界——中国男同性恋群落透视》与李银河合著。香港天地图书公司。</p><p>1994年7月　《黄金时代》　华夏出版社。</p><p>1995年7月　《未来世界》　台湾联经出版社。</p><p>1996年11月　《思维的乐趣》　北岳文艺出版社。</p><p>1997年5月　《时代三部曲》包括《黄金时代》、《白银时代》、《青铜时代》三部小说集　花城出版社。出版于他逝世之后，当年曾引起轰动。</p><p>1997年5月　《我的精神家园》　文化艺术出版社。</p><p>1997年10月　《沉默的大多数》　中国青年出版社。</p><p>1998年2月　《黑铁时代》　时代文艺出版社。</p><p>1998年2月　《地久天长》　时代文艺出版社。</p><p>1999年2月，《黄金时代》（上、下）、《白银时代》、《青铜时代》（上、中、下）由台湾风云时代出版公司出版；4月，《王小波文存》由中国青年出版社出版。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 王小波 </tag>
            
            <tag> 阅读清单 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>戦場ヶ原</title>
      <link href="/2022/hello-world/"/>
      <url>/2022/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr><blockquote class="blockquote-center"><p>莫非，未经世故的阿良良木同学，<br>对我可爱的私服模样心神荡漾，幸福地看晕了？</p><p>戦場ヶ原 ひたぎ</p></blockquote><hr><img src="https://fmphoto.oss-cn-chengdu.aliyuncs.com/Photo/Hallo.jpg" style="zoom: 50%;" /><span id="more"></span><p>傲娇<strong>毒舌</strong>父控，男主人公阿良良木历的<strong>女朋友</strong>.公认的“傲娇”角色,阿良良木历认为她是“冷傲”,非常毒舌，自称其”暴言”是用“铜四十公克、锌二十五克、镍十五公克、腼腆五公克，再加上九十七公斤的恶意”提炼出来的。经常对历使用毒舌谩骂的“言语暴力”，但这好像恰恰是她的示爱表现。历认为她是“诱受型的角色”，即故意说一些话，引诱对方做出自己期待反应的角色。<br>最强武器是<del>暴言</del>订书机，曾用其订伤垃圾君。<br>自我意识强烈的高中女生，强烈的警戒心以及高度的防卫意识与过度的攻击意识，而且是遇到挑衅会先发制人直接还击的类型。战场原的喜怒哀乐不形于色，声音也同样不带任何感情。她不管说什么，语调几乎都是四平八稳。</p>    <div id="aplayer-JxIHuUtx" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="460638" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555" data-volume="0.4"    ></div><h4 id="重生"><a href="#重生" class="headerlink" title="重生"></a>重生</h4><p>《伪物语》中，战场原借由和贝木泥舟的对决，同自己的往事诀别，消除了自己身上所有的怪异因素。经过非常彻底的重生，不再偏激，不走极端，不会莫名具有攻击性，会对正常的事情做出正常的反应，完完全全成了一个温柔可爱的平凡女高中生、容易害羞的女孩子。不仅表情丰富，还带着幽默感，而且最重要的是，她变得经常会展露笑容了。但是她那“毒舌时代”的残渣还是会时不时渗透出来。 </p><p>为了跟自己的过去做一个了断，战场原还将从小学期就保持着的长长的黑色（动画中表现为紫色）直发剪成了一头清爽<strong>短发</strong>，曾经一直线的刘海也变成了蓬松的波浪形。如果说把双脚裸露出来，那宁可砍掉也是过去的事情了，裙子的下摆变短了<del>绝对领域</del>，对于肌肤裸露也不再那么抗拒。原先在她身上的那种“大家闺秀”的氛围也消失得无影无踪。</p><h4 id="在5月14日母亲节那天向历告白："><a href="#在5月14日母亲节那天向历告白：" class="headerlink" title="在5月14日母亲节那天向历告白："></a><strong>在5月14日母亲节那天向历告白</strong>：</h4><p><video src='https://fmphoto.oss-cn-chengdu.aliyuncs.com/Photo/Love.mp4'     controls='controls'  preload="auto"  width='70%'  height='70%' preload='preload' ></video></p><p>战场原不是那种会把恩情和爱情混为一谈的人，喜欢历不是因为历帮助了自己，而因为历“对谁都很温柔”的性格。深爱着历，甚至“<strong>深爱到即使你全身沾满秽物，我也会毫不犹豫拥抱你</strong>”的程度。曾宣称“要是阿良良木被我以外的人杀死，我会去杀掉那个犯人”的程度。“翼猫”章中，在和历的第一次约会中与历接吻，为此还在凌晨给神原骏河打电话向她炫耀了五个多小时。</p><p><img src="https://fmphoto.oss-cn-chengdu.aliyuncs.com/Photo/DangY.jpg"></p><p>　　</p><p>　　</p>]]></content>
      
      
      <categories>
          
          <category> 动漫 </category>
          
          <category> 戦場ヶ原 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 物語 </tag>
            
            <tag> 戦場ヶ原 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>物語系列</title>
      <link href="/2021/wu-yu-xi-lie/"/>
      <url>/2021/wu-yu-xi-lie/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><td>&ensp;&ensp;&ensp;&ensp;&ensp;</td>物语系列是同一世界背景、同一思想主题下多主角多中心的长篇小说集，担任过第一视角的包括阿良良木曆、羽川翼、神原骏河、千石抚子等。不同叙述者下的作品风格常呈现出显著差异。<div style="position: relative; width: 100%; height: 0; padding-bottom: 50%;">    <img  src="https://fmphoto.oss-cn-chengdu.aliyuncs.com/Photo/My.jpg" /></div><span id="more"></span><p>物語系列的动画系列全部由<a href="https://zh.moegirl.org.cn/SHAFT">SHAFT</a>制作，<a href="https://zh.moegirl.org.cn/%E6%96%B0%E6%88%BF%E6%98%AD%E4%B9%8B">新房昭之</a>担任监督或总监督，<a href="https://baike.baidu.com/item/%E6%B8%A1%E8%BE%B9%E6%98%8E%E5%A4%AB/438126">渡邊明夫</a>负责人设，<a href="https://baike.baidu.com/item/%E7%A5%9E%E5%89%8D%E6%99%93/7037499">神前曉</a>负责09至13年及《曆物語》《傷物語》的音乐（其余为<a href="https://baike.baidu.com/item/%E7%BE%BD%E5%86%88%E4%BD%B3/306455">羽岡佳</a>），系列构成全部以「<a href="https://zh.moegirl.org.cn/index.php?title=%E4%B8%9C%E5%AF%8C%E8%80%B6%E5%AD%90&action=edit&redlink=1">東富耶子</a>、<a href="https://zh.moegirl.org.cn/%E6%96%B0%E6%88%BF%E6%98%AD%E4%B9%8B">新房昭之</a>」名义。</p>    <div id="aplayer-RVSQYddv" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="7285295969" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="100px" data-preload=" auto" data-theme="#555" data-order=" list" data-loop=" all"    ></div><h3 id="人物介绍"><a href="#人物介绍" class="headerlink" title="人物介绍"></a>人物介绍</h3><p>物语系列的主要人物有很多，我就介绍一些比较重要的吧。</p><ul><li><p><del>阿垃垃圾君</del>阿良良木历：故事的男主角，高中生，曾经被吸血鬼咬过而变成半吸血鬼，后来恢复了人类的身份，但仍保留了一些特殊能力。他善良但有时伪善，经常卷入各种怪异事件中，帮助身边的女孩解决问题。他的女朋友是战场原黑仪。</p></li><li><p>战场原黑仪：故事的女主角之一，历的同班同学兼女友，个性暴力而直率，曾经因为体重过轻而被称为“荡漾”。她的身体里寄居着一个名为“蟹”的怪异，可以改变她的体重。她和历相爱，但也经常打架。她是羽川翼的好友²³。</p></li><li><p>羽川翼：故事的女主角之一，历的班长，品行端正、成绩优秀、性格认真、知识渊博，是“班长中的班长”。她曾经暗恋历，但被拒绝后仍然和他保持友谊。她的身体里寄居着一个名为“猫”的怪异，可以让她变成黑发白眼的“黑羽川”，或者变成拥有虎纹头发和虎爪的“苛虎”。她和战场原黑仪是好友¹²³。</p></li><li><p>八九寺真宵：故事的女主角之一，历的妹妹级人物，个性活泼可爱，喜欢说谎和捉弄人。她曾经因为家庭问题而变成了一个不可见的“蜗牛”，后来被历发现并帮助。她和历有着特殊的羁绊，可以通过电话联系到他。她和忍野忍是好朋友²³。</p></li><li><p>神原骏河：故事的女主角之一，历的同校同学，个性强势而自信，擅长运动和打架。她曾经因为厌恶自己的女性身份而被一个名为“猴子”的怪异附身，后来被历制服并接受了自己。她对历有着好感，但也尊重他和黑仪的关系。她和千石抚子是表姐妹²³。</p></li><li><p>千石抚子：故事的女主角之一，历的学妹，个性冷淡而高傲，擅长使用诅咒物品。她曾经因为被欺负而用蛇切绳诅咒同学，后来被历发现并帮助。她对历有着好感，但也尊重他和黑仪的关系。她和神原骏河是表姐妹²³。</p></li><li><p>刃下心：故事的重要人物，一个拥有金色眼睛和金色头发的吸血鬼，是历的主人。她曾经是吸血鬼界的王者，拥有无与伦比的力量和美貌，但在遇到历之前，她被三位吸血鬼猎人攻击并剥夺了肢体。她被历救活后，将历变成了自己的眷属，并与历一起收回了肢体。她对历有着深厚的感情，但也尊重他和黑仪的关系。她的真名是姬丝秀忒</p></li><li><p>阿良良木火怜：故事的女主角之一，历的妹妹，个性活泼而任性，喜欢和历玩耍和撒娇。她曾经因为不满历和黑仪的关系而被一个名为“蜂”的怪异附身，后来被历和黑仪帮助。她对历有着兄妹之外的感情，但也尊重他和黑仪的关系。她和阿良良木月火是双胞胎姐妹</p></li><li><p>阿良良木月火：故事的女主角之一，历的妹妹，个性冷静而理智，喜欢读书和学习。她曾经因为不满历和黑仪的关系而被一个名为“凤”的怪异附身，后来被历和黑仪帮助。她对历有着兄妹之外的感情，但也尊重他和黑仪的关系。她和阿良良木火怜是双胞胎姐妹</p></li></ul><p>　　</p><p>　　　</p>]]></content>
      
      
      <categories>
          
          <category> 动漫 </category>
          
          <category> 物語シリーズ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 物語 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我与我</title>
      <link href="/2021/hexo/"/>
      <url>/2021/hexo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><center><font size=5>我与我的博客</font></center><span id="more"></span><h1 id="Bolg环境配置"><a href="#Bolg环境配置" class="headerlink" title="Bolg环境配置"></a>Bolg环境配置</h1><p>博客采用的<a href="%5BHexo%5D(https://hexo.io/zh-cn/)">Hexo框架</a>X<a href="https://github.com/theme-next/hexo-theme-next">Next主题</a>，采取的是网站部署到Github,图片资源采用CDN加速的方式。</p><details><summary>Git</summary><p><a href="https://git-scm.com/">下载地址</a> </p></details><details><summary>node.js</summary><p><a href="https%3A//nodejs.org/en/">下载地址</a> </p></details><h1 id="Next插件配置"><a href="#Next插件配置" class="headerlink" title="Next插件配置"></a>Next插件配置</h1><h2 id="文章字数统计"><a href="#文章字数统计" class="headerlink" title="文章字数统计"></a>文章字数统计</h2><hr><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-symbols-cunt-time</span><br></pre></td></tr></table></figure><p>配置站点配置文件_config.yml下添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#设置博客单词统计</span><br><span class="line">symbols_count_time:</span><br><span class="line">  #文章字数统计</span><br><span class="line">  symbols: true</span><br><span class="line">  #文章阅读时间统计</span><br><span class="line">  time: false</span><br><span class="line">  #站点总字数统计</span><br><span class="line">  total_symbols: true</span><br><span class="line">  #站点总阅读时问统计</span><br><span class="line">  total_time: false</span><br><span class="line">  #排除代码字数影响</span><br><span class="line">  exclude_codeblock: true</span><br></pre></td></tr></table></figure><p>在主题配置文件下添加themes\next_config.yml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">#是否另起一行，不和发表时间一行</span><br><span class="line">  separated_meta: true</span><br><span class="line">#首页文字统计数量前是否添加文字描述 “本文字数”</span><br><span class="line">  item_text_post: true</span><br><span class="line">#页面底部是否显示文字描述</span><br><span class="line">  item_text_total: false</span><br></pre></td></tr></table></figure><h2 id="RSS插件"><a href="#RSS插件" class="headerlink" title="RSS插件"></a>RSS插件</h2><hr><p>为什么要安装RSS插件呢？不了解的可以看看这篇文章：<a href="https://link.zhihu.com/?target=http://www.netshop168.com/article-85934.html">rss订阅是什么意思?为什么要使用RSS?</a>简单来说，RSS是一种协议，允许网站将其内容或其部分内容提供给其他网站或应用程序。通过使用RSS，可以节省宝贵的时间，并将各个站点提供的新闻和信息组织到一个中心点进行查看，也可以通过从使用RSS联合其内容的其他站点导入新闻来向你的站点添加新闻。</p><p>###安装hexo-generator-feed插件**</p><hr><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p>在<strong>站点</strong>配置文件末尾加上如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">feed:</span><br><span class="line">  type: rss2</span><br><span class="line">  path: rss2.xml</span><br><span class="line">  limit: 10</span><br><span class="line">  hub:</span><br><span class="line">  content: &#x27;true&#x27;</span><br></pre></td></tr></table></figure><p>打开<strong>主题</strong>配置文件，搜索rss，将前面的#去掉：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">follow_me:</span><br><span class="line">  #Twitter: https://twitter.com/username || twitter</span><br><span class="line">  #Telegram: https://t.me/channel_name || telegram</span><br><span class="line">  #微信: /images/wechat_channel.jpg || wechat</span><br><span class="line">  RSS: /atom.xml || rss</span><br></pre></td></tr></table></figure><h2 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h2><hr><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search</span><br></pre></td></tr></table></figure><p>查找themes&#x2F;next&#x2F;_config.yml中的local_search ：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  trigger: manual   #手动，按回车键或搜索按钮触发搜索</span><br></pre></td></tr></table></figure><h2 id="图片可点击放大"><a href="#图片可点击放大" class="headerlink" title="图片可点击放大"></a>图片可点击放大</h2><hr><p>打开<strong>主题配置文件</strong>_config.yml，搜索fancybox，设置其值为true：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fancybox: true</span><br></pre></td></tr></table></figure><p>进入到theme&#x2F;next文件夹下，打开Git Bash，输入如下代码：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone theme-next/theme-next-fancybox3 source/lib/fancybox</span><br></pre></td></tr></table></figure><h2 id="博文置顶"><a href="#博文置顶" class="headerlink" title="博文置顶"></a>博文置顶</h2><hr><p>在根目录Blog打开Git Bash，执行下面的命令：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure><h3 id="设置置顶标志"><a href="#设置置顶标志" class="headerlink" title="设置置顶标志"></a>设置置顶标志</h3><p>打开blog&#x2F;themes&#x2F;next&#x2F;layout&#x2F;_macro目录下的post.swig文件，定位到<code>&lt;div class=&quot;post-meta&quot;&gt;</code>标签下，插入如下代码：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if post.top %&#125;</span><br><span class="line">  &lt;i class=&quot;fa fa-thumb-tack&quot;&gt;&lt;/i&gt;</span><br><span class="line">  &lt;font color=7D26CD&gt;置顶&lt;/font&gt;</span><br><span class="line">  &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h3 id="在文章中添加top"><a href="#在文章中添加top" class="headerlink" title="在文章中添加top"></a>在文章中添加top</h3><p>然后在需要置顶的文章的Front-matter中加上top: true即可，如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line"></span><br><span class="line">top: true(&gt;0的数字越大越靠上)</span><br><span class="line"></span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="hexo上给文章加密"><a href="#hexo上给文章加密" class="headerlink" title="hexo上给文章加密"></a>hexo上给文章加密</h2><hr><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure><p>下好插件后将等字段添加到要加密文章的头部，如下：password, abstract, message</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">date: 2020-05-02 18:00:00</span><br><span class="line">them:up主题</span><br><span class="line">password: 设定的密码</span><br><span class="line">abstract: 该博客的摘要，会显示在博客的列表页</span><br><span class="line">message: 查看博客时，密码输入框上面的描述性文字</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="hexo上给文章添加豆瓣卡片"><a href="#hexo上给文章添加豆瓣卡片" class="headerlink" title="hexo上给文章添加豆瓣卡片"></a>hexo上给文章添加豆瓣卡片</h2><hr><p>下载插件:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-douban-card --save</span><br></pre></td></tr></table></figure><p>第一项代表插件名douban</p><p>第二项可选:movie,book,music</p><p>第三项为豆瓣作品对应id，为豆瓣地址栏中后的数字subject</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% douban movie 24745500 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% douban book 30376420 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% douban music 35099703 %&#125;</span><br></pre></td></tr></table></figure><h2 id="插入音乐"><a href="#插入音乐" class="headerlink" title="插入音乐"></a>插入音乐</h2><hr><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-tag-aplayer</span><br></pre></td></tr></table></figure><p>在 Hexo 配置文件 _config.yml 中设置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aplayer:</span><br><span class="line">  meting: true</span><br></pre></td></tr></table></figure><p>接着找到一个歌单、歌曲或专辑的链接，复制这个链接的id，这里以QQ音乐举例： <a href="https://y.qq.com/n/yqq/playlist/7868042847.html">https://y.qq.com/n/yqq/playlist/7868042847.html</a> ，这个歌单的id就是7868042847；</p><p>最后将以下示例代码插入到你想要呈现播放器的地方即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% meting &quot;7868005687&quot; &quot;tencent&quot; &quot;playlist&quot; &quot;theme:#555&quot; &quot;mutex:true&quot; &quot;listmaxheight:1000px&quot; &quot;preload:auto&quot; %&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>container</th><th>document.querySelector(‘.aplayer’)</th><th>播放器容器元素</th></tr></thead><tbody><tr><td>fixed</td><td>false</td><td>开启吸底模式, <a href="https://aplayer.js.org/#/home?id=fixed-mode">详情</a></td></tr><tr><td>mini</td><td>false</td><td>开启迷你模式, <a href="https://aplayer.js.org/#/home?id=mini-mode">详情</a></td></tr><tr><td>autoplay</td><td>false</td><td>音频自动播放</td></tr><tr><td>theme</td><td>‘#b7daff’</td><td>主题色</td></tr><tr><td>loop</td><td>‘all’</td><td>音频循环播放, 可选值: ‘all’, ‘one’, ‘none’</td></tr><tr><td>order</td><td>‘list’</td><td>音频循环顺序, 可选值: ‘list’, ‘random’</td></tr><tr><td>preload</td><td>‘auto’</td><td>预加载，可选值: ‘none’, ‘metadata’, ‘auto’</td></tr><tr><td>volume</td><td>0.7</td><td>默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</td></tr><tr><td>audio</td><td>-</td><td>音频信息, 应该是一个对象或对象数组</td></tr><tr><td>audio.name</td><td>-</td><td>音频名称</td></tr><tr><td>audio.artist</td><td>-</td><td>音频艺术家</td></tr><tr><td>audio.url</td><td>-</td><td>音频链接</td></tr><tr><td>audio.cover</td><td>-</td><td>音频封面</td></tr><tr><td>audio.lrc</td><td>-</td><td><a href="https://aplayer.js.org/#/home?id=lrc">详情</a></td></tr><tr><td>audio.theme</td><td>-</td><td>切换到此音频时的主题色，比上面的 theme 优先级高</td></tr><tr><td>audio.type</td><td>‘auto’</td><td>可选值: ‘auto’, ‘hls’, ‘normal’ 或其他自定义类型, <a href="https://aplayer.js.org/#/home?id=mse-support">详情</a></td></tr><tr><td>customAudioType</td><td>-</td><td>自定义类型，<a href="https://aplayer.js.org/#/home?id=mse-support">详情</a></td></tr><tr><td>mutex</td><td>true</td><td>互斥，阻止多个播放器同时播放，当前播放器播放时暂停其他播放器</td></tr><tr><td>lrcType</td><td>0</td><td><a href="https://aplayer.js.org/#/home?id=lrc">详情</a></td></tr><tr><td>listFolded</td><td>false</td><td>列表默认折叠</td></tr><tr><td>listMaxHeight</td><td>-</td><td>列表最大高度</td></tr><tr><td>storageName</td><td>‘aplayer-setting’</td><td>存储播放器设置的 localStorage key</td></tr></tbody></table><h2 id="B站追番列表"><a href="#B站追番列表" class="headerlink" title="B站追番列表"></a>B站追番列表</h2><p>安装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-bilibili-bangumi --save</span><br></pre></td></tr></table></figure><p>将下面的配置写入站点的配置文件 <code>_config.yml</code> 里(不是主题的配置文件).</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">bangumi</span>: # 追番设置</span><br><span class="line">  <span class="attr">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">source</span>: bili</span><br><span class="line">  <span class="attr">bgmInfoSource</span>: <span class="string">&#x27;bgmApi&#x27;</span></span><br><span class="line">  <span class="attr">path</span>:</span><br><span class="line">  <span class="attr">vmid</span>:</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;追番列表&#x27;</span></span><br><span class="line">  <span class="attr">quote</span>: <span class="string">&#x27;生命不息，追番不止！&#x27;</span></span><br><span class="line">  <span class="attr">show</span>: <span class="number">1</span></span><br><span class="line">  <span class="attr">lazyload</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">srcValue</span>: <span class="string">&#x27;__image__&#x27;</span></span><br><span class="line">  <span class="attr">lazyloadAttrName</span>: <span class="string">&#x27;data-src=__image__&#x27;</span></span><br><span class="line">  <span class="attr">loading</span>:</span><br><span class="line">  <span class="attr">showMyComment</span>: <span class="literal">false</span></span><br><span class="line">  <span class="attr">pagination</span>: <span class="literal">false</span></span><br><span class="line">  <span class="attr">metaColor</span>:</span><br><span class="line">  <span class="attr">color</span>:</span><br><span class="line">  <span class="attr">webp</span>:</span><br><span class="line">  <span class="attr">progress</span>:</span><br><span class="line">  <span class="attr">extraOrder</span>:</span><br><span class="line">  <span class="attr">proxy</span>:</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;代理host&#x27;</span></span><br><span class="line">    <span class="attr">port</span>: <span class="string">&#x27;代理端口&#x27;</span></span><br><span class="line">  <span class="attr">extra_options</span>:</span><br><span class="line">    <span class="attr">key</span>: value</span><br><span class="line"><span class="attr">cinema</span>: # 追剧设置</span><br><span class="line">  <span class="attr">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">path</span>:</span><br><span class="line">  <span class="attr">vmid</span>:</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;追剧列表&#x27;</span></span><br><span class="line">  <span class="attr">quote</span>: <span class="string">&#x27;生命不息，追剧不止！&#x27;</span></span><br><span class="line">  <span class="attr">show</span>: <span class="number">1</span></span><br><span class="line">  <span class="attr">lazyload</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">srcValue</span>: <span class="string">&#x27;__image__&#x27;</span></span><br><span class="line">  <span class="attr">lazyloadAttrName</span>: <span class="string">&#x27;data-src=__image__&#x27;</span></span><br><span class="line">  <span class="attr">loading</span>:</span><br><span class="line">  <span class="attr">metaColor</span>:</span><br><span class="line">  <span class="attr">color</span>:</span><br><span class="line">  <span class="attr">webp</span>:</span><br><span class="line">  <span class="attr">progress</span>:</span><br><span class="line">  <span class="attr">extraOrder</span>:</span><br><span class="line">  <span class="attr">extra_options</span>:</span><br><span class="line">    <span class="attr">key</span>: value</span><br></pre></td></tr></table></figure><blockquote><p>带*为必填选项！</p></blockquote><ul><li><strong>enable</strong>: 是否启用</li><li><strong>source</strong>: 数据源，仅支持追番，追剧仅支持哔哩哔哩源。<code>bili</code>: <a href="https://www.bilibili.com/">哔哩哔哩源</a>, <code>bangumi</code>: <a href="https://bangumi.tv/">Bangumi源(bangumi.tv)</a>, <code>bgm</code>: <a href="https://bgm.tv/">Bangumi源(bgm.tv)</a></li><li><strong>bgmInfoApi</strong>: 获取Bangumi番剧信息时使用的Api，仅使用Bangumi源时此选项生效。<code>bgmApi</code>: <a href="https://github.com/bangumi/api/">Bangumi Api</a>, <code>bgmSub</code>: <a href="https://github.com/czy0729/Bangumi-Subject">Bangumi-Subject</a></li><li><strong>proxy</strong>: 代理设置，仅在使用支持<code>bgm</code>源追番时生效。默认<code>false</code></li><li><strong>path</strong>: 页面路径，默认<code>bangumis/index.html</code>, <code>cinemas/index.html</code></li><li><strong>vmid</strong>: 哔哩哔哩的 <code>vmid(uid)</code><a href="https://github.com/HCLonely/hexo-bilibili-bangumi#%E8%8E%B7%E5%8F%96-bilibili-uid">如何获取？</a>或Bangumi的用户<code>id</code><a href="https://github.com/HCLonely/hexo-bilibili-bangumi#%E8%8E%B7%E5%8F%96-bangumi-id">如何获取？</a></li><li><strong>title</strong>: 该页面的标题</li><li><strong>quote</strong>: 写在页面开头的一段话，支持 html 语法，可留空。</li><li><strong>show</strong>: 初始显示页面：<code>0: 想看</code>, <code>1: 在看</code>, <code>2: 看过</code>，默认为<code>1</code></li><li><strong>lazyload</strong>: 是否启用图片懒加载，如果与主题的懒加载冲突请关闭，默认<code>true</code></li><li><strong>srcValue</strong>: 设置封面图的默认<code>src</code>值, <code>__image__</code>为封面链接, <code>__loading__</code>为loading图片链接, <code>lazyload</code>选项为<code>false</code>时此选项生效</li><li><strong>lazyloadAttrName</strong>: 设置封面图的属性与属性值, 例<code>lazyloadAttrName: &#39;data-src=__image__&#39;</code>代表为<code>img</code>元素添加<code>data-src</code>属性, 其值为图片链接, <code>lazyload</code>选项为<code>false</code>时此选项生效</li><li><strong>loading</strong>: 图片加载完成前的 loading 图片，需启用图片懒加载</li><li><strong>metaColor</strong>: meta 部分(简介上方)字体颜色（十六进制的颜色代码需要添加引号：<code>metaColor: &#39;#FFFFFF&#39;</code>）</li><li><strong>color</strong>: 简介字体颜色</li><li><strong>webp</strong>: 番剧封面使用<code>webp</code>格式(此格式在<code>safari</code>浏览器下不显示，但是图片大小可以缩小 100 倍左右，仅支持哔哩哔哩源), 默认<code>true</code></li><li><strong>progress</strong>: 获取番剧数据时是否显示进度条，默认<code>true</code></li><li><strong>extraOrder</strong>: 手动添加的番剧&#x2F;追剧数据是否优先显示，<code>1</code>为优先，其它为不优先</li><li><strong>showMyComment</strong>: 使用<code>bgm</code>源时显示自己的评价及评论，默认<code>false</code></li><li><strong>pagination</strong>: 分页优化，只将第一页的数据渲染到<code>html</code>文件中，其余数据将通过异步请求加载，避免番剧过多时html文件过大导致页面加载缓慢，建议番剧较多时使用，默认<code>false</code></li><li><strong>extra_options</strong>: 此配置会扩展到Hexo<code>page</code>变量中</li></ul><p><strong>使用</strong></p><ol><li>在<code>hexo generate</code>或<code>hexo deploy</code>之前使用<code>hexo bangumi -u</code>命令更新追番数据，使用<code>hexo cinema -u</code>命令更新追剧数据！</li><li>删除数据命令:<code>hexo bangumi -d</code>&#x2F;<code>hexo cinema -d</code></li></ol><p> <strong>手动添加番剧&#x2F;追剧数据</strong></p><p>因为某些番剧在哔哩哔哩上没有，但是又想在hexo中展示，怎么办呢？现在支持手动添加番剧数据了！</p><p>在 <code>sources/_data/</code> 目录下新建文件，命名为 <code>extra_bangumis.json</code>(追番数据)或<code>extra_cinemas.json</code>(追剧数据) ，并添加以如下内容:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;watchedExtra&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;title&quot;: &quot;缘之空&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;番剧&quot;,</span><br><span class="line">      &quot;area&quot;: &quot;日本&quot;,</span><br><span class="line">      &quot;cover&quot;: &quot;https://cdn.jsdelivr.net/gh/mmdjiji/bangumis@main/Yosuga-no-Sora/cover.jpg&quot;,</span><br><span class="line">      &quot;totalCount&quot;: &quot;全12话&quot;,</span><br><span class="line">      &quot;id&quot;: 0,</span><br><span class="line">      &quot;follow&quot;: &quot;不可用&quot;,</span><br><span class="line">      &quot;view&quot;: &quot;不可用&quot;,</span><br><span class="line">      &quot;danmaku&quot;: &quot;不可用&quot;,</span><br><span class="line">      &quot;coin&quot;: &quot;不可用&quot;,</span><br><span class="line">      &quot;score&quot;: &quot;不可用&quot;,</span><br><span class="line">      &quot;des&quot;: &quot;远离都市的田园小镇，奥木染。春日野悠带着妹妹穹，来到了这座城镇。坐落在这里的是，儿时暑假经常造访的充满回忆的已故祖父的家。双亲因意外事故而丧生，变得无依无靠...&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>title</code> 是番剧的标题，<code>cover</code> 是封面图链接， <code>des</code> 是简介，上述字段均根据需要修改。</p><p>另外除了 <code>watchedExtra</code> 数组，还可以在后面添加新的数组，可用数组名如下:</p><table><thead><tr><th>可用数组名</th><th>含义</th></tr></thead><tbody><tr><td>wantWatchExtra</td><td>想看</td></tr><tr><td>watchingExtra</td><td>在看</td></tr><tr><td>watchedExtra</td><td>看过</td></tr></tbody></table><p>需要注意，在两个数组之间需要用 <code>,</code> 分隔。</p><h1 id="NexT主题美化"><a href="#NexT主题美化" class="headerlink" title="NexT主题美化"></a>NexT主题美化</h1><h2 id="设置建站时间"><a href="#设置建站时间" class="headerlink" title="设置建站时间"></a>设置建站时间</h2><hr><p>打开主题配置文件即themes&#x2F;next下的_config.yml，查找since：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">footer:</span><br><span class="line">  # Specify the date when the site was setup. If not defined, current year will be used.</span><br><span class="line">  since: 2020-02   #建站时间</span><br></pre></td></tr></table></figure><h2 id="文章末尾添加版权说明"><a href="#文章末尾添加版权说明" class="headerlink" title="文章末尾添加版权说明"></a>文章末尾添加版权说明</h2><hr><p>查找<strong>主题</strong>配置文件themes&#x2F;next&#x2F;_config.yml中的creative_commons：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">creative_commons:</span><br><span class="line">  license: by-nc-sa</span><br><span class="line">  sidebar: false</span><br><span class="line">  post: true  # 将false改为true即可显示版权信息</span><br><span class="line">  language:</span><br></pre></td></tr></table></figure><h2 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h2><hr><p>打开主题配置文件即themes&#x2F;next下的_config.yml，查找avatar，url后是图片的链接地址：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line">avatar:</span><br><span class="line">  # Replace the default image and set the url here.</span><br><span class="line">  url: /images/avatar.gif   #图片的位置，也可以是http://xxx.com/avatar.png</span><br><span class="line">  # If true, the avatar will be dispalyed in circle.</span><br><span class="line">  rounded: true   #头像展示在圈里</span><br><span class="line">  # If true, the avatar will be rotated with the cursor.</span><br><span class="line">  rotated: false  #头像随光标旋转</span><br></pre></td></tr></table></figure><p>然后将你要的头像图片复制到themes&#x2F;next&#x2F;source&#x2F;images里，重命名为avatar.png。</p><h2 id="网站图标设置"><a href="#网站图标设置" class="headerlink" title="网站图标设置"></a>网站图标设置</h2><hr><p>使用<a href="https://www.aconvert.com/cn/icon/png-to-ico/">格式转换器</a>将自己需要的图片压缩</p><p>下载16x16和32x32的图标后，打开主题配置文件，查找favicon，只要修改small和medium为你的图标路径：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: /images/favicon-16x16.png</span><br><span class="line">  medium: /images/favicon-32x32.png</span><br><span class="line">  apple_touch_icon: /images/apple-touch-icon-next.png</span><br><span class="line">  safari_pinned_tab: /images/logo.svg</span><br><span class="line">  #android_manifest: /images/manifest.json</span><br><span class="line">  #ms_browserconfig: /images/browserconfig.xml</span><br></pre></td></tr></table></figure><h2 id="设置动态背景"><a href="#设置动态背景" class="headerlink" title="设置动态背景"></a>设置动态背景</h2><hr><p><strong>JavaScript 3D library风格</strong></p><p>在themes&#x2F;next目录下打开Git Bash，输入：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme-next/theme-next-three source/lib/three</span><br></pre></td></tr></table></figure><p>打开主题配置文件即themes&#x2F;next下的_config.yml，找到three，这里有三种风格，可以试一下看看喜欢哪种风格，直接将false改为true就行了。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># JavaScript 3D library.</span><br><span class="line"># Dependencies: https://github.com/theme-next/theme-next-three</span><br><span class="line">three:</span><br><span class="line">  enable: true</span><br><span class="line">  three_waves: false</span><br><span class="line">  canvas_lines: false</span><br><span class="line">  canvas_sphere: false</span><br></pre></td></tr></table></figure><h2 id="设置背景图片"><a href="#设置背景图片" class="headerlink" title="设置背景图片"></a>设置背景图片</h2><hr><p>打开主题配置文件即themes&#x2F;next下的_config.yml，将 style: source&#x2F;_data&#x2F;styles.styl 取消注释：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">custom_file_path:</span><br><span class="line">  style: source/_data/styles.styl</span><br></pre></td></tr></table></figure><p>打开根目录Blog&#x2F;source创建文件_data&#x2F;styles.styl，添加以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 添加背景图片</span><br><span class="line">body &#123;</span><br><span class="line">      background: url(images/background.png);//自己喜欢的图片地址</span><br><span class="line">      background-size: cover;</span><br><span class="line">      background-repeat: no-repeat;//定义背景图像的重复方式。不重复</span><br><span class="line">      background-attachment: fixed;//决定背景图像的位置是在视口内固定，或者随着包含它的区块滚动。</span><br><span class="line">      background-position: 50% 50%;//每一个背景图片设置初始位置。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主页文章添加阴影效果"><a href="#主页文章添加阴影效果" class="headerlink" title="主页文章添加阴影效果"></a>主页文章添加阴影效果</h2><hr><p>打开themes&#x2F;next&#x2F;source&#x2F;css&#x2F;_common&#x2F;conponents&#x2F;post&#x2F;post.styl，修改.post-block，如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.use-motion &#123;</span><br><span class="line">  if (hexo-config(&#x27;motion.transition.post_block&#x27;)) &#123;</span><br><span class="line">    .post-block &#123;</span><br><span class="line">      opacity: 0;</span><br><span class="line">      margin-top: 60px;</span><br><span class="line">      margin-bottom: 60px;</span><br><span class="line">      padding: 25px;</span><br><span class="line">      background:rgba(255,255,255,0.9) none repeat scroll !important;</span><br><span class="line">      -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);</span><br><span class="line">      -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    .pagination, .comments&#123;</span><br><span class="line">      opacity: 0;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>还有一种方法打开Blog&#x2F;source&#x2F;_date&#x2F;style.styl文件，添加以下代码：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 主页文章添加阴影效果</span><br><span class="line">.post &#123;</span><br><span class="line">   margin-top: 60px;</span><br><span class="line">   margin-bottom: 60px;</span><br><span class="line">   padding: 25px;</span><br><span class="line">   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);</span><br><span class="line">   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);</span><br></pre></td></tr></table></figure><h2 id="设置预览摘要"><a href="#设置预览摘要" class="headerlink" title="设置预览摘要"></a>设置预览摘要</h2><hr><p>next（v7.7.1）已经没有如下代码：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">auto_excerpt:</span><br><span class="line">  enable: true</span><br><span class="line">  length: 150</span><br></pre></td></tr></table></figure><p>所以不需要设置，只要我们在文章中插入 <!-- more -->，该标签之上的是摘要，之后的内容不可见，需点击全文阅读按钮：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure><h2 id="设置侧边栏显示效果"><a href="#设置侧边栏显示效果" class="headerlink" title="设置侧边栏显示效果"></a>设置侧边栏显示效果</h2><hr><p>打开<strong>主题配置文件</strong>即themes&#x2F;next下的_config.yml，找到Sidebar Settings，设置：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sidebar:</span><br><span class="line">  # Sidebar Position. #设置侧边栏位置</span><br><span class="line">  position: left</span><br><span class="line">  #position: right</span><br><span class="line"></span><br><span class="line">  #  - post    默认显示模式</span><br><span class="line">  #  - always  一直显示</span><br><span class="line">  #  - hide    初始隐藏</span><br><span class="line">  #  - remove  移除侧边栏</span><br><span class="line">  display: post</span><br></pre></td></tr></table></figure><h2 id="侧边栏推荐阅读"><a href="#侧边栏推荐阅读" class="headerlink" title="侧边栏推荐阅读"></a>侧边栏推荐阅读</h2><hr><p>打开<strong>主题</strong>配置文件即themes&#x2F;next下的_config.yml，搜索links（里面写你想要的链接）：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">links_settings:</span><br><span class="line">  icon: fa fa-link</span><br><span class="line">  title: 怪异！</span><br><span class="line">  # Available values: block | inline</span><br><span class="line">  layout: inline</span><br><span class="line"></span><br><span class="line">links:</span><br><span class="line">  #Title: http://yoursite.com</span><br><span class="line">  物语介绍: https://zh.moegirl.org.cn/%E7%89%A9%E8%AF%AD%E7%B3%BB%E5%88%97</span><br><span class="line">  物语拜年祭: https://space.bilibili.com/290451282</span><br></pre></td></tr></table></figure><h2 id="添加社交链接"><a href="#添加社交链接" class="headerlink" title="添加社交链接"></a>添加社交链接</h2><hr><p>打开<strong>主题</strong>配置文件即themes&#x2F;next下的_config.yml，搜索social：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">social:</span><br><span class="line">  bilibil: https://space.bilibili.com/ || fab fa-instagram</span><br><span class="line">  GitHub: https://github.com/ || fab fa-github</span><br><span class="line">  Music: https://music.163.com/#/user/home? || fab fa-youtube</span><br><span class="line">  E-Mail: mailto:xxxx@.com || fa fa-envelope</span><br></pre></td></tr></table></figure><p>“||”前面的是链接，后面的是<a href="https://link.zhihu.com/?target=http://www.fontawesome.com.cn/faicons/%23web-application"> FontAwesome</a>图标名称。</p><h2 id="设置博文内链接为蓝色"><a href="#设置博文内链接为蓝色" class="headerlink" title="设置博文内链接为蓝色"></a>设置博文内链接为蓝色</h2><hr><p>打开themes&#x2F;next&#x2F;source&#x2F;css&#x2F;_common&#x2F;components&#x2F;post&#x2F;post.styl文件，将下面的代码复制到文件最后：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.post-body p a&#123;</span><br><span class="line">     color: #0593d3;</span><br><span class="line">     border-bottom: none;</span><br><span class="line">     &amp;:hover &#123;</span><br><span class="line">       color: #0477ab;</span><br><span class="line">       text-decoration: underline;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="设置文章末尾”本文结束”标记"><a href="#设置文章末尾”本文结束”标记" class="headerlink" title="设置文章末尾”本文结束”标记"></a>设置文章末尾”本文结束”标记</h2><hr><p>在路径&#x2F;themes&#x2F;next&#x2F;layout&#x2F;_macro 中新建 passage-end-tag.swig 文件,并添加以下内容：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        &lt;div style=&quot;text-align:center;color: #ccc;font-size:24px;&quot;&gt;-------------本文结束&lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>接着打开&#x2F;themes&#x2F;next&#x2F;layout&#x2F;_macro&#x2F;post.swig文件，在post-footer前添加代码：</p><p><img src="/Hexo/image-20221214011605942-16740580469134.png"></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if not is_index and theme.passage_end_tag.enabled %&#125;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &#123;% include &#x27;passage-end-tag.swig&#x27; %&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>然后打开<strong>主题</strong>配置文件（_config.yml)，在末尾添加：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 文章末尾添加“本文结束”标记</span><br><span class="line">passage_end_tag:</span><br><span class="line">  enabled: true</span><br></pre></td></tr></table></figure><h2 id="添加访问量统计"><a href="#添加访问量统计" class="headerlink" title="添加访问量统计"></a>添加访问量统计</h2><hr><p>打开<strong>主题配置文件</strong>即themes&#x2F;next下的_config.yml，找到busuanzi_count，改为true：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">busuanzi_count:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><p>打开&#x2F;themes&#x2F;next&#x2F;layout&#x2F;_partials&#x2F;footer.swig，在最后添加如下内容：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.busuanzi_count.enable %&#125;</span><br><span class="line">    &lt;script async src=&quot;//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">    &lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;总访客数&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;人&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">&lt;!-- 不蒜子计数初始值纠正 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(document).ready(function() &#123;</span><br><span class="line"></span><br><span class="line">    var int = setInterval(fixCount, 50);  // 50ms周期检测函数</span><br><span class="line">    var countOffset = 20000;  // 初始化首次数据</span><br><span class="line"></span><br><span class="line">    function fixCount() &#123;            </span><br><span class="line">       if (document.getElementById(&quot;busuanzi_container_site_pv&quot;).style.display != &quot;none&quot;)</span><br><span class="line">        &#123;</span><br><span class="line">            $(&quot;#busuanzi_value_site_pv&quot;).html(parseInt($(&quot;#busuanzi_value_site_pv&quot;).html()) + countOffset); </span><br><span class="line">            clearInterval(int);</span><br><span class="line">        &#125;                  </span><br><span class="line">        if ($(&quot;#busuanzi_container_site_pv&quot;).css(&quot;display&quot;) != &quot;none&quot;)</span><br><span class="line">        &#123;</span><br><span class="line">            $(&quot;#busuanzi_value_site_uv&quot;).html(parseInt($(&quot;#busuanzi_value_site_uv&quot;).html()) + countOffset); // 加上初始数据 </span><br><span class="line">            clearInterval(int); // 停止检测</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">       </span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt; </span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h2 id="代码块样式自定义"><a href="#代码块样式自定义" class="headerlink" title="代码块样式自定义"></a>代码块样式自定义</h2><hr><p>打开根目录Blog&#x2F;source&#x2F;_data&#x2F;styles.styl，添加以下内容：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// Custom styles.</span><br><span class="line">code &#123;</span><br><span class="line">    color: #ff7600;</span><br><span class="line">    background: #fbf7f8;</span><br><span class="line">    margin: 2px;</span><br><span class="line">&#125;</span><br><span class="line">// 大代码块的自定义样式</span><br><span class="line">.highlight, pre &#123;</span><br><span class="line">    margin: 5px 0;</span><br><span class="line">    padding: 5px;</span><br><span class="line">    border-radius: 3px;</span><br><span class="line">&#125;</span><br><span class="line">.highlight, code, pre &#123;</span><br><span class="line">    border: 1px solid #d6d6d6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="支持mathjax公式"><a href="#支持mathjax公式" class="headerlink" title="支持mathjax公式"></a>支持mathjax公式</h2><hr><p>打开<strong>主题</strong>配置文件，搜索mathjax：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mathjax:</span><br><span class="line">    enable: true   #将false改为true</span><br><span class="line">    mhchem: false  #用来写化学方程式</span><br></pre></td></tr></table></figure><h2 id="腾讯公益404页面"><a href="#腾讯公益404页面" class="headerlink" title="腾讯公益404页面"></a>腾讯公益404页面</h2><hr><p>离家的路有千万条，但回家的路只有一条。</p><p>在<code>~/hexo/themes/next/source</code>目录下新建<code>404.html</code>页面，在新建页面内添加如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">copy&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8;&quot;/&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt;</span><br><span class="line">  &lt;meta name=&quot;robots&quot; content=&quot;all&quot; /&gt;</span><br><span class="line">  &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot;/&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://qzone.qq.com/gy/404/style/404style.css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script type=&quot;text/plain&quot; src=&quot;http://www.qq.com/404/search_children.js&quot;</span><br><span class="line">          charset=&quot;utf-8&quot; homePageUrl=&quot;/&quot;</span><br><span class="line">          homePageName=&quot;回到我的主页&quot;&gt;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;https://qzone.qq.com/gy/404/data.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;https://qzone.qq.com/gy/404/page.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>其中<code>homePageUrl</code>与<code>homePageName</code>可自定义。</p><h2 id="修改文章底部-号tag标签"><a href="#修改文章底部-号tag标签" class="headerlink" title="修改文章底部#号tag标签"></a>修改文章底部#号tag标签</h2><hr><p>在<code>~hexo/themes/next/layout/_macro</code>中找到<code>post.swig</code>文件，在内搜索<code>el=&quot;tag&quot;&gt;#</code>，将<code>#</code>换成<code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code>即可，然后<code>hexo s</code>刷新预览吧。</p><p>想使用其他图标可在<a href="http://www.fontawesome.com.cn/faicons/">Fontawesome</a>内自行查找。</p><h2 id="给文章添加更新时间"><a href="#给文章添加更新时间" class="headerlink" title="给文章添加更新时间"></a>给文章添加更新时间</h2><hr><p>在<strong>主题</strong>配置文件中找到<code>updated_at</code>，默认为false，修改成true即可。</p><h2 id="添加突破容器宽度限制的图片"><a href="#添加突破容器宽度限制的图片" class="headerlink" title="添加突破容器宽度限制的图片"></a>添加突破容器宽度限制的图片</h2><hr><p>当使用此标签引用图片时，图片将自动扩大 26%，并突破文章容器的宽度。 此标签使用于需要突出显示的图片, 图片的扩大与容器的偏差从视觉上提升图片的吸引力。 此标签有两种调用方式（详细参看底下示例）：</p><ul><li>HTML方式：使用这种方式时，为 img 添加属性 class&#x3D;”full-image”即可。</li><li>标签方式：使用 fullimage 或者 简写 fi， 并传递图片地址、 alt 和 title 属性即可。 属性之间以逗号分隔。</li></ul><p>标签方式要求 NexT 的版本在 0.4.5 或以上。 若你正在使用的版本比较低，可以选择使用 HTML 方式。<br>如果要在图片下显示图片的标题，请使用 标签方式 并给定 title 属性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">copy&lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;</span><br><span class="line">&lt;!-- 其中 class=&quot;full-image&quot; 是必须的 --&gt;</span><br><span class="line">&lt;img src=&quot;/image-url&quot; class=&quot;full-image&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&#123;% fullimage /image-url, alt, title %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 别名 --&gt;</span><br><span class="line">&#123;% fi /image-url, alt, title %&#125;</span><br></pre></td></tr></table></figure><h2 id="添加折叠项"><a href="#添加折叠项" class="headerlink" title="添加折叠项"></a>添加折叠项</h2><hr><p>格式如下，其中内容可以是文字和图片等：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;details&gt;&lt;summary&gt;点此打开折叠项&lt;/summary&gt;&lt;p&gt;</span><br><span class="line">内容</span><br><span class="line">&lt;/p&gt;&lt;/details&gt;</span><br></pre></td></tr></table></figure><p>示例：</p><details><summary>点此打开折叠项</summary><p>内容</p></details>　　<p>　　</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学无止境 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字体、颜色测试</title>
      <link href="/2021/zi-ti-yan-se-ce-shi/"/>
      <url>/2021/zi-ti-yan-se-ce-shi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="字体测试"><a href="#字体测试" class="headerlink" title="字体测试"></a>字体测试</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">copy&lt;font face=&quot;黑体&quot;&gt;我是黑体字&lt;/font&gt;</span><br><span class="line">&lt;font face=&quot;微软雅黑&quot;&gt;我是微软雅黑&lt;/font&gt;</span><br><span class="line">&lt;font face=&quot;STCAIYUN&quot;&gt;我是华文彩云&lt;/font&gt;</span><br><span class="line">&lt;font color=#0099ff size=7 face=&quot;黑体&quot;&gt;size=7 face=&quot;黑体&quot;&lt;/font&gt;</span><br><span class="line">&lt;font color=#00ffff size=7&gt;color=#00ffff&lt;/font&gt;</span><br><span class="line">&lt;font color=gray size=7&gt;color=gray&lt;/font&gt;</span><br></pre></td></tr></table></figure><p><strong>Size:规定文本的尺寸大小。可能的值：从1到7的数字。浏览器默认值是3。</strong></p><span id="more"></span><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>我是黑体字z</p><p>我是微软雅黑</p><p>我是华文彩云</p><p>size&#x3D;7 face&#x3D;”黑体”</p><p>color&#x3D;#00ffff 可以用十六位颜色值</p><p>color&#x3D;gray 也可以用已知颜色名</p><hr><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;font color=&quot;Tomato&quot;&gt;Tomato&lt;/font&gt;&lt;/td&gt;&lt;td&gt;&lt;font color=&quot;#FF6347&quot;&gt;#FF6347&lt;/font&gt;&lt;/td&gt;&lt;td bgcolor=&quot;#FF6347&quot;&gt;rgb(255, 99, 71)&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt;</span><br></pre></td></tr></table></figure><h2 id="表格颜色"><a href="#表格颜色" class="headerlink" title="表格颜色"></a>表格颜色</h2><table><tbody><tr><th>颜色名　　　　　</th><th>十六进制颜色值　　　　</th><th>颜色　　　　　　</th></tr>    <tr><td><font color="AliceBlue">AliceBlue</font></td><td><font color="#F0F8FF">#F0F8FF</font></td><td bgcolor="#F0F8FF">rgb(240, 248, 255)</td></tr>    <tr><td><font color="AntiqueWhite">AntiqueWhite</font></td><td><font color="#FAEBD7">#FAEBD7</font></td><td bgcolor="#FAEBD7">rgb(250, 235, 215)</td></tr>    <tr><td><font color="Aqua">Aqua</font></td><td><font color="#00FFFF">#00FFFF</font></td><td bgcolor="#00FFFF">rgb(0, 255, 255)</td></tr>    <tr><td><font color="Aquamarine">Aquamarine</font></td><td><font color="#7FFFD4">#7FFFD4</font></td><td bgcolor="#7FFFD4">rgb(127, 255, 212)</td></tr>    <tr><td><font color="Azure">Azure</font></td><td><font color="#F0FFFF">#F0FFFF</font></td><td bgcolor="#F0FFFF">rgb(240, 255, 255)</td></tr>            <tr><td><font color="Beige">Beige</font></td><td><font color="#F5F5DC">#F5F5DC</font></td><td bgcolor="#F5F5DC">rgb(245, 245, 220)</td></tr>             <tr><td><font color="Bisque">Bisque</font></td><td><font color="#FFE4C4">#FFE4C4</font></td><td bgcolor="#FFE4C4">rgb(255, 228, 196)</td></tr>            <tr><td><font color="Black">Black</font></td><td><font color="#000000">#000000</font></td><td bgcolor="#000000">rgb(0, 0, 0)</td></tr>             <tr><td><font color="BlanchedAlmond">BlanchedAlmond</font></td><td><font color="#FFEBCD">#FFEBCD</font></td><td bgcolor="#FFEBCD">rgb(255, 235, 205)</td></tr>            <tr><td><font color="Blue">Blue</font></td><td><font color="#0000FF">#0000FF</font></td><td bgcolor="#0000FF">rgb(0, 0, 255)</td></tr>          <tr><td><font color="BlueViolet">BlueViolet</font></td><td><font color="#8A2BE2">#8A2BE2</font></td><td bgcolor="#8A2BE2">rgb(138, 43, 226)</td></tr>          <tr><td><font color="Brown">Brown</font></td><td><font color="#A52A2A">#A52A2A</font></td><td bgcolor="#A52A2A">rgb(165, 42, 42)</td></tr>          <tr><td><font color="BurlyWood">BurlyWood</font></td><td><font color="#DEB887">#DEB887</font></td><td bgcolor="#DEB887">rgb(222, 184, 135)</td></tr>         <tr><td><font color="CadetBlue">CadetBlue</font></td><td><font color="#5F9EA0">#5F9EA0</font></td><td bgcolor="#5F9EA0">rgb(95, 158, 160)</td></tr>         <tr><td><font color="Chartreuse">Chartreuse</font></td><td><font color="#7FFF00">#7FFF00</font></td><td bgcolor="#7FFF00">rgb(127, 255, 0)</td></tr>          <tr><td><font color="Chocolate">Chocolate</font></td><td><font color="#D2691E">#D2691E</font></td><td bgcolor="#D2691E">rgb(210, 105, 30)</td></tr>         <tr><td><font color="Coral">Coral</font></td><td><font color="#FF7F50">#FF7F50</font></td><td bgcolor="#FF7F50">rgb(255, 127, 80)</td></tr>        <tr><td><font color="CornflowerBlue">CornflowerBlue</font></td><td><font color="#6495ED">#6495ED</font></td><td bgcolor="#6495ED">rgb(100, 149, 237)</td></tr>         <tr><td><font color="Cornsilk">Cornsilk</font></td><td><font color="#FFF8DC">#FFF8DC</font></td><td bgcolor="#FFF8DC">rgb(255, 248, 220)</td></tr>          <tr><td><font color="Crimson">Crimson</font></td><td><font color="#DC143C">#DC143C</font></td><td bgcolor="#DC143C">rgb(220, 20, 60)</td></tr>          <tr><td><font color="Cyan">Cyan</font></td><td><font color="#00FFFF">#00FFFF</font></td><td bgcolor="#00FFFF">rgb(0, 255, 255)</td></tr>          <tr><td><font color="DarkBlue">DarkBlue</font></td><td><font color="#00008B">#00008B</font></td><td bgcolor="#00008B">rgb(0, 0, 139)</td></tr>            <tr><td><font color="DarkCyan">DarkCyan</font></td><td><font color="#008B8B">#008B8B</font></td><td bgcolor="#008B8B">rgb(0, 139, 139)</td></tr>            <tr><td><font color="DarkGoldenRod">DarkGoldenRod</font></td><td><font color="#B8860B">#B8860B</font></td><td bgcolor="#B8860B">rgb(184, 134, 11)</td></tr>            <tr><td><font color="DarkGray">DarkGray</font></td><td><font color="#A9A9A9">#A9A9A9</font></td><td bgcolor="#A9A9A9">rgb(169, 169, 169)</td></tr>           <tr><td><font color="DarkGreen">DarkGreen</font></td><td><font color="#006400">#006400</font></td><td bgcolor="#006400">rgb(0, 100, 0)</td></tr>            <tr><td><font color="DarkKhaki">DarkKhaki</font></td><td><font color="#BDB76B">#BDB76B</font></td><td bgcolor="#BDB76B">rgb(189, 183, 107)</td></tr>           <tr><td><font color="DarkMagenta">DarkMagenta</font></td><td><font color="#8B008B">#8B008B</font></td><td bgcolor="#8B008B">rgb(139, 0, 139)</td></tr>           <tr><td><font color="DarkOliveGreen">DarkOliveGreen</font></td><td><font color="#556B2F">#556B2F</font></td><td bgcolor="#556B2F">rgb(85, 107, 47)</td></tr>           <tr><td><font color="Darkorange">Darkorange</font></td><td><font color="#FF8C00">#FF8C00</font></td><td bgcolor="#FF8C00">rgb(255, 140, 0)</td></tr>           <tr><td><font color="DarkOrchid">DarkOrchid</font></td><td><font color="#9932CC">#9932CC</font></td><td bgcolor="#9932CC">rgb(153, 50, 204)</td></tr>           <tr><td><font color="DarkRed">DarkRed</font></td><td><font color="#8B0000">#8B0000</font></td><td bgcolor="#8B0000">rgb(139, 0, 0)</td></tr>            <tr><td><font color="DarkSalmon">DarkSalmon</font></td><td><font color="#E9967A">#E9967A</font></td><td bgcolor="#E9967A">rgb(233, 150, 122)</td></tr>          <tr><td><font color="DarkSeaGreen">DarkSeaGreen</font></td><td><font color="#8FBC8F">#8FBC8F</font></td><td bgcolor="#8FBC8F">rgb(143, 188, 143)</td></tr>          <tr><td><font color="DarkSlateBlue">DarkSlateBlue</font></td><td><font color="#483D8B">#483D8B</font></td><td bgcolor="#483D8B">rgb(72, 61, 139)</td></tr>         <tr><td><font color="DarkSlateGray">DarkSlateGray</font></td><td><font color="#2F4F4F">#2F4F4F</font></td><td bgcolor="#2F4F4F">rgb(47, 79, 79)</td></tr>           <tr><td><font color="DarkTurquoise">DarkTurquoise</font></td><td><font color="#00CED1">#00CED1</font></td><td bgcolor="#00CED1">rgb(0, 206, 209)</td></tr>           <tr><td><font color="DarkViolet">DarkViolet</font></td><td><font color="#9400D3">#9400D3</font></td><td bgcolor="#9400D3">rgb(148, 0, 211)</td></tr>            <tr><td><font color="DeepPink">DeepPink</font></td><td><font color="#FF1493">#FF1493</font></td><td bgcolor="#FF1493">rgb(255, 20, 147)</td></tr>            <tr><td><font color="DeepSkyBlue">DeepSkyBlue</font></td><td><font color="#00BFFF">#00BFFF</font></td><td bgcolor="#00BFFF">rgb(0, 191, 255)</td></tr>           <tr><td><font color="DimGray">DimGray</font></td><td><font color="#696969">#696969</font></td><td bgcolor="#696969">rgb(105, 105, 105)</td></tr>            <tr><td><font color="DodgerBlue">DodgerBlue</font></td><td><font color="#1E90FF">#1E90FF</font></td><td bgcolor="#1E90FF">rgb(30, 144, 255)</td></tr>            <tr><td><font color="Feldspar">Feldspar</font></td><td><font color="#D19275">#D19275</font></td><td bgcolor="#D19275">rgb(209, 146, 117)</td></tr>            <tr><td><font color="FireBrick">FireBrick</font></td><td><font color="#B22222">#B22222</font></td><td bgcolor="#B22222">rgb(178, 34, 34)</td></tr>            <tr><td><font color="FloralWhite">FloralWhite</font></td><td><font color="#FFFAF0">#FFFAF0</font></td><td bgcolor="#FFFAF0">rgb(255, 250, 240)</td></tr>            <tr><td><font color="ForestGreen">ForestGreen</font></td><td><font color="#228B22">#228B22</font></td><td bgcolor="#228B22">rgb(34, 139, 34)</td></tr>            <tr><td><font color="Fuchsia">Fuchsia</font></td><td><font color="#FF00FF">#FF00FF</font></td><td bgcolor="#FF00FF">rgb(255, 0, 255)</td></tr>            <tr><td><font color="Gainsboro">Gainsboro</font></td><td><font color="#DCDCDC">#DCDCDC</font></td><td bgcolor="#DCDCDC">rgb(220, 220, 220)</td></tr>            <tr><td><font color="GhostWhite">GhostWhite</font></td><td><font color="#F8F8FF">#F8F8FF</font></td><td bgcolor="#F8F8FF">rgb(248, 248, 255)</td></tr>            <tr><td><font color="Gold">Gold</font></td><td><font color="#FFD700">#FFD700</font></td><td bgcolor="#FFD700">rgb(255, 215, 0)</td></tr>            <tr><td><font color="GoldenRod">GoldenRod</font></td><td><font color="#DAA520">#DAA520</font></td><td bgcolor="#DAA520">rgb(218, 165, 32)</td></tr>            <tr><td><font color="Gray">Gray</font></td><td><font color="#808080">#808080</font></td><td bgcolor="#808080">rgb(128, 128, 128)</td></tr>            <tr><td><font color="Green">Green</font></td><td><font color="#008000">#008000</font></td><td bgcolor="#008000">rgb(0, 128, 0)</td></tr>            <tr><td><font color="GreenYellow">GreenYellow</font></td><td><font color="#ADFF2F">#ADFF2F</font></td><td bgcolor="#ADFF2F">rgb(173, 255, 47)</td></tr>            <tr><td><font color="HoneyDew">HoneyDew</font></td><td><font color="#F0FFF0">#F0FFF0</font></td><td bgcolor="#F0FFF0">rgb(240, 255, 240)</td></tr>            <tr><td><font color="HotPink">HotPink</font></td><td><font color="#FF69B4">#FF69B4</font></td><td bgcolor="#FF69B4">rgb(255, 105, 180)</td></tr>            <tr><td><font color="IndianRed">IndianRed</font></td><td><font color="#CD5C5C">#CD5C5C</font></td><td bgcolor="#CD5C5C">rgb(205, 92, 92)</td></tr>            <tr><td><font color="Indigo">Indigo</font></td><td><font color="#4B0082">#4B0082</font></td><td bgcolor="#4B0082">rgb(75, 0, 130)</td></tr>            <tr><td><font color="Ivory">Ivory</font></td><td><font color="#FFFFF0">#FFFFF0</font></td><td bgcolor="#FFFFF0">rgb(255, 255, 240)</td></tr>            <tr><td><font color="Khaki">Khaki</font></td><td><font color="#F0E68C">#F0E68C</font></td><td bgcolor="#F0E68C">rgb(240, 230, 140)</td></tr>            <tr><td><font color="Lavender">Lavender</font></td><td><font color="#E6E6FA">#E6E6FA</font></td><td bgcolor="#E6E6FA">rgb(230, 230, 250)</td></tr>       <tr><td><font color="LavenderBlush">LavenderBlush</font></td><td><font color="#FFF0F5">#FFF0F5</font></td><td bgcolor="#FFF0F5">rgb(255, 240, 245)</td></tr>         <tr><td><font color="LawnGreen">LawnGreen</font></td><td><font color="#7CFC00">#7CFC00</font></td><td bgcolor="#7CFC00">rgb(124, 252, 0)</td></tr>         <tr><td><font color="LemonChiffon">LemonChiffon</font></td><td><font color="#FFFACD">#FFFACD</font></td><td bgcolor="#FFFACD">rgb(255, 250, 205)</td></tr>          <tr><td><font color="LightBlue">LightBlue</font></td><td><font color="#ADD8E6">#ADD8E6</font></td><td bgcolor="#ADD8E6">rgb(173, 216, 230)</td></tr>         <tr><td><font color="LightCoral">LightCoral</font></td><td><font color="#F08080">#F08080</font></td><td bgcolor="#F08080">rgb(240, 128, 128)</td></tr>           <tr><td><font color="LightCyan">LightCyan</font></td><td><font color="#E0FFFF">#E0FFFF</font></td><td bgcolor="#E0FFFF">rgb(224, 255, 255)</td></tr>         <tr><td><font color="LightGoldenRodYellow">LightGoldenRodYellow</font></td><td><font color="#FAFAD2">#FAFAD2</font></td><td bgcolor="#FAFAD2">rgb(250, 250, 210)</td></tr>         <tr><td><font color="LightGrey">LightGrey</font></td><td><font color="#D3D3D3">#D3D3D3</font></td><td bgcolor="#D3D3D3">rgb(211, 211, 211)</td></tr>           <tr><td><font color="LightGreen">LightGreen</font></td><td><font color="#90EE90">#90EE90</font></td><td bgcolor="#90EE90">rgb(144, 238, 144)</td></tr>          <tr><td><font color="LightPink">LightPink</font></td><td><font color="#FFB6C1">#FFB6C1</font></td><td bgcolor="#FFB6C1">rgb(255, 182, 193)</td></tr>        <tr><td><font color="LightSalmon">LightSalmon</font></td><td><font color="#FFA07A">#FFA07A</font></td><td bgcolor="#FFA07A">rgb(255, 160, 122)</td></tr>      <tr><td><font color="LightSeaGreen">LightSeaGreen</font></td><td><font color="#20B2AA">#20B2AA</font></td><td bgcolor="#20B2AA">rgb(32, 178, 170)</td></tr>          <tr><td><font color="LightSkyBlue">LightSkyBlue</font></td><td><font color="#87CEFA">#87CEFA</font></td><td bgcolor="#87CEFA">rgb(135, 206, 250)</td></tr>         <tr><td><font color="LightSlateBlue">LightSlateBlue</font></td><td><font color="#8470FF">#8470FF</font></td><td bgcolor="#8470FF">rgb(132, 112, 255)</td></tr>      <tr><td><font color="LightSlateGray">LightSlateGray</font></td><td><font color="#778899">#778899</font></td><td bgcolor="#778899">rgb(119, 136, 153)</td></tr>       <tr><td><font color="LightSteelBlue">LightSteelBlue</font></td><td><font color="#B0C4DE">#B0C4DE</font></td><td bgcolor="#B0C4DE">rgb(176, 196, 222)</td></tr>         <tr><td><font color="LightYellow">LightYellow</font></td><td><font color="#FFFFE0">#FFFFE0</font></td><td bgcolor="#FFFFE0">rgb(255, 255, 224)</td></tr>           <tr><td><font color="Lime">Lime</font></td><td><font color="#00FF00">#00FF00</font></td><td bgcolor="#00FF00">rgb(0, 255, 0)</td></tr>          <tr><td><font color="LimeGreen">LimeGreen</font></td><td><font color="#32CD32">#32CD32</font></td><td bgcolor="#32CD32">rgb(50, 205, 50)</td></tr>          <tr><td><font color="Linen">Linen</font></td><td><font color="#FAF0E6">#FAF0E6</font></td><td bgcolor="#FAF0E6">rgb(250, 240, 230)</td></tr>         <tr><td><font color="Magenta">Magenta</font></td><td><font color="#FF00FF">#FF00FF</font></td><td bgcolor="#FF00FF">rgb(255, 0, 255)</td></tr>          <tr><td><font color="Maroon">Maroon</font></td><td><font color="#800000">#800000</font></td><td bgcolor="#800000">rgb(128, 0, 0)</td></tr>          <tr><td><font color="MediumAquaMarine">MediumAquaMarine</font></td><td><font color="#66CDAA">#66CDAA</font></td><td bgcolor="#66CDAA">rgb(102, 205, 170)</td></tr>          <tr><td><font color="MediumBlue">MediumBlue</font></td><td><font color="#0000CD">#0000CD</font></td><td bgcolor="#0000CD">rgb(0, 0, 205)</td></tr>           <tr><td><font color="MediumOrchid">MediumOrchid</font></td><td><font color="#BA55D3">#BA55D3</font></td><td bgcolor="#BA55D3">rgb(186, 85, 211)</td></tr>         <tr><td><font color="MediumPurple">MediumPurple</font></td><td><font color="#9370D8">#9370D8</font></td><td bgcolor="#9370D8">rgb(147, 112, 216)</td></tr>          <tr><td><font color="MediumSeaGreen">MediumSeaGreen</font></td><td><font color="#3CB371">#3CB371</font></td><td bgcolor="#3CB371">rgb(60, 179, 113)</td></tr>         <tr><td><font color="MediumSlateBlue">MediumSlateBlue</font></td><td><font color="#7B68EE">#7B68EE</font></td><td bgcolor="#7B68EE">rgb(123, 104, 238)</td></tr>         <tr><td><font color="MediumSpringGreen">MediumSpringGreen</font></td><td><font color="#00FA9A">#00FA9A</font></td><td bgcolor="#00FA9A">rgb(0, 250, 154)</td></tr>         <tr><td><font color="MediumTurquoise">MediumTurquoise</font></td><td><font color="#48D1CC">#48D1CC</font></td><td bgcolor="#48D1CC">rgb(72, 209, 204)</td></tr>       <tr><td><font color="MediumVioletRed">MediumVioletRed</font></td><td><font color="#C71585">#C71585</font></td><td bgcolor="#C71585">rgb(199, 21, 133)</td></tr>       <tr><td><font color="MidnightBlue">MidnightBlue</font></td><td><font color="#191970">#191970</font></td><td bgcolor="#191970">rgb(25, 25, 112)</td></tr>         <tr><td><font color="MintCream">MintCream</font></td><td><font color="#F5FFFA">#F5FFFA</font></td><td bgcolor="#F5FFFA">rgb(245, 255, 250)</td></tr>          <tr><td><font color="MistyRose">MistyRose</font></td><td><font color="#FFE4E1">#FFE4E1</font></td><td bgcolor="#FFE4E1">rgb(255, 228, 225)</td></tr>         <tr><td><font color="Moccasin">Moccasin</font></td><td><font color="#FFE4B5">#FFE4B5</font></td><td bgcolor="#FFE4B5">rgb(255, 228, 181)</td></tr>         <tr><td><font color="NavajoWhite">NavajoWhite</font></td><td><font color="#FFDEAD">#FFDEAD</font></td><td bgcolor="#FFDEAD">rgb(255, 222, 173)</td></tr>        <tr><td><font color="Navy">Navy</font></td><td><font color="#000080">#000080</font></td><td bgcolor="#000080">rgb(0, 0, 128)</td></tr>          <tr><td><font color="OldLace">OldLace</font></td><td><font color="#FDF5E6">#FDF5E6</font></td><td bgcolor="#FDF5E6">rgb(253, 245, 230)</td></tr>       <tr><td><font color="Olive">Olive</font></td><td><font color="#808000">#808000</font></td><td bgcolor="#808000">rgb(128, 128, 0)</td></tr>          <tr><td><font color="OliveDrab">OliveDrab</font></td><td><font color="#6B8E23">#6B8E23</font></td><td bgcolor="#6B8E23">rgb(107, 142, 35)</td></tr>         <tr><td><font color="Orange">Orange</font></td><td><font color="#FFA500">#FFA500</font></td><td bgcolor="#FFA500">rgb(255, 165, 0)</td></tr>          <tr><td><font color="OrangeRed">OrangeRed</font></td><td><font color="#FF4500">#FF4500</font></td><td bgcolor="#FF4500">rgb(255, 69, 0)</td></tr>          <tr><td><font color="Orchid">Orchid</font></td><td><font color="#DA70D6">#DA70D6</font></td><td bgcolor="#DA70D6">rgb(218, 112, 214)</td></tr>      <tr><td><font color="PaleGoldenRod">PaleGoldenRod</font></td><td><font color="#EEE8AA">#EEE8AA</font></td><td bgcolor="#EEE8AA">rgb(238, 232, 170)</td></tr>        <tr><td><font color="PaleGreen">PaleGreen</font></td><td><font color="#98FB98">#98FB98</font></td><td bgcolor="#98FB98">rgb(152, 251, 152)</td></tr>          <tr><td><font color="PaleTurquoise">PaleTurquoise</font></td><td><font color="#AFEEEE">#AFEEEE</font></td><td bgcolor="#AFEEEE">rgb(175, 238, 238)</td></tr>       <tr><td><font color="PaleVioletRed">PaleVioletRed</font></td><td><font color="#D87093">#D87093</font></td><td bgcolor="#D87093">rgb(216, 112, 147)</td></tr>       <tr><td><font color="PapayaWhip">PapayaWhip</font></td><td><font color="#FFEFD5">#FFEFD5</font></td><td bgcolor="#FFEFD5">rgb(255, 239, 213)</td></tr>           <tr><td><font color="PeachPuff">PeachPuff</font></td><td><font color="#FFDAB9">#FFDAB9</font></td><td bgcolor="#FFDAB9">rgb(255, 218, 185)</td></tr>         <tr><td><font color="Peru">Peru</font></td><td><font color="#CD853F">#CD853F</font></td><td bgcolor="#CD853F">rgb(205, 133, 63)</td></tr>         <tr><td><font color="Pink">Pink</font></td><td><font color="#FFC0CB">#FFC0CB</font></td><td bgcolor="#FFC0CB">rgb(255, 192, 203)</td></tr>        <tr><td><font color="Plum">Plum</font></td><td><font color="#DDA0DD">#DDA0DD</font></td><td bgcolor="#DDA0DD">rgb(221, 160, 221)</td></tr>         <tr><td><font color="PowderBlue">PowderBlue</font></td><td><font color="#B0E0E6">#B0E0E6</font></td><td bgcolor="#B0E0E6">rgb(176, 224, 230)</td></tr>        <tr><td><font color="Purple">Purple</font></td><td><font color="#800080">#800080</font></td><td bgcolor="#800080">rgb(128, 0, 128)</td></tr>          <tr><td><font color="Red">Red</font></td><td><font color="#FF0000">#FF0000</font></td><td bgcolor="#FF0000">rgb(255, 0, 0)</td></tr>         <tr><td><font color="RosyBrown">RosyBrown</font></td><td><font color="#BC8F8F">#BC8F8F</font></td><td bgcolor="#BC8F8F">rgb(188, 143, 143)</td></tr>      <tr><td><font color="RoyalBlue">RoyalBlue</font></td><td><font color="#4169E1">#4169E1</font></td><td bgcolor="#4169E1">rgb(65, 105, 225)</td></tr>        <tr><td><font color="SaddleBrown">SaddleBrown</font></td><td><font color="#8B4513">#8B4513</font></td><td bgcolor="#8B4513">rgb(139, 69, 19)</td></tr>     <tr><td><font color="Salmon">Salmon</font></td><td><font color="#FA8072">#FA8072</font></td><td bgcolor="#FA8072">rgb(250, 128, 114)</td></tr>        <tr><td><font color="SandyBrown">SandyBrown</font></td><td><font color="#F4A460">#F4A460</font></td><td bgcolor="#F4A460">rgb(244, 164, 96)</td></tr>         <tr><td><font color="SeaGreen">SeaGreen</font></td><td><font color="#2E8B57">#2E8B57</font></td><td bgcolor="#2E8B57">rgb(46, 139, 87)</td></tr>         <tr><td><font color="SeaShell">SeaShell</font></td><td><font color="#FFF5EE">#FFF5EE</font></td><td bgcolor="#FFF5EE">rgb(255, 245, 238)</td></tr>        <tr><td><font color="Sienna">Sienna</font></td><td><font color="#A0522D">#A0522D</font></td><td bgcolor="#A0522D">rgb(160, 82, 45)</td></tr>        <tr><td><font color="Silver">Silver</font></td><td><font color="#C0C0C0">#C0C0C0</font></td><td bgcolor="#C0C0C0">rgb(192, 192, 192)</td></tr>      <tr><td><font color="SkyBlue">SkyBlue</font></td><td><font color="#87CEEB">#87CEEB</font></td><td bgcolor="#87CEEB">rgb(135, 206, 235)</td></tr>       <tr><td><font color="SlateBlue">SlateBlue</font></td><td><font color="#6A5ACD">#6A5ACD</font></td><td bgcolor="#6A5ACD">rgb(106, 90, 205)</td></tr>         <tr><td><font color="SlateGray">SlateGray</font></td><td><font color="#708090">#708090</font></td><td bgcolor="#708090">rgb(112, 128, 144)</td></tr>         <tr><td><font color="Snow">Snow</font></td><td><font color="#FFFAFA">#FFFAFA</font></td><td bgcolor="#FFFAFA">rgb(255, 250, 250)</td></tr>           <tr><td><font color="SpringGreen">SpringGreen</font></td><td><font color="#00FF7F">#00FF7F</font></td><td bgcolor="#00FF7F">rgb(0, 255, 127)</td></tr>           <tr><td><font color="SteelBlue">SteelBlue</font></td><td><font color="#4682B4">#4682B4</font></td><td bgcolor="#4682B4">rgb(70, 130, 180)</td></tr>            <tr><td><font color="Tan">Tan</font></td><td><font color="#D2B48C">#D2B48C</font></td><td bgcolor="#D2B48C">rgb(210, 180, 140)</td></tr>            <tr><td><font color="Teal">Teal</font></td><td><font color="#008080">#008080</font></td><td bgcolor="#008080">rgb(0, 128, 128)</td></tr>            <tr><td><font color="Thistle">Thistle</font></td><td><font color="#D8BFD8">#D8BFD8</font></td><td bgcolor="#D8BFD8">rgb(216, 191, 216)</td></tr>            <tr><td><font color="Tomato">Tomato</font></td><td><font color="#FF6347">#FF6347</font></td><td bgcolor="#FF6347">rgb(255, 99, 71)</td></tr>        <tr><td><font color="Turquoise">Turquoise</font></td><td><font color="#40E0D0">#40E0D0</font></td><td bgcolor="#40E0D0">rgb(64, 224, 208)</td></tr>            <tr><td><font color="Violet">Violet</font></td><td><font color="#EE82EE">#EE82EE</font></td><td bgcolor="#EE82EE">rgb(238, 130, 238)</td></tr>            <tr><td><font color="VioletRed">VioletRed</font></td><td><font color="#D02090">#D02090</font></td><td bgcolor="#D02090">rgb(208, 32, 144)</td></tr>            <tr><td><font color="Wheat">Wheat</font></td><td><font color="#F5DEB3">#F5DEB3</font></td><td bgcolor="#F5DEB3">rgb(245, 222, 179)</td></tr>            <tr><td><font color="White">White</font></td><td><font color="#FFFFFF">#FFFFFF</font></td><td bgcolor="#FFFFFF">rgb(255, 255, 255)</td></tr>            <tr><td><font color="WhiteSmoke">WhiteSmoke</font></td><td><font color="#F5F5F5">#F5F5F5</font></td><td bgcolor="#F5F5F5">rgb(245, 245, 245)</td></tr>            <tr><td><font color="Yellow">Yellow</font></td><td><font color="#FFFF00">#FFFF00</font></td><td bgcolor="#FFFF00">rgb(255, 255, 0)</td></tr>            <tr><td><font color="YellowGreen">YellowGreen</font></td><td><font color="#9ACD32">#9ACD32</font></td><td bgcolor="#9ACD32">rgb(154, 205, 50)</td></tr></tbody></table>　　<p>　　　</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学无止境 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
